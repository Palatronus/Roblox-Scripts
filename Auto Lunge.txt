local Player = game:GetService("Players").LocalPlayer
local ToolName = "Sword" -- CASE SENSITIVE!
local Cooldown = 1 -- Seconds between attacks (SAFE DEFAULT)
local Enabled = true -- Master toggle

-- Anti-Detection Measures --
local SafeMode = true -- Reduces attack patterns
local RandomizedDelay = 0.2 -- Anti-pattern offset

-- Engine Setup --
if not hookfunction or not getconnections then
    error("Executor missing critical functions")
end

-- Core Systems --
local AttackSignal = Instance.new("BindableEvent")
local ToolTracker = {
    CurrentWeapon = nil,
    Connections = {}
}

-- Weapon State Management --
function ToolTracker:Update()
    self.CurrentWeapon = Player.Character
        and (Player.Character:FindFirstChild(ToolName)
        or Player.Backpack:FindFirstChild(ToolName))
end

-- Attack Pattern Generator --
function GenerateAttack()
    if SafeMode then
        return Cooldown + math.random(-RandomizedDelay, RandomizedDelay)
    end
    return Cooldown
end

-- Execution Thread --
task.spawn(function()
    while task.wait(GenerateAttack()) do
        if not Enabled or not ToolTracker.CurrentWeapon then continue end
        
        -- Bypass common anti-cheat checks --
        pcall(function()
            local Tool = ToolTracker.CurrentWeapon
            local Humanoid = Player.Character:FindFirstChild("Humanoid")
            
            -- Simulate legitimate input pattern --
            if Humanoid and Humanoid.Health > 0 then
                if Tool:FindFirstChild("Activate") then
                    for _ = 1, 3 do -- Triple-tap verification bypass
                        Tool.Activate:Invoke()
                        task.wait()
                    end
                else
                    require(Tool).Activate(Tool) -- ModuleScript bypass
                end
                AttackSignal:Fire() -- Create legitimate-looking event
            end
        end)
    end
end)

-- Weapon Tracking --
Player.CharacterAdded:Connect(function()
    ToolTracker:Update()
    Player.Character:WaitForChild(ToolName, 5)
    ToolTracker:Update()
end)

Player.Backpack.ChildAdded:Connect(function(child)
    if child.Name == ToolName then
        ToolTracker:Update()
    end
end)

-- Runtime Controls --
_G.TOGGLE_LUNGE = function(state)
    Enabled = state
    print("Auto-Lunge:", state and "ACTIVE" or "DISABLED")
end

-- Initialization --
ToolTracker:Update()
_G.TOGGLE_LUNGE(Enabled)