-- FE Precision Fling V6 (Proximity Control)
local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")
local Players = game:GetService("Players")
local LP = Players.LocalPlayer

-- GUI Setup (Improved from previous version)
local FlingGui = Instance.new("ScreenGui")
FlingGui.Name = "FlingControl"
FlingGui.Parent = game.CoreGui

-- [Insert Draggable GUI Code from Previous Answer Here]
-- Keep the same GUI implementation but add status label:

local StatusLabel = Instance.new("TextLabel")
StatusLabel.Parent = Frame
StatusLabel.Size = UDim2.new(0.9, 0, 0.2, 0)
StatusLabel.Position = UDim2.new(0.05, 0, 0.85, 0)
StatusLabel.Text = "Status: Inactive"
StatusLabel.TextColor3 = Color3.new(1, 1, 1)

-- Enhanced Fling Parameters
local Flinging = false
local Target = nil
local DESIRED_DISTANCE = 8 -- Optimal fling range (studs)
local MAX_PREDICTION = 1.2 -- Maximum prediction multiplier
local BASE_FORCE = 3800
local PROXIMITY_FORCE_MULTIPLIER = 2.5
local STATIONARY_FORCE_REDUCTION = 0.6

local function GetTargetVelocity()
    if not Target then return Vector3.new() end
    return Target.Velocity
end

local function ShouldPredict()
    local velocity = GetTargetVelocity()
    return velocity.Magnitude > 5 -- Only predict when moving significantly
end

local function CalculateOptimalPosition(targetPos, targetVel)
    local predictionMultiplier = math.clamp(targetVel.Magnitude/20, 0, MAX_PREDICTION)
    return targetPos + (ShouldPredict() and (targetVel * predictionMultiplier) or Vector3.new())
end

local function MaintainProximity(hrp, targetPos)
    local currentDist = (hrp.Position - targetPos).Magnitude
    local distanceRatio = math.clamp(currentDist/DESIRED_DISTANCE, 0.5, 2)
    
    -- Force calculation curve
    local force = BASE_FORCE * math.log(distanceRatio + 1) * PROXIMITY_FORCE_MULTIPLIER
    if distanceRatio < 1 then
        force = force * 0.7 -- Reduce force when within desired range
    end
    
    return force
end

local function SmartFling()
    ApplyCollision(false)
    local HRP = LP.Character and LP.Character:WaitForChild("HumanoidRootPart")
    if not HRP or not Target then return end

    local BodyVelocity = Instance.new("BodyVelocity")
    BodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    BodyVelocity.P = 100000
    BodyVelocity.Parent = HRP

    while Flinging and task.wait() do
        if not Target.Parent or not HRP.Parent then
            Target = GetTarget()
            HRP = LP.Character and LP.Character:WaitForChild("HumanoidRootPart")
            if not Target or not HRP then break end
        end

        local rawTargetPos = Target.Position
        local targetVel = GetTargetVelocity()
        local optimalPos = CalculateOptimalPosition(rawTargetPos, targetVel)
        
        -- Calculate desired force direction
        local toTarget = (optimalPos - HRP.Position).Unit
        local forceMagnitude = MaintainProximity(HRP, rawTargetPos)
        
        -- Apply force dampening when target is stationary
        if not ShouldPredict() then
            forceMagnitude = forceMagnitude * STATIONARY_FORCE_REDUCTION
        end

        BodyVelocity.Velocity = toTarget * forceMagnitude
        
        -- Vertical stabilization
        local verticalAdjust = math.clamp((rawTargetPos.Y - HRP.Position.Y) * 2, -500, 500)
        BodyVelocity.Velocity += Vector3.new(0, verticalAdjust, 0)
        
        StatusLabel.Text = string.format("Status: %s (%.1f studs)", 
            ShouldPredict() and "Predicting" or "Static", 
            (HRP.Position - rawTargetPos).Magnitude
        )
    end

    BodyVelocity:Destroy()
    ApplyCollision(true)
    StatusLabel.Text = "Status: Inactive"
end

-- [Keep the same death handling and GUI toggle code from previous version]
-- Add these updates to the toggle handler:

ToggleBtn.MouseButton1Click:Connect(function()
    Flinging = not Flinging
    ToggleBtn.BackgroundColor3 = Flinging and Color3.new(1, 0, 0) or Color3.new(0.3, 0.3, 0.3)
    StatusLabel.TextColor3 = Flinging and Color3.new(0, 1, 0) or Color3.new(1, 1, 1)
    
    if Flinging then
        Target = GetTarget()
        if Target then
            coroutine.wrap(SmartFling)()
        else
            Flinging = false
            StatusLabel.Text = "Status: Invalid Target"
        end
    end
end)
