-- FE Prediction Fling V4 (Fixed Direction + Draggable GUI)
local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")
local Players = game:GetService("Players")
local LP = Players.LocalPlayer
local Mouse = LP:GetMouse()

-- Draggable GUI Setup
local FlingGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local TargetBox = Instance.new("TextBox")
local ToggleBtn = Instance.new("TextButton")

FlingGui.Name = "FlingControl"
FlingGui.Parent = game.CoreGui

Frame.Parent = FlingGui
Frame.Size = UDim2.new(0, 200, 0, 100)
Frame.Position = UDim2.new(0.5, -100, 0.5, -50)
Frame.Active = true
Frame.Selectable = true
Frame.Draggable = true
Frame.BackgroundTransparency = 0.5

-- GUI Drag Implementation
local dragInput, dragStart, startPos
local function updateInput(input)
    local delta = input.Position - dragStart
    Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

Frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragStart = input.Position
        startPos = Frame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragInput = nil
            end
        end)
    end
end)

Frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput then
        updateInput(input)
    end
end)

TargetBox.Parent = Frame
TargetBox.Size = UDim2.new(0.9, 0, 0.4, 0)
TargetBox.Position = UDim2.new(0.05, 0, 0.1, 0)
TargetBox.PlaceholderText = "Enter Username"

ToggleBtn.Parent = Frame
ToggleBtn.Size = UDim2.new(0.9, 0, 0.4, 0)
ToggleBtn.Position = UDim2.new(0.05, 0, 0.55, 0)
ToggleBtn.Text = "Toggle Fling"
ToggleBtn.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)

-- Improved Fling Mechanics
local Flinging = false
local Target = nil
local PredictionFactor = 1.35
local FlingForce = 4800
local DirectionChangeInterval = 0.08

local function GetTarget()
    local targetPlayer = Players:FindFirstChild(TargetBox.Text)
    return targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
end

local function ApplyCollision(state)
    if LP.Character then
        for _, part in pairs(LP.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = state
            end
        end
    end
end

local function SmartFling()
    ApplyCollision(false)
    local HRP = LP.Character and LP.Character:FindFirstChild("HumanoidRootPart")
    if not HRP or not Target then return end

    local BodyVelocity = Instance.new("BodyVelocity")
    BodyVelocity.Velocity = Vector3.new()
    BodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    BodyVelocity.P = 100000
    BodyVelocity.Parent = HRP

    local lastDirChange = tick()
    local randomOffset = Vector3.new()

    while Flinging and task.wait() do
        if not Target.Parent then
            Target = GetTarget()
            if not Target then break end
        end

        -- Improved prediction calculation
        local targetVel = Target.Velocity
        local predictedPos = Target.Position + (targetVel * PredictionFactor)
        
        -- Dynamic direction with proper axis balancing
        local baseDirection = (predictedPos - HRP.Position).Unit
        local distanceFactor = math.clamp((HRP.Position - Target.Position).Magnitude/10, 1, 4)
        
        -- Add controlled random offset
        if tick() - lastDirChange > DirectionChangeInterval then
            randomOffset = Vector3.new(
                math.random(-100, 100)/200,
                math.random(-50, 150)/200,
                math.random(-100, 100)/200
            )
            lastDirChange = tick()
        end

        -- Final velocity calculation
        BodyVelocity.Velocity = (baseDirection + randomOffset) * (FlingForce * distanceFactor)

        -- Enhanced jump detection
        if Target.Velocity.Y > 10 then
            BodyVelocity.Velocity += Vector3.new(0, FlingForce/3 * (Target.Velocity.Y/20), 0)
        end
    end

    BodyVelocity:Destroy()
    ApplyCollision(true)
end

ToggleBtn.MouseButton1Click:Connect(function()
    Flinging = not Flinging
    ToggleBtn.BackgroundColor3 = Flinging and Color3.new(1, 0, 0) or Color3.new(0.3, 0.3, 0.3)
    
    if Flinging then
        Target = GetTarget()
        if Target then
            coroutine.wrap(SmartFling)()
        end
    else
        Target = nil
    end
end)

-- Improved target tracking
local function HeartbeatUpdate()
    if Flinging and (not Target or not Target.Parent) then
        Target = GetTarget()
        if not Target then
            Flinging = false
            ToggleBtn.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)
        end
    end
end

RS.Heartbeat:Connect(HeartbeatUpdate)
