local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- GUI Construction (unchanged from previous version)
local gui = Instance.new("ScreenGui")
gui.Name = "FlingController"
gui.ResetOnSpawn = false

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 120)
frame.Position = UDim2.new(0.5, -100, 0.5, -60)
frame.BackgroundColor3 = Color3.new(0.15, 0.15, 0.15)
frame.Active = true

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 20)
title.Text = "Fling Controller (Drag)"
title.BackgroundColor3 = Color3.new(0.25, 0.25, 0.25)
title.TextColor3 = Color3.new(1, 1, 1)
title.Parent = frame

local inputBox = Instance.new("TextBox")
inputBox.Size = UDim2.new(0.9, 0, 0, 25)
inputBox.Position = UDim2.new(0.05, 0, 0.25, 0)
inputBox.PlaceholderText = "Target Username"
inputBox.Parent = frame

local toggleBtn = Instance.new("TextButton")
toggleBtn.Size = UDim2.new(0.9, 0, 0, 25)
toggleBtn.Position = UDim2.new(0.05, 0, 0.55, 0)
toggleBtn.Text = "ENABLE FLING"
toggleBtn.Parent = frame

frame.Parent = gui
gui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- Dragging Mechanism (unchanged)
-- ... [Same drag code as previous versions] ...

-- Core Fling System v4
local activeConnections = {}
local anchorPart
local originalState = {}
local targetPlayer
local safetyChecks = {}
local repairQueue = 0

local function nuclearCleanup()
    for _, conn in pairs(activeConnections) do
        conn:Disconnect()
    end
    activeConnections = {}
    
    for _, check in pairs(safetyChecks) do
        check:Disconnect()
    end
    safetyChecks = {}
    
    if anchorPart then
        anchorPart:Destroy()
        anchorPart = nil
    end
    
    repairQueue = 0
end

local function alignParts(part1, part2)
    local att0 = Instance.new("Attachment")
    local att1 = att0:Clone()
    
    local alignPos = Instance.new("AlignPosition")
    alignPos.Attachment0 = att0
    alignPos.Attachment1 = att1
    alignPos.ApplyAtCenterOfMass = true
    alignPos.MaxForce = 9e9
    alignPos.Responsiveness = 200
    alignPos.Parent = att0

    att0.Parent = part1
    att1.Parent = part2
end

local function executeFling(targetHRP)
    nuclearCleanup()
    
    if not LocalPlayer.Character or not targetHRP then return end
    local localHRP = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not localHRP then return end

    -- State preservation
    originalState.CFrame = localHRP.CFrame
    originalState.Velocity = localHRP.Velocity
    originalState.RotVelocity = localHRP.RotVelocity

    -- Teleport & anchor
    localHRP.CFrame = targetHRP.CFrame
    anchorPart = Instance.new("Part")
    anchorPart.Name = "FlingCore"
    anchorPart.Anchored = true
    anchorPart.Transparency = 1
    anchorPart.Size = Vector3.new(2, 2, 1)
    anchorPart.CFrame = localHRP.CFrame
    anchorPart.Parent = LocalPlayer.Character

    -- Part configuration
    local flingParts = {}
    for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
        if part:IsA("BasePart") then
            if part.CanCollide then
                table.insert(flingParts, part)
                alignParts(part, anchorPart)
            else
                part.Velocity = Vector3.new(0, -1000, 0)
            end
        end
    end

    -- Frame-perfect tracking
    activeConnections.follow = RunService.Stepped:Connect(function()
        if targetHRP and targetHRP.Parent then
            anchorPart.CFrame = targetHRP.CFrame
        end
    end)

    activeConnections.spin = RunService.Heartbeat:Connect(function()
        for _, part in ipairs(flingParts) do
            part.Velocity = Vector3.new(0, -25.05, 0)
            part.RotVelocity = Vector3.new(9999, 9999, 9999)
        end
    end)

    -- Quantum Healing System
    local function launchRepair()
        if repairQueue > 2 then return end
        repairQueue += 1
        nuclearCleanup()
        monitorTarget()
        repairQueue -= 1
    end

    -- Layer 1: Direct HRP monitoring
    safetyChecks.hrpWatcher = targetHRP.AncestryChanged:Connect(function()
        if not targetHRP:IsDescendantOf(game) then
            launchRepair()
        end
    end)

    -- Layer 2: Anchor validation
    safetyChecks.anchorWatcher = RunService.Heartbeat:Connect(function()
        if not anchorPart or not anchorPart.Parent then
            launchRepair()
        end
    end)

    -- Layer 3: Positional sanity check
    safetyChecks.positionWatcher = RunService.Heartbeat:Connect(function()
        if anchorPart and targetHRP and 
            (anchorPart.Position - targetHRP.Position).Magnitude > 10 then
            launchRepair()
        end
    end)

    -- Layer 4: Nuclear fallback (1sec interval)
    safetyChecks.nukeWatcher = RunService.Heartbeat:Connect(function()
        if not safetyChecks.lastNukeCheck or time() - safetyChecks.lastNukeCheck > 1 then
            safetyChecks.lastNukeCheck = time()
            if not targetPlayer or not targetPlayer.Parent then
                launchRepair()
            end
        end
    end)
end

local function monitorTarget()
    nuclearCleanup()
    
    -- Target acquisition
    targetPlayer = Players:FindFirstChild(inputBox.Text)
    if not targetPlayer then return end

    -- Immediate character check
    if targetPlayer.Character then
        local hrp = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            executeFling(hrp)
        end
    end

    -- Future character handler
    safetyChecks.charTracker = targetPlayer.CharacterAdded:Connect(function(char)
        local hrp = char:WaitForChild("HumanoidRootPart", 2)
        if hrp then
            executeFling(hrp)
        else
            nuclearCleanup()
            task.wait(1)
            monitorTarget()
        end
    end)

    -- Player lifecycle monitor
    safetyChecks.lifeTracker = targetPlayer.AncestryChanged:Connect(function(_, parent)
        if parent == nil then
            safetyChecks.rejoinTracker = Players.PlayerAdded:Connect(function(newPlayer)
                if newPlayer.Name == inputBox.Text then
                    safetyChecks.rejoinTracker:Disconnect()
                    targetPlayer = newPlayer
                    monitorTarget()
                end
            end)
        end
    end)
end

-- Control Logic
toggleBtn.MouseButton1Click:Connect(function()
    if toggleBtn.Text == "ENABLE FLING" then
        toggleBtn.Text = "DISABLE FLING"
        monitorTarget()
        
        safetyChecks.respawnTracker = LocalPlayer.CharacterAdded:Connect(function()
            task.wait(1)
            monitorTarget()
        end)
    else
        toggleBtn.Text = "ENABLE FLING"
        nuclearCleanup()
    end
end)
