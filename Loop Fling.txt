-- In the Fling Mechanics section, replace from line 148 onward with:

-- Optimized Fling Mechanics
local Flinging = false
local Target = nil
local PredictionFactor = 1.2
local BaseForce = 4200
local ForceMultiplier = 2.8
local DESIRED_DISTANCE = 8
local MAX_FORCE = 10000

-- Keep GetTarget and ApplyCollision functions the same

local function PrecisionFling()
    ApplyCollision(false)
    local HRP = LP.Character and LP.Character:WaitForChild("HumanoidRootPart")
    if not HRP or not Target then return end

    local BodyVelocity = Instance.new("BodyVelocity")
    BodyVelocity.Velocity = Vector3.new()
    BodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    BodyVelocity.P = 100000
    BodyVelocity.Parent = HRP

    while Flinging and task.wait() do
        if not Target.Parent or not HRP.Parent then
            Target = GetTarget()
            if not Target then break end
            HRP = LP.Character:WaitForChild("HumanoidRootPart")
        end

        -- Improved Distance Control
        local targetPos = Target.Position
        local targetVel = Target.Velocity
        local currentDist = (HRP.Position - targetPos).Magnitude
        
        -- Dynamic Prediction
        local prediction = targetVel * PredictionFactor * math.clamp(targetVel.Magnitude/25, 0, 1)
        local predictedPos = targetPos + prediction
        
        -- Adaptive Force Calculation
        local distanceRatio = math.clamp(currentDist/DESIRED_DISTANCE, 0.5, 2)
        local force = BaseForce * distanceRatio * (distanceRatio > 1 and ForceMultiplier or 1)
        force = math.min(force, MAX_FORCE)
        
        -- Directional Adjustment
        local direction = (predictedPos - HRP.Position).Unit
        local verticalComp = math.clamp((targetPos.Y - HRP.Position.Y) * 0.35, -1.5, 1.5)
        
        BodyVelocity.Velocity = (direction + Vector3.new(0, verticalComp, 0)) * force
        
        -- Proximity Stabilization
        if currentDist < DESIRED_DISTANCE then
            BodyVelocity.Velocity = BodyVelocity.Velocity * 0.65
        end
    end

    BodyVelocity:Destroy()
    ApplyCollision(true)
end

-- Keep death handling and other systems the same
