-- FE Stable Fling V5.1 (Proximity Fix)
local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")
local Players = game:GetService("Players")
local LP = Players.LocalPlayer

-- GUI Setup (From Working Version)
local FlingGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local TargetBox = Instance.new("TextBox")
local ToggleBtn = Instance.new("TextButton")

FlingGui.Name = "FlingControl"
FlingGui.Parent = game.CoreGui
FlingGui.ResetOnSpawn = false

-- [Insert Previous Draggable GUI Implementation Here]

-- Restored Working Parameters
local Flinging = false
local Target = nil
local DESIRED_RANGE = 5 -- Studs
local BASE_FORCE = 4200
local PREDICTION_THRESHOLD = 8 -- Velocity magnitude required for prediction

local function GetTarget()
    local targetPlayer = Players:FindFirstChild(TargetBox.Text)
    return targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
end

local function ApplyCollision(state)
    if LP.Character then
        for _, part in pairs(LP.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = state
            end
        end
    end
end

local function StableFling()
    ApplyCollision(false)
    local HRP = LP.Character and LP.Character:WaitForChild("HumanoidRootPart")
    if not HRP or not Target then return end

    local BodyVelocity = Instance.new("BodyVelocity")
    BodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    BodyVelocity.P = 100000
    BodyVelocity.Parent = HRP

    while Flinging and task.wait() do
        if not Target.Parent or not HRP.Parent then
            Target = GetTarget()
            HRP = LP.Character and LP.Character:WaitForChild("HumanoidRootPart")
            if not Target or not HRP then break end
        end

        -- Proximity-controlled force calculation
        local rawTargetPos = Target.Position
        local currentDistance = (HRP.Position - rawTargetPos).Magnitude
        local forceMultiplier = math.clamp(currentDistance/DESIRED_RANGE, 0.8, 3)
        
        -- Conditional prediction
        local targetVel = Target.Velocity
        local usePrediction = targetVel.Magnitude > PREDICTION_THRESHOLD
        local finalPosition = usePrediction and (rawTargetPos + (targetVel * 0.8)) or rawTargetPos
        
        -- Direction calculation
        local toTarget = (finalPosition - HRP.Position).Unit
        local verticalComp = math.clamp((rawTargetPos.Y - HRP.Position.Y) * 0.5, -2, 2)
        
        BodyVelocity.Velocity = (toTarget + Vector3.new(0, verticalComp, 0)) * (BASE_FORCE * forceMultiplier)
    end

    BodyVelocity:Destroy()
    ApplyCollision(true)
end

-- Death Handling (From Working Version)
LP.CharacterAdded:Connect(function()
    if Flinging then
        StableFling()
    end
end)

-- Toggle System (Restored)
ToggleBtn.MouseButton1Click:Connect(function()
    Flinging = not Flinging
    ToggleBtn.BackgroundColor3 = Flinging and Color3.new(1, 0, 0) or Color3.new(0.3, 0.3, 0.3)
    
    if Flinging then
        Target = GetTarget()
        if Target then
            coroutine.wrap(StableFling)()
        end
    else
        Target = nil
    end
end)

-- Auto-Target Refresh
RS.Heartbeat:Connect(function()
    if Flinging and (not Target or not Target.Parent) then
        Target = GetTarget()
        if not Target then
            Flinging = false
            ToggleBtn.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)
        end
    end
end)
