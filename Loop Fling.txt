local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- GUI Setup
local gui = Instance.new("ScreenGui")
gui.Name = "FlingGUI"
gui.ResetOnSpawn = false

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 100)
frame.Position = UDim2.new(0.5, -100, 0, 10)
frame.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
frame.Active = true
frame.Draggable = true

local textBox = Instance.new("TextBox")
textBox.Size = UDim2.new(0.9, 0, 0.3, 0)
textBox.Position = UDim2.new(0.05, 0, 0.1, 0)
textBox.PlaceholderText = "Enter username"
textBox.Parent = frame

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0.9, 0, 0.4, 0)
toggleButton.Position = UDim2.new(0.05, 0, 0.5, 0)
toggleButton.Text = "Toggle Fling (OFF)"
toggleButton.Parent = frame

frame.Parent = gui
gui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- Draggable functionality
local dragging
local dragInput
local dragStart
local startPos

local function updateInput(input)
    local delta = input.Position - dragStart
    frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        updateInput(input)
    end
end)

-- Fling logic
local flinging = false
local targetPlayer
local anchor
local follow
local spin
local alignments = {}

local function align(Part0, Part1)
    local att1 = Instance.new("Attachment")
    att1.Position = Vector3.new(0, 0, 0)
    local att0 = att1:Clone()

    local ap = Instance.new("AlignPosition")
    ap.ApplyAtCenterOfMass = true
    ap.MaxForce = 9e9
    ap.MaxVelocity = 9e9
    ap.ReactionForceEnabled = false
    ap.Responsiveness = 200
    ap.RigidityEnabled = false
    ap.Attachment1 = att1
    ap.Attachment0 = att0
    ap.Parent = att0

    att1.Parent = Part1
    att0.Parent = Part0
    table.insert(alignments, ap)
end

local function cleanupFling()
    if anchor then
        anchor:Destroy()
        anchor = nil
    end
    if follow then
        follow:Disconnect()
        follow = nil
    end
    if spin then
        spin:Disconnect()
        spin = nil
    end
    for _, alignment in pairs(alignments) do
        alignment:Destroy()
    end
    alignments = {}
end

toggleButton.MouseButton1Click:Connect(function()
    flinging = not flinging
    toggleButton.Text = flinging and "Toggle Fling (ON)" or "Toggle Fling (OFF)"
    
    if flinging then
        -- Improved player finding with case-insensitivity
        local targetName = string.lower(textBox.Text)
        for _, player in ipairs(Players:GetPlayers()) do
            if string.lower(player.Name) == targetName then
                targetPlayer = player
                break
            end
        end
        
        if not targetPlayer then return end
        
        local function flingLoop()
            while flinging and targetPlayer do
                local localChar = LocalPlayer.Character
                local targetChar = targetPlayer.Character
                
                if localChar and targetChar then
                    local hrp = localChar:FindFirstChild("HumanoidRootPart")
                    local targetHrp = targetChar:FindFirstChild("HumanoidRootPart")
                    
                    if hrp and targetHrp then
                        -- Force teleport
                        hrp.CFrame = targetHrp.CFrame * CFrame.new(0, 0, 0)
                        
                        -- Create anchor
                        if not anchor or not anchor.Parent then
                            anchor = Instance.new("Part")
                            anchor.Name = "FlingAnchor"
                            anchor.Anchored = true
                            anchor.Transparency = 1
                            anchor.CanCollide = false
                            anchor.Size = Vector3.new(2, 2, 1)
                            anchor.Parent = localChar
                        end
                        anchor.CFrame = targetHrp.CFrame
                        
                        -- Align parts
                        for _, part in ipairs(localChar:GetDescendants()) do
                            if part:IsA("BasePart") and not part:FindFirstChild("AlignPosition") then
                                if part.CanCollide then
                                    align(part, anchor)
                                else
                                    part.Velocity = Vector3.new(0, -1000, 0)
                                end
                            end
                        end
                        
                        -- Update anchor position
                        if not follow then
                            follow = RunService.Stepped:Connect(function()
                                if targetHrp and targetHrp.Parent then
                                    anchor.CFrame = targetHrp.CFrame
                                end
                            end)
                        end
                        
                        -- Apply spin
                        if not spin then
                            spin = RunService.Heartbeat:Connect(function()
                                for _, part in ipairs(localChar:GetDescendants()) do
                                    if part:IsA("BasePart") and part.CanCollide then
                                        part.Velocity = Vector3.new(0, -25.05, 0)
                                        part.RotVelocity = Vector3.new(9999, 9999, 9999)
                                    end
                                end
                            end)
                        end
                    end
                end
                RunService.Heartbeat:Wait()
            end
            cleanupFling()
        end
        coroutine.wrap(flingLoop)()
    else
        cleanupFling()
    end
end)
