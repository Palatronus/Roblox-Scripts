--[[
	Precise Shiftlock Camera System for Roblox
	FE Compatible | Anti-Spin Technology | Immediate Response
	
	Eliminates unwanted camera spinning while maintaining perfect synchronization
	between camera and character movements. Built upon successful SL.lua concepts
	with enhanced stability and performance optimizations.
]]

-- Performance optimized references
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

-- Player and camera references
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- Shiftlock state management
local ShiftlockActive = false
local ShiftlockAllowed = true
local RenderConnection = nil

-- Character component references
local Character = nil
local Humanoid = nil
local RootPart = nil

-- Camera system constants (based on successful SL.lua prototype)
local MAX_LENGTH = 900000 -- Character rotation precision multiplier
local ENABLED_OFFSET = CFrame.new(1.7, 0, 0) -- Right shoulder camera offset
local DISABLED_OFFSET = CFrame.new(-1.7, 0, 0) -- Restoration offset

-- Anti-spin stabilization variables
local LastCameraLookVector = Vector3.new(0, 0, -1)
local CameraStabilizationThreshold = 0.1
local FrameCounter = 0
local StabilizationFrames = 3

-- FE-safe property setter with error handling
local function SafeSetProperty(instance, property, value)
	local success, error = pcall(function()
		instance[property] = value
	end)
	if not success then
		warn("Shiftlock: Failed to set " .. property .. " - " .. tostring(error))
	end
	return success
end

-- Enhanced character component detection with FE validation
local function GetCharacterComponents()
	Character = LocalPlayer.Character
	if not Character then return false end
	
	RootPart = Character:FindFirstChild("HumanoidRootPart") or 
	          Character:FindFirstChild("Torso") or 
	          Character:FindFirstChild("UpperTorso")
	          
	Humanoid = Character:FindFirstChildOfClass("Humanoid")
	
	-- Validate component accessibility for FE compatibility
	if RootPart and Humanoid then
		local success = pcall(function()
			local _ = RootPart.CFrame
			local _ = Humanoid.AutoRotate
			local _ = Camera.CFrame
		end)
		return success
	end
	
	return false
end

-- Anti-spin camera look vector stabilization
local function StabilizeCameraLookVector()
	local currentLookVector = Camera.CFrame.LookVector
	
	-- Check for sudden direction changes that indicate spinning
	local dotProduct = LastCameraLookVector:Dot(currentLookVector)
	
	-- If the camera direction changed drastically, use stabilized vector
	if dotProduct < CameraStabilizationThreshold then
		FrameCounter = FrameCounter + 1
		
		-- Only update after stabilization frames to prevent jitter
		if FrameCounter >= StabilizationFrames then
			LastCameraLookVector = currentLookVector
			FrameCounter = 0
		else
			-- Use the last stable look vector
			return LastCameraLookVector
		end
	else
		-- Smooth transition for normal camera movement
		LastCameraLookVector = currentLookVector
		FrameCounter = 0
	end
	
	return currentLookVector
end

-- Precise character rotation synchronization (SL.lua method enhanced)
local function SynchronizeCharacterRotation()
	if not GetCharacterComponents() then return end
	
	-- Get stabilized camera look vector to prevent spinning
	local stabilizedLookVector = StabilizeCameraLookVector()
	
	-- Create horizontal look direction (Y-axis locked for stability)
	local horizontalLook = Vector3.new(
		stabilizedLookVector.X * MAX_LENGTH,
		RootPart.Position.Y, -- Maintain current Y position
		stabilizedLookVector.Z * MAX_LENGTH
	)
	
	-- Apply immediate character rotation (FE safe)
	local targetCFrame = CFrame.new(RootPart.Position, horizontalLook)
	SafeSetProperty(RootPart, "CFrame", targetCFrame)
end

-- Enhanced camera positioning with anti-spin technology
local function UpdateCameraPosition()
	if not GetCharacterComponents() then return end
	
	-- Apply camera offset using SL.lua's proven method
	local currentCameraCFrame = Camera.CFrame
	local offsetCameraCFrame = currentCameraCFrame * ENABLED_OFFSET
	
	-- Update camera position (FE safe)
	SafeSetProperty(Camera, "CFrame", offsetCameraCFrame)
	
	-- Update camera focus with proper matrix calculation (SL.lua method)
	local focusCFrame = CFrame.fromMatrix(
		Camera.Focus.Position,
		Camera.CFrame.RightVector,
		Camera.CFrame.UpVector
	) * ENABLED_OFFSET
	
	SafeSetProperty(Camera, "Focus", focusCFrame)
end

-- Main shiftlock update loop with immediate response
local function ShiftlockUpdateLoop()
	if not ShiftlockActive or not GetCharacterComponents() then return end
	
	-- Disable character auto-rotation for manual control
	SafeSetProperty(Humanoid, "AutoRotate", false)
	
	-- Synchronize character rotation with camera (immediate, no delay)
	SynchronizeCharacterRotation()
	
	-- Update camera position for shoulder view
	UpdateCameraPosition()
end

-- Enable shiftlock with enhanced stability
local function EnableShiftlock()
	if not ShiftlockAllowed or not GetCharacterComponents() then return end
	
	ShiftlockActive = true
	
	-- Initialize camera stabilization
	LastCameraLookVector = Camera.CFrame.LookVector
	FrameCounter = 0
	
	-- Connect to RenderStepped for immediate response (SL.lua method)
	if RenderConnection then
		RenderConnection:Disconnect()
	end
	
	RenderConnection = RunService.RenderStepped:Connect(ShiftlockUpdateLoop)
	
	-- Lock mouse to center for proper camera control
	SafeSetProperty(UserInputService, "MouseBehavior", Enum.MouseBehavior.LockCenter)
	
	print("Shiftlock: Enabled (Anti-Spin)")
end

-- Disable shiftlock with proper restoration
local function DisableShiftlock()
	ShiftlockActive = false
	
	-- Disconnect update loop
	if RenderConnection then
		RenderConnection:Disconnect()
		RenderConnection = nil
	end
	
	-- Restore character auto-rotation
	if GetCharacterComponents() then
		SafeSetProperty(Humanoid, "AutoRotate", true)
	end
	
	-- Restore camera position using SL.lua's offset method
	local currentCameraCFrame = Camera.CFrame
	SafeSetProperty(Camera, "CFrame", currentCameraCFrame * DISABLED_OFFSET)
	
	-- Restore default mouse behavior
	SafeSetProperty(UserInputService, "MouseBehavior", Enum.MouseBehavior.Default)
	
	print("Shiftlock: Disabled")
end

-- Toggle shiftlock state
local function ToggleShiftlock()
	if ShiftlockActive then
		DisableShiftlock()
	else
		EnableShiftlock()
	end
end

-- Input handling for Shift key toggle
local function OnInputBegan(input, gameProcessed)
	if gameProcessed then return end
	
	-- Support both left and right shift keys
	if input.KeyCode == Enum.KeyCode.LeftShift or input.KeyCode == Enum.KeyCode.RightShift then
		ToggleShiftlock()
	end
end

-- Handle character respawn and cleanup
local function OnCharacterAdded(character)
	Character = character
	
	-- Wait for essential components
	character:WaitForChild("HumanoidRootPart", 10)
	character:WaitForChild("Humanoid", 10)
	
	-- Reset shiftlock state on respawn
	if ShiftlockActive then
		DisableShiftlock()
	end
	
	-- Reset stabilization variables
	LastCameraLookVector = Vector3.new(0, 0, -1)
	FrameCounter = 0
end

-- Mouse behavior protection (prevent external interference)
local function ProtectMouseBehavior()
	if ShiftlockActive and UserInputService.MouseBehavior ~= Enum.MouseBehavior.LockCenter then
		SafeSetProperty(UserInputService, "MouseBehavior", Enum.MouseBehavior.LockCenter)
	end
end

-- Initialize system connections
UserInputService.InputBegan:Connect(OnInputBegan)
UserInputService:GetPropertyChangedSignal("MouseBehavior"):Connect(ProtectMouseBehavior)

-- Handle character management
LocalPlayer.CharacterAdded:Connect(OnCharacterAdded)
if LocalPlayer.Character then
	OnCharacterAdded(LocalPlayer.Character)
end

-- Enhanced API for external control
local PreciseShiftlockAPI = {
	-- Toggle shiftlock state
	Toggle = function()
		ToggleShiftlock()
		return ShiftlockActive
	end,
	
	-- Enable shiftlock
	Enable = function()
		EnableShiftlock()
		return ShiftlockActive
	end,
	
	-- Disable shiftlock
	Disable = function()
		DisableShiftlock()
		return ShiftlockActive
	end,
	
	-- Check if shiftlock is active
	IsActive = function()
		return ShiftlockActive
	end,
	
	-- Check if shiftlock is allowed
	IsAllowed = function()
		return ShiftlockAllowed
	end,
	
	-- Set shiftlock permission
	SetAllowed = function(allowed)
		ShiftlockAllowed = allowed
		if not allowed and ShiftlockActive then
			DisableShiftlock()
		end
		return ShiftlockAllowed
	end,
	
	-- Get stabilization status
	GetStabilizationInfo = function()
		return {
			LastLookVector = LastCameraLookVector,
			FrameCounter = FrameCounter,
			Threshold = CameraStabilizationThreshold
		}
	end,
	
	-- Adjust stabilization sensitivity
	SetStabilizationThreshold = function(threshold)
		CameraStabilizationThreshold = math.clamp(threshold, 0.01, 1.0)
		return CameraStabilizationThreshold
	end
}

-- System initialization
print("Precise Shiftlock Camera System Loaded!")
print("Features: Anti-Spin Technology | FE Compatible | Immediate Response")
print("Press Shift to toggle Shiftlock mode")

-- Export API
return PreciseShiftlockAPI
