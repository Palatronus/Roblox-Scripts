--[[
	Precise Shiftlock Camera System for Roblox
	FE Compatible | Mouse Movement Support | Immediate Response
	
	Provides authentic PC Roblox Shiftlock experience with free camera movement
	and precise character synchronization. No camera locking issues.
]]

-- Performance optimized references
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

-- Player and camera references
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- Shiftlock state management
local ShiftlockActive = false
local ShiftlockAllowed = true
local RenderConnection = nil

-- Character component references
local Character = nil
local Humanoid = nil
local RootPart = nil

-- Mouse movement tracking
local MouseSensitivity = 0.002
local LastMousePosition = Vector2.new(0, 0)
local CameraAngles = Vector2.new(0, 0) -- X = Yaw, Y = Pitch

-- Camera system constants
local SHOULDER_OFFSET = Vector3.new(1.75, 2, 0) -- Right shoulder offset
local CAMERA_DISTANCE = 12.5 -- Distance from character

-- FE-safe property setter with error handling
local function SafeSetProperty(instance, property, value)
	local success, error = pcall(function()
		instance[property] = value
	end)
	if not success then
		warn("Shiftlock: Failed to set " .. property .. " - " .. tostring(error))
	end
	return success
end

-- Enhanced character component detection with FE validation
local function GetCharacterComponents()
	Character = LocalPlayer.Character
	if not Character then return false end
	
	RootPart = Character:FindFirstChild("HumanoidRootPart") or 
	          Character:FindFirstChild("Torso") or 
	          Character:FindFirstChild("UpperTorso")
	          
	Humanoid = Character:FindFirstChildOfClass("Humanoid")
	
	-- Validate component accessibility for FE compatibility
	if RootPart and Humanoid then
		local success = pcall(function()
			local _ = RootPart.CFrame
			local _ = Humanoid.AutoRotate
		end)
		return success
	end
	
	return false
end

-- Handle mouse movement for camera rotation
local function HandleMouseMovement()
	if not ShiftlockActive or not GetCharacterComponents() then return end
	
	local mouse = LocalPlayer:GetMouse()
	local currentMousePos = Vector2.new(mouse.X, mouse.Y)
	local mouseDelta = currentMousePos - LastMousePosition
	
	-- Update camera angles based on mouse movement
	CameraAngles = CameraAngles + Vector2.new(mouseDelta.X * MouseSensitivity, -mouseDelta.Y * MouseSensitivity)
	
	-- Clamp pitch to prevent over-rotation
	CameraAngles = Vector2.new(CameraAngles.X, math.clamp(CameraAngles.Y, -1.4, 1.4))
	
	-- Calculate camera position based on angles
	local rootPosition = RootPart.Position
	local yaw = CameraAngles.X
	local pitch = CameraAngles.Y
	
	-- Create camera offset vector
	local cameraOffset = Vector3.new(
		math.sin(yaw) * math.cos(pitch),
		math.sin(pitch),
		math.cos(yaw) * math.cos(pitch)
	) * CAMERA_DISTANCE
	
	-- Apply shoulder offset and position camera
	local cameraPosition = rootPosition + cameraOffset + SHOULDER_OFFSET
	local lookAtPosition = rootPosition + Vector3.new(0, 2, 0) -- Look at character's torso
	
	-- Set camera CFrame
	local targetCFrame = CFrame.lookAt(cameraPosition, lookAtPosition)
	SafeSetProperty(Camera, "CFrame", targetCFrame)
	
	LastMousePosition = currentMousePos
end

-- Synchronize character rotation with camera direction
local function SynchronizeCharacterRotation()
	if not GetCharacterComponents() then return end
	
	-- Get camera's horizontal look direction
	local cameraLookVector = Camera.CFrame.LookVector
	local horizontalLook = Vector3.new(cameraLookVector.X, 0, cameraLookVector.Z).Unit
	
	-- Create target position for character to look at
	local targetPosition = RootPart.Position + (horizontalLook * 100)
	
	-- Apply character rotation
	local targetCFrame = CFrame.new(RootPart.Position, targetPosition)
	SafeSetProperty(RootPart, "CFrame", targetCFrame)
end

-- Main shiftlock update loop
local function ShiftlockUpdateLoop()
	if not ShiftlockActive or not GetCharacterComponents() then return end
	
	-- Disable character auto-rotation
	SafeSetProperty(Humanoid, "AutoRotate", false)
	
	-- Handle mouse movement for camera control
	HandleMouseMovement()
	
	-- Synchronize character rotation with camera
	SynchronizeCharacterRotation()
end

-- Enable shiftlock
local function EnableShiftlock()
	if not ShiftlockAllowed or not GetCharacterComponents() then return end
	
	ShiftlockActive = true
	
	-- Initialize mouse tracking
	local mouse = LocalPlayer:GetMouse()
	LastMousePosition = Vector2.new(mouse.X, mouse.Y)
	
	-- Initialize camera angles based on current camera direction
	local currentLookVector = Camera.CFrame.LookVector
	CameraAngles = Vector2.new(
		math.atan2(currentLookVector.X, currentLookVector.Z), -- Yaw
		math.asin(-currentLookVector.Y) -- Pitch
	)
	
	-- Set mouse behavior for shiftlock
	SafeSetProperty(UserInputService, "MouseBehavior", Enum.MouseBehavior.LockCenter)
	
	-- Set camera properties
	SafeSetProperty(Camera, "CameraSubject", RootPart)
	SafeSetProperty(Camera, "CameraType", Enum.CameraType.Custom)
	
	-- Connect update loop
	if RenderConnection then
		RenderConnection:Disconnect()
	end
	RenderConnection = RunService.RenderStepped:Connect(ShiftlockUpdateLoop)
	
	print("Shiftlock: Enabled")
end

-- Disable shiftlock
local function DisableShiftlock()
	ShiftlockActive = false
	
	-- Disconnect update loop
	if RenderConnection then
		RenderConnection:Disconnect()
		RenderConnection = nil
	end
	
	-- Restore character auto-rotation
	if GetCharacterComponents() then
		SafeSetProperty(Humanoid, "AutoRotate", true)
	end
	
	-- Restore default mouse behavior
	SafeSetProperty(UserInputService, "MouseBehavior", Enum.MouseBehavior.Default)
	
	-- Reset camera to default
	SafeSetProperty(Camera, "CameraType", Enum.CameraType.Custom)
	SafeSetProperty(Camera, "CameraSubject", Humanoid)
	
	print("Shiftlock: Disabled")
end

-- Toggle shiftlock state
local function ToggleShiftlock()
	if ShiftlockActive then
		DisableShiftlock()
	else
		EnableShiftlock()
	end
end

-- Input handling for Shift key toggle
local function OnInputBegan(input, gameProcessed)
	if gameProcessed then return end
	
	-- Support both left and right shift keys
	if input.KeyCode == Enum.KeyCode.LeftShift or input.KeyCode == Enum.KeyCode.RightShift then
		ToggleShiftlock()
	end
end

-- Handle character respawn and cleanup
local function OnCharacterAdded(character)
	Character = character
	
	-- Wait for essential components
	character:WaitForChild("HumanoidRootPart", 10)
	character:WaitForChild("Humanoid", 10)
	
	-- Reset shiftlock state on respawn
	if ShiftlockActive then
		DisableShiftlock()
	end
end

-- Mouse behavior protection
local function ProtectMouseBehavior()
	if ShiftlockActive and UserInputService.MouseBehavior ~= Enum.MouseBehavior.LockCenter then
		SafeSetProperty(UserInputService, "MouseBehavior", Enum.MouseBehavior.LockCenter)
	end
end

-- Initialize system connections
UserInputService.InputBegan:Connect(OnInputBegan)
UserInputService:GetPropertyChangedSignal("MouseBehavior"):Connect(ProtectMouseBehavior)

-- Handle character management
LocalPlayer.CharacterAdded:Connect(OnCharacterAdded)
if LocalPlayer.Character then
	OnCharacterAdded(LocalPlayer.Character)
end

-- API for external control
local ShiftlockAPI = {
	Toggle = function()
		ToggleShiftlock()
		return ShiftlockActive
	end,
	
	Enable = function()
		EnableShiftlock()
		return ShiftlockActive
	end,
	
	Disable = function()
		DisableShiftlock()
		return ShiftlockActive
	end,
	
	IsActive = function()
		return ShiftlockActive
	end,
	
	IsAllowed = function()
		return ShiftlockAllowed
	end,
	
	SetAllowed = function(allowed)
		ShiftlockAllowed = allowed
		if not allowed and ShiftlockActive then
			DisableShiftlock()
		end
		return ShiftlockAllowed
	end,
	
	SetSensitivity = function(sensitivity)
		MouseSensitivity = math.clamp(sensitivity, 0.0001, 0.01)
		return MouseSensitivity
	end,
	
	GetSensitivity = function()
		return MouseSensitivity
	end
}

-- System initialization
print("Shiftlock Camera System Loaded!")
print("Press Shift to toggle Shiftlock mode")

-- Export API
return ShiftlockAPI
