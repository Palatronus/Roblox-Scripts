--[[
	Shiftlock functionality extracted from patchma hub by MyWorld
	Standalone shiftlock implementation for Roblox
]]

-- Optimized function references for better performance
local osclock = os.clock
local tspawn = task.spawn
local twait = task.wait
local sin = math.sin
local cos = math.cos
local abs = math.abs
local min = math.min
local clamp = math.clamp

-- Global variables
local next = next
local pcall = pcall
local type = type
local typeof = typeof
local game = game

-- Instance creation shortcuts
local i = Instance.new 
local v2 = Vector2.new 
local v3 = Vector3.new
local c3 = Color3.new 
local cf = CFrame.new
local cfl = CFrame.lookAt
local angles = CFrame.fromEulerAngles
local u2 = UDim2.new 
local e = Enum 

-- Constants
local sine = osclock()
local deltaTime = 0
local v3_0 = v3()
local v3_101 = v3(1,0,1)
local v3_010 = v3(0,1,0)
local cf_0 = cf()
local v3_0150 = v3_010 * 1.5

-- Metamethod optimization
local getMetamethodFromErrorStack = function(userdata, f, test)
	local ret = nil
	xpcall(f, function()
		ret = debug.info(2, "f")
	end, userdata, nil, 0)
	if (type(ret) ~= "function") or not test(ret) then
		return f
	end
	return ret
end

local insSet = getMetamethodFromErrorStack(game, function(a,b,c) a[b]=c end, function(f) local a=i("Folder") local b="test" f(a,"Name",b) return a.Name==b end)
local insGet = getMetamethodFromErrorStack(game, function(a,b) return a[b] end, function(f) local a=i("Folder") local b="test" a.Name=b return f(a,"Name")==b end)
local cfGet = getMetamethodFromErrorStack(cf_0, function(a,b) return a[b] end, function(f) return f(cf(1,2,3),"Position")==v3(1,2,3) end)
local cfMul = getMetamethodFromErrorStack(cf_0, function(a,b) return a*b end, function(f) return angles(1,2,3)*angles(1,2,3)==f(angles(1,2,3),angles(1,2,3)) end)
local cfAdd = getMetamethodFromErrorStack(cf_0, function(a,b) return a+b end, function(f) return cf(1,2,3)+v3(1,2,3)==f(cf(1,2,3),v3(1,2,3)) end)
local v3Get = getMetamethodFromErrorStack(v3_0, function(a,b) return a[b] end, function(f) return v3(1,2,3).Unit==f(v3(1,2,3),"Unit") end)

-- Service references
local FindFirstChildOfClass = insGet(game, "FindFirstChildOfClass")
local GetPropertyChangedSignal = insGet(game, "GetPropertyChangedSignal")

local plrs = FindFirstChildOfClass(game, "Players")
local rus = FindFirstChildOfClass(game, "RunService")
local ws = FindFirstChildOfClass(game, "Workspace")
local uis = FindFirstChildOfClass(game, "UserInputService")
local lp = insGet(plrs, "LocalPlayer")
local mouse = insGet(lp, "GetMouse")(lp)
local pg = insGet(lp, "PlayerGui")

local heartbeat = insGet(rus, "Heartbeat")
local renderstepped = insGet(rus, "RenderStepped")
local Connect = heartbeat.Connect
local Wait = heartbeat.Wait
local GetMouseDelta = insGet(uis, "GetMouseDelta")
local IsKeyDown = insGet(uis, "IsKeyDown")

-- Shiftlock variables
local allowshiftlock = true -- Enable/disable shiftlock functionality
local shiftlock = false -- Current shiftlock state
local mouseCameraMove = false

-- Cursor management
local defaultCursor = ""
local shiftlockCursor = "rbxasset://SystemCursors/Cross" -- Crosshair cursor matching reference image

-- Custom cursor positioning variables
local cursorLocked = false
local lockedCursorPosition = nil

-- Function to update cursor based on shiftlock state
local function updateCursor()
	if shiftlock then
		insSet(mouse, "Icon", shiftlockCursor)
		
		-- Lock cursor to right-center position
		if not cursorLocked then
			cursorLocked = true
			-- Calculate right-center position (75% from left edge)
			local viewportSize = insGet(cam, "ViewportSize")
			lockedCursorPosition = v2(viewportSize.X * 0.75, viewportSize.Y * 0.5)
			
			-- Set mouse behavior to lock current position
			mouseBehavior = enumMLCP
			insSet(uis, "MouseBehavior", mouseBehavior)
		end
	else
		insSet(mouse, "Icon", defaultCursor)
		
		-- Unlock cursor
		if cursorLocked then
			cursorLocked = false
			lockedCursorPosition = nil
			
			-- Reset mouse behavior to default
			mouseBehavior = enumMD
			insSet(uis, "MouseBehavior", mouseBehavior)
		end
	end
end

-- Enhanced cursor lock management
local function maintainCursorLock()
	if cursorLocked and lockedCursorPosition then
		-- Ensure cursor stays locked in right-center position
		local currentMousePos = v2(insGet(mouse, "X"), insGet(mouse, "Y"))
		local distance = (currentMousePos - lockedCursorPosition).Magnitude
		
		-- If cursor drifted too far, re-center it
		if distance > 5 then
			-- Force cursor back to locked position
			insSet(uis, "MouseBehavior", enumMLCP)
		end
	end
end

-- Mouse behavior enums
local enumMLCP = e.MouseBehavior.LockCurrentPosition
local enumMLC = (insGet(uis, "TouchEnabled") and enumMLCP) or e.MouseBehavior.LockCenter 
local enumMD = e.MouseBehavior.Default
local enumMM = e.UserInputType.MouseMovement
local enumMB2 = e.UserInputType.MouseButton2

-- Mouse behavior management
local mouseBehavior = nil
local lastMouseBehavior = insGet(uis, "MouseBehavior")

-- Add mouse button detection
local IsMouseButtonPressed = insGet(uis, "IsMouseButtonPressed")

-- Ensure mouse behavior stays locked when needed
Connect(GetPropertyChangedSignal(uis, "MouseBehavior"), function()
	if mouseBehavior and (insGet(uis, "MouseBehavior") ~= mouseBehavior) then
		insSet(uis, "MouseBehavior", mouseBehavior)
	end
end)

-- Key definitions
local KeyCode = e.KeyCode
local keyShift = KeyCode.LeftShift

-- Camera variables
local cam = insGet(ws, "CurrentCamera")
local camcf = insGet(cam, "CFrame")
local camcfLV = cfGet(camcf, "LookVector")
local camrot = cfl(v3_0, camcfLV)
local camcfRV = cfGet(camrot, "RightVector")
local mradN05 = -0.008726646259971648 -- Mouse sensitivity multiplier

-- Character and camera management
local c = nil
local rootpart = nil
local humanoid = nil
local cfr = cf_0
local pos = v3_0
local cammag = -25 -- Camera distance

-- Function to get character and root part
local function getCharacterAndRoot()
	c = insGet(lp, "Character")
	if c then
		rootpart = c:FindFirstChild("HumanoidRootPart") or c:FindFirstChild("Torso") or c:FindFirstChild("UpperTorso")
		humanoid = c:FindFirstChildOfClass("Humanoid")
		if rootpart then
			cfr = insGet(rootpart, "CFrame")
			pos = cfGet(cfr, "Position")
			cfr = cfl(pos, pos + cfGet(cfr, "LookVector") * v3_101)
			return true
		end
	end
	return false
end

-- Input handling for shiftlock toggle
Connect(insGet(uis, "InputBegan"), function(input, gameProcessed)
	if gameProcessed then return end
	
	local keyCode = insGet(input, "KeyCode")
	if keyCode == keyShift then
		shiftlock = allowshiftlock and not shiftlock
		updateCursor() -- Update cursor when shiftlock state changes
		
		-- Enable/disable precise rotation based on shiftlock state
		if shiftlock then
			enablePreciseRotation()
		else
			disablePreciseRotation()
		end
	end
end)

-- Mouse movement handling for camera rotation
Connect(insGet(uis, "InputChanged"), function(input, gameProcessed)
	if gameProcessed then return end
	
	local inputType = insGet(input, "UserInputType")
	if mouseCameraMove and inputType == enumMM then
		local rotation = GetMouseDelta(uis) * mradN05
		camcfLV = cfGet(cfMul(camrot, angles(rotation.Y, rotation.X, 0)), "LookVector")
		camrot = cfl(v3_0, camcfLV)
		camcfRV = cfGet(camrot, "RightVector")
	end
end)

-- Main shiftlock update loop
local function updateShiftlock()
	if not getCharacterAndRootFE() then
		return
	end
	
	-- Update shiftlock state for FE compatibility
	updateShiftlockState()
	
	-- Update camera CFrame for current calculations
	camcf = insGet(cam, "CFrame")
	
	-- Maintain cursor lock if active
	maintainCursorLock()
	
	-- Update camera behavior based on shiftlock state and mouse input
	if shiftlock then
		if allowshiftlock then
			-- Shiftlock is active - maintain locked cursor behavior
			if not cursorLocked then
				mouseBehavior = enumMLC
				mouseCameraMove = true
			else
				-- Cursor is locked, maintain current behavior
				mouseCameraMove = true
			end
		else
			shiftlock = false
			updateCursor() -- Update cursor when shiftlock is disabled
		end
	elseif IsMouseButtonPressed(uis, enumMB2) then
		-- Right-click camera panning (only if cursor not locked)
		if not cursorLocked then
			mouseBehavior = enumMLCP
			mouseCameraMove = true
		end
	else
		-- Default behavior (only if cursor not locked)
		if not cursorLocked then
			mouseBehavior = enumMD
			mouseCameraMove = false
		end
	end
	
	-- Apply mouse behavior if it changed and cursor is not locked
	if not cursorLocked and lastMouseBehavior ~= mouseBehavior then
		lastMouseBehavior = mouseBehavior
		safeSetProperty(uis, "MouseBehavior", mouseBehavior)
	end
	
	-- Update camera position when shiftlock is active
	if shiftlock then
		-- Disable auto-rotate for manual control (FE safe)
		if humanoid then
			safeSetProperty(humanoid, "AutoRotate", false)
		end
		
		-- Precise character rotation using current camera look vector (no delay)
		local currentCamCFrame = insGet(cam, "CFrame")
		local camLookVector = cfGet(currentCamCFrame, "LookVector")
		
		-- Direct rotation synchronization with precise positioning
		local targetPosition = v3(
			camLookVector.X * 900000, -- MaxLength equivalent for precise direction
			v3Get(pos, "Y"), -- Maintain current Y position
			camLookVector.Z * 900000
		)
		
		-- Apply immediate rotation synchronization (FE safe)
		cfr = cfl(pos, targetPosition)
		safeSetProperty(rootpart, "CFrame", cfr)
		
		-- Enhanced camera positioning with Roblox-style offset
		local rightVector = cfGet(currentCamCFrame, "RightVector")
		local upVector = cfGet(currentCamCFrame, "UpVector")
		local offsetMultiplier = calculateShiftlockOffset()
		
		-- Position camera with dynamic shiftlock offset
		camcf = cfAdd(camrot, pos + v3_0150 + camcfRV * offsetMultiplier + camcfLV * cammag)
		safeSetProperty(cam, "CFrame", camcf)
		
		-- Set proper camera focus for better control (FE safe)
		local focusPosition = cfGet(camcf, "Position")
		local focusCFrame = cf(focusPosition, focusPosition + rightVector, upVector)
		safeSetProperty(cam, "Focus", focusCFrame)
	else
		-- Re-enable auto-rotate when shiftlock is off (FE safe)
		if humanoid then
			safeSetProperty(humanoid, "AutoRotate", true)
		end
	end
end

-- Connect to both heartbeat and renderstepped for precise updates
Connect(heartbeat, updateShiftlock)

-- Additional RenderStepped connection for immediate character rotation response
local renderSteppedConnection = nil

local function enablePreciseRotation()
	if renderSteppedConnection then
		renderSteppedConnection:Disconnect()
	end
	
	renderSteppedConnection = Connect(renderstepped, function()
		if shiftlock and getCharacterAndRootFE() then
			-- Immediate character rotation update on every frame (FE safe)
			local currentCamCFrame = insGet(cam, "CFrame")
			local camLookVector = cfGet(currentCamCFrame, "LookVector")
			
			local targetPosition = v3(
				camLookVector.X * 900000,
				v3Get(pos, "Y"),
				camLookVector.Z * 900000
			)
			
			cfr = cfl(pos, targetPosition)
			safeSetProperty(rootpart, "CFrame", cfr)
		end
	end)
end

local function disablePreciseRotation()
	if renderSteppedConnection then
		renderSteppedConnection:Disconnect()
		renderSteppedConnection = nil
	end
end

-- API for external control
local ShiftlockAPI = {
	-- Toggle shiftlock on/off
	toggle = function()
		shiftlock = allowshiftlock and not shiftlock
		updateCursor()
		
		-- Enable/disable precise rotation
		if shiftlock then
			enablePreciseRotation()
		else
			disablePreciseRotation()
		end
		
		return shiftlock
	end,
	
	-- Enable shiftlock
	enable = function()
		if allowshiftlock then
			shiftlock = true
			updateCursor()
			enablePreciseRotation()
		end
		return shiftlock
	end,
	
	-- Disable shiftlock
	disable = function()
		shiftlock = false
		updateCursor()
		disablePreciseRotation()
		return shiftlock
	end,
	
	-- Check if shiftlock is enabled
	isEnabled = function()
		return shiftlock
	end,
	
	-- Check if shiftlock is allowed
	isAllowed = function()
		return allowshiftlock
	end,
	
	-- Set shiftlock permission
	setAllowed = function(allowed)
		allowshiftlock = allowed
		if not allowed then
			shiftlock = false
			updateCursor()
			disablePreciseRotation()
		end
		return allowshiftlock
	end
}

-- Initialize
print("Shiftlock system loaded successfully!")
print("Use Left Shift to toggle shiftlock")
print("API available via return value")

-- Export the API
return ShiftlockAPI

-- FE Compatibility and Roblox Shiftlock Replication
local ReplicatedStorage = FindFirstChildOfClass(game, "ReplicatedStorage")
local TweenService = FindFirstChildOfClass(game, "TweenService")

-- State management for FE compatibility
local shiftlockState = {
	enabled = false,
	allowed = true,
	cursorLocked = false,
	lastUpdate = 0
}

-- Network-safe property updates
local function safeSetProperty(instance, property, value)
	local success, error = pcall(function()
		insSet(instance, property, value)
	end)
	if not success then
		warn("Shiftlock: Failed to set " .. property .. " - " .. tostring(error))
	end
	return success
end

-- Enhanced character detection with FE considerations
local function getCharacterAndRootFE()
	local character = insGet(lp, "Character")
	if not character then return false end
	
	local humanoidRootPart = character:FindFirstChild("HumanoidRootPart") or 
	                        character:FindFirstChild("Torso") or 
	                        character:FindFirstChild("UpperTorso")
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	
	if humanoidRootPart and humanoid then
		-- Verify we have network ownership or can modify
		local success = pcall(function()
			local testCFrame = insGet(humanoidRootPart, "CFrame")
			return testCFrame ~= nil
		end)
		
		if success then
			c = character
			rootpart = humanoidRootPart
			humanoid = humanoid
			cfr = insGet(rootpart, "CFrame")
			pos = cfGet(cfr, "Position")
			cfr = cfl(pos, pos + cfGet(cfr, "LookVector") * v3_101)
			return true
		end
	end
	
	return false
end

-- Roblox-style camera offset calculation
local function calculateShiftlockOffset()
	local humanoidDescription = humanoid and humanoid:FindFirstChild("HumanoidDescription")
	local offsetMultiplier = 1.75 -- Default Roblox offset
	
	-- Adjust offset based on character size (FE compatible)
	if humanoidDescription then
		local success, result = pcall(function()
			local widthScale = insGet(humanoidDescription, "WidthScale") or 1
			local depthScale = insGet(humanoidDescription, "DepthScale") or 1
			return (widthScale + depthScale) / 2
		end)
		
		if success and result then
			offsetMultiplier = offsetMultiplier * result
		end
	end
	
	return offsetMultiplier
end

-- Enhanced state synchronization
local function updateShiftlockState()
	local currentTime = osclock()
	
	-- Throttle updates for performance (60 FPS max)
	if currentTime - shiftlockState.lastUpdate < 0.016 then
		return
	end
	
	shiftlockState.lastUpdate = currentTime
	shiftlockState.enabled = shiftlock
	shiftlockState.allowed = allowshiftlock
	shiftlockState.cursorLocked = cursorLocked
end
