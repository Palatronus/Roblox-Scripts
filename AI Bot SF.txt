[file name]: AI Bot Sf Prototypes.txt
[file content begin]
-- Simple Sword AI Combat Script (Working Version)
print("Sword AI: Starting...")

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Get local player
local player = Players.LocalPlayer
if not player then
    print("Error: No player found")
    return
end

print("Sword AI: Player found - " .. player.Name)

-- Wait for character to load
if not player.Character then
    player.CharacterAdded:Wait()
end

local character = player.Character
local humanoid = character:WaitForChild("Humanoid")
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Create simple GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SwordAI_GUI"
screenGui.Parent = game:GetService("CoreGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 80)
frame.Position = UDim2.new(0, 10, 0, 10)
frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
frame.BackgroundTransparency = 0.3
frame.BorderSizePixel = 0
frame.Parent = screenGui

local statusLabel = Instance.new("TextLabel")
statusLabel.Size = UDim2.new(1, -10, 0, 25)
statusLabel.Position = UDim2.new(0, 5, 0, 5)
statusLabel.BackgroundTransparency = 1
statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
statusLabel.Text = "Status: Ready"
statusLabel.Font = Enum.Font.SourceSansBold
statusLabel.TextSize = 14
statusLabel.TextXAlignment = Enum.TextXAlignment.Left
statusLabel.Parent = frame

local targetLabel = Instance.new("TextLabel")
targetLabel.Size = UDim2.new(1, -10, 0, 25)
targetLabel.Position = UDim2.new(0, 5, 0, 30)
targetLabel.BackgroundTransparency = 1
targetLabel.TextColor3 = Color3.fromRGB(255, 150, 150)
targetLabel.Text = "Target: None"
targetLabel.Font = Enum.Font.SourceSans
targetLabel.TextSize = 14
targetLabel.TextXAlignment = Enum.TextXAlignment.Left
targetLabel.Parent = frame

local distanceLabel = Instance.new("TextLabel")
distanceLabel.Size = UDim2.new(1, -10, 0, 25)
distanceLabel.Position = UDim2.new(0, 5, 0, 55)
distanceLabel.BackgroundTransparency = 1
distanceLabel.TextColor3 = Color3.fromRGB(150, 255, 150)
targetLabel.Text = "Distance: --"
distanceLabel.Font = Enum.Font.SourceSans
distanceLabel.TextSize = 14
distanceLabel.TextXAlignment = Enum.TextXAlignment.Left
distanceLabel.Parent = frame

-- Configuration
local ATTACK_RANGE = 15
local DETECTION_RANGE = 50
local ATTACK_COOLDOWN = 2

-- State variables
local currentTarget = nil
local lastAttackTime = 0
local sword = nil

-- Function to find sword
local function findSword()
    -- Check backpack first
    local backpack = player:FindFirstChild("Backpack")
    if backpack then
        for _, tool in ipairs(backpack:GetChildren()) do
            if tool:IsA("Tool") then
                if string.find(tool.Name:lower(), "sword") or string.find(tool.Name:lower(), "blade") then
                    return tool
                end
            end
        end
    end
    
    -- Check character
    for _, tool in ipairs(character:GetChildren()) do
        if tool:IsA("Tool") then
            if string.find(tool.Name:lower(), "sword") or string.find(tool.Name:lower(), "blade") then
                return tool
            end
        end
    end
    
    return nil
end

-- Function to equip sword
local function equipSword()
    sword = findSword()
    if sword then
        sword.Parent = character
        wait(0.5) -- Wait for equip
        statusLabel.Text = "Status: Sword equipped"
        return true
    end
    statusLabel.Text = "Status: No sword found"
    return false
end

-- Function to find nearest enemy
local function findNearestEnemy()
    local nearestPlayer = nil
    local nearestDistance = math.huge
    local myPosition = humanoidRootPart.Position
    
    for _, otherPlayer in ipairs(Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character then
            local enemyHRP = otherPlayer.Character:FindFirstChild("HumanoidRootPart")
            local enemyHumanoid = otherPlayer.Character:FindFirstChild("Humanoid")
            
            if enemyHRP and enemyHumanoid and enemyHumanoid.Health > 0 then
                local distance = (enemyHRP.Position - myPosition).Magnitude
                
                if distance < DETECTION_RANGE and distance < nearestDistance then
                    nearestPlayer = otherPlayer
                    nearestDistance = distance
                end
            end
        end
    end
    
    return nearestPlayer, nearestDistance
end

-- Function to attack
local function attack()
    if not sword or sword.Parent ~= character then
        return
    end
    
    lastAttackTime = tick()
    
    -- Simple attack
    for i = 1, 3 do
        if sword and sword.Parent == character then
            pcall(function()
                sword:Activate()
            end)
        end
        wait(0.2)
    end
end

-- Main AI loop
local function aiLoop()
    -- Equip sword if needed
    if not sword or sword.Parent ~= character then
        equipSword()
    end
    
    -- Find nearest enemy
    local enemy, distance = findNearestEnemy()
    
    if enemy and enemy.Character then
        currentTarget = enemy
        local enemyHRP = enemy.Character:FindFirstChild("HumanoidRootPart")
        
        if enemyHRP then
            targetLabel.Text = "Target: " .. enemy.Name
            distanceLabel.Text = "Distance: " .. math.floor(distance)
            
            -- Face the enemy
            humanoidRootPart.CFrame = CFrame.lookAt(
                humanoidRootPart.Position,
                Vector3.new(enemyHRP.Position.X, humanoidRootPart.Position.Y, enemyHRP.Position.Z)
            )
            
            if distance <= ATTACK_RANGE then
                statusLabel.Text = "Status: Attacking!"
                -- Stop moving to attack
                humanoid:MoveTo(humanoidRootPart.Position)
                
                -- Attack if cooldown is ready
                if tick() - lastAttackTime > ATTACK_COOLDOWN then
                    attack()
                end
            else
                statusLabel.Text = "Status: Chasing"
                -- Move toward enemy
                humanoid:MoveTo(enemyHRP.Position)
            end
        end
    else
        currentTarget = nil
        statusLabel.Text = "Status: Searching..."
        targetLabel.Text = "Target: None"
        distanceLabel.Text = "Distance: --"
        
        -- Stop moving if no target
        humanoid:MoveTo(humanoidRootPart.Position)
    end
end

-- Start the AI
print("Sword AI: Starting main loop...")
statusLabel.Text = "Status: Running"

local heartbeatConnection
heartbeatConnection = RunService.Heartbeat:Connect(function()
    local success, err = pcall(aiLoop)
    if not success then
        statusLabel.Text = "Status: Error"
        warn("AI Error: " .. tostring(err))
    end
end)

-- Handle respawn
player.CharacterAdded:Connect(function(newCharacter)
    print("Sword AI: Character respawned")
    statusLabel.Text = "Status: Respawning..."
    
    wait(3) -- Wait for character to load
    
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    -- Reset state
    sword = nil
    currentTarget = nil
    
    statusLabel.Text = "Status: Ready"
end)

print("Sword AI: Started successfully!")
[file content end]
