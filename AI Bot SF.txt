[file name]: AI Bot Sf Prototypes.txt
[file content begin]
-- Linked Sword AI Combat Script (Working Version)
-- Simplified and tested for basic functionality

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Get local player
local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then
    print("Error: No local player found")
    return
end

print("LinkedSwordAI: Starting script for " .. LocalPlayer.Name)

-- Simple GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SwordAIGUI"
screenGui.Parent = game:GetService("CoreGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 250, 0, 80)
frame.Position = UDim2.new(0, 10, 0, 10)
frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
frame.BackgroundTransparency = 0.3
frame.BorderSizePixel = 0
frame.Parent = screenGui

local statusLabel = Instance.new("TextLabel")
statusLabel.Size = UDim2.new(1, 0, 0.3, 0)
statusLabel.Position = UDim2.new(0, 5, 0, 5)
statusLabel.BackgroundTransparency = 1
statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
statusLabel.Text = "Status: Starting..."
statusLabel.Font = Enum.Font.SourceSansBold
statusLabel.TextSize = 16
statusLabel.TextXAlignment = Enum.TextXAlignment.Left
statusLabel.Parent = frame

local targetLabel = Instance.new("TextLabel")
targetLabel.Size = UDim2.new(1, 0, 0.3, 0)
targetLabel.Position = UDim2.new(0, 5, 0, 30)
targetLabel.BackgroundTransparency = 1
targetLabel.TextColor3 = Color3.fromRGB(255, 200, 200)
targetLabel.Text = "Target: None"
targetLabel.Font = Enum.Font.SourceSans
targetLabel.TextSize = 14
targetLabel.TextXAlignment = Enum.TextXAlignment.Left
targetLabel.Parent = frame

local distanceLabel = Instance.new("TextLabel")
distanceLabel.Size = UDim2.new(1, 0, 0.3, 0)
distanceLabel.Position = UDim2.new(0, 5, 0, 55)
distanceLabel.BackgroundTransparency = 1
distanceLabel.TextColor3 = Color3.fromRGB(200, 255, 200)
distanceLabel.Text = "Distance: --"
distanceLabel.Font = Enum.Font.SourceSans
distanceLabel.TextSize = 14
distanceLabel.TextXAlignment = Enum.TextXAlignment.Left
distanceLabel.Parent = frame

-- Configuration
local CONFIG = {
    DETECTION_RANGE = 50,
    ATTACK_RANGE = 10,
    ATTACK_COOLDOWN = 1.5
}

-- State variables
local currentTarget = nil
local lastAttackTime = 0
local sword = nil
local isAttacking = false

-- Function to find a sword
local function findSword(character)
    -- Check backpack first
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    if backpack then
        for _, item in ipairs(backpack:GetChildren()) do
            if item:IsA("Tool") then
                if string.lower(item.Name):find("sword") or string.lower(item.Name):find("blade") then
                    return item
                end
            end
        end
    end
    
    -- Check character
    for _, item in ipairs(character:GetChildren()) do
        if item:IsA("Tool") then
            if string.lower(item.Name):find("sword") or string.lower(item.Name):find("blade") then
                return item
            end
        end
    end
    
    return nil
end

-- Function to equip sword
local function equipSword(character)
    if sword and sword.Parent == character then
        return true
    end
    
    sword = findSword(character)
    if sword then
        sword.Parent = character
        wait(0.5) -- Wait for equip animation
        return true
    end
    
    return false
end

-- Function to find nearest player
local function findNearestPlayer(character)
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return nil end
    
    local nearestPlayer = nil
    local nearestDistance = math.huge
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local targetHRP = player.Character:FindFirstChild("HumanoidRootPart")
            local targetHumanoid = player.Character:FindFirstChild("Humanoid")
            
            if targetHRP and targetHumanoid and targetHumanoid.Health > 0 then
                local distance = (targetHRP.Position - humanoidRootPart.Position).Magnitude
                
                if distance < CONFIG.DETECTION_RANGE and distance < nearestDistance then
                    nearestPlayer = player
                    nearestDistance = distance
                end
            end
        end
    end
    
    return nearestPlayer, nearestDistance
end

-- Function to attack
local function attackTarget()
    if isAttacking or not sword then return end
    
    isAttacking = true
    lastAttackTime = tick()
    
    -- Simple attack sequence
    for i = 1, 2 do
        if sword and sword.Parent == LocalPlayer.Character then
            pcall(function()
                sword:Activate()
            end)
        end
        wait(0.3)
    end
    
    isAttacking = false
end

-- Main function
local function mainLoop()
    local character = LocalPlayer.Character
    if not character then
        statusLabel.Text = "Status: No character"
        return
    end
    
    local humanoid = character:FindFirstChild("Humanoid")
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    
    if not humanoid or not humanoidRootPart then
        statusLabel.Text = "Status: Missing humanoid/HRP"
        return
    end
    
    -- Try to equip sword if we don't have one
    if not sword or sword.Parent ~= character then
        statusLabel.Text = "Status: Equipping sword..."
        if equipSword(character) then
            statusLabel.Text = "Status: Sword equipped"
        else
            statusLabel.Text = "Status: No sword found"
            targetLabel.Text = "Target: None"
            distanceLabel.Text = "Distance: --"
            return
        end
    end
    
    -- Find nearest player
    local target, distance = findNearestPlayer(character)
    
    if target then
        currentTarget = target
        targetLabel.Text = "Target: " .. target.Name
        distanceLabel.Text = "Distance: " .. math.floor(distance)
        
        local targetHRP = target.Character:FindFirstChild("HumanoidRootPart")
        if not targetHRP then return end
        
        -- Face the target
        humanoidRootPart.CFrame = CFrame.lookAt(
            humanoidRootPart.Position,
            Vector3.new(targetHRP.Position.X, humanoidRootPart.Position.Y, targetHRP.Position.Z)
        )
        
        if distance <= CONFIG.ATTACK_RANGE then
            statusLabel.Text = "Status: Attacking!"
            -- Stop moving when attacking
            humanoid:MoveTo(humanoidRootPart.Position)
            
            -- Attack if cooldown is ready
            if tick() - lastAttackTime > CONFIG.ATTACK_COOLDOWN then
                attackTarget()
            end
        else
            statusLabel.Text = "Status: Moving to target"
            -- Move toward target
            humanoid:MoveTo(targetHRP.Position)
        end
    else
        currentTarget = nil
        statusLabel.Text = "Status: Searching..."
        targetLabel.Text = "Target: None"
        distanceLabel.Text = "Distance: --"
        
        -- Stop moving if no target
        humanoid:MoveTo(humanoidRootPart.Position)
    end
end

-- Start the main loop
local connection
connection = RunService.Heartbeat:Connect(function()
    local success, err = pcall(mainLoop)
    if not success then
        statusLabel.Text = "Status: Error - " .. tostring(err)
        print("LinkedSwordAI Error: " .. tostring(err))
    end
end)

-- Handle character respawn
LocalPlayer.CharacterAdded:Connect(function(character)
    print("LinkedSwordAI: Character respawned")
    statusLabel.Text = "Status: Respawning..."
    
    -- Wait for character to load
    wait(2)
    
    -- Reset state
    sword = nil
    currentTarget = nil
    isAttacking = false
    
    statusLabel.Text = "Status: Ready"
end)

print("LinkedSwordAI: Script started successfully")
statusLabel.Text = "Status: Running"
[file content end]
