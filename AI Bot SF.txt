-- LinkedSwordAI_Stable.lua
-- Stable, working version with proper void avoidance

local function forcePrint(...)
    local args = {...}
    local message = table.concat(args, " ")
    print("LinkedSwordAI: " .. message)
    warn("LinkedSwordAI: " .. message)
end

forcePrint("Starting stable version...")

-- Simple configuration
local CONFIG = {
    ATTACK_RANGE = 15,
    ATTACK_COOLDOWN = 1.0,
    DETECTION_RANGE = 100,
    VOID_Y_LEVEL = -10,
    EQUIP_DELAY = 1.0,
    RETARGET_DELAY = 2.0
}

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

if not LocalPlayer then
    forcePrint("Error: No local player")
    return
end

forcePrint("Services loaded")

-- Main AI function
local function StartAI()
    forcePrint("Initializing AI...")
    
    -- Wait for character
    local character = LocalPlayer.Character
    if not character then
        forcePrint("Waiting for character to spawn...")
        character = LocalPlayer.CharacterAdded:Wait()
        wait(2) -- Wait for character to fully load
    end
    
    -- Wait for humanoid and root part
    local humanoid = character:WaitForChild("Humanoid")
    local rootPart = character:WaitForChild("HumanoidRootPart")
    
    forcePrint("Character loaded: " .. character.Name)
    
    -- Find sword
    local sword = nil
    for _, item in pairs(character:GetChildren()) do
        if item:IsA("Tool") then
            sword = item
            forcePrint("Found sword: " .. sword.Name)
            break
        end
    end
    
    if not sword then
        forcePrint("No sword found in character, checking backpack...")
        local backpack = LocalPlayer:FindFirstChild("Backpack")
        if backpack then
            for _, item in pairs(backpack:GetChildren()) do
                if item:IsA("Tool") then
                    sword = item
                    humanoid:EquipTool(sword)
                    wait(0.5)
                    forcePrint("Equipped sword from backpack: " .. sword.Name)
                    break
                end
            end
        end
    end
    
    if not sword then
        forcePrint("WARNING: No sword found at all!")
    end
    
    -- Simple void check
    local function isPositionSafe(position)
        return position.Y > CONFIG.VOID_Y_LEVEL
    end
    
    -- Main loop
    local lastAttack = 0
    local currentTarget = nil
    
    local heartbeatConnection
    heartbeatConnection = RunService.Heartbeat:Connect(function()
        -- Basic void protection - if we're falling, move to safety
        if not isPositionSafe(rootPart.Position) then
            -- Emergency: move up and away
            local safeSpot = rootPart.Position + Vector3.new(10, 20, 10)
            humanoid:MoveTo(safeSpot)
            forcePrint("VOID DETECTED! Moving to safety")
            return
        end
        
        -- Find closest player
        local closestPlayer = nil
        local closestDistance = CONFIG.DETECTION_RANGE
        
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local targetRoot = player.Character:FindFirstChild("HumanoidRootPart")
                local targetHumanoid = player.Character:FindFirstChild("Humanoid")
                
                if targetRoot and targetHumanoid and targetHumanoid.Health > 0 then
                    local distance = (targetRoot.Position - rootPart.Position).Magnitude
                    
                    if distance < closestDistance then
                        closestDistance = distance
                        closestPlayer = player
                    end
                end
            end
        end
        
        -- Update target
        if closestPlayer then
            currentTarget = closestPlayer
            forcePrint("Targeting: " .. closestPlayer.Name .. " (" .. math.floor(closestDistance) .. " studs)")
        else
            currentTarget = nil
        end
        
        -- If we have a target, engage
        if currentTarget and currentTarget.Character then
            local targetRoot = currentTarget.Character:FindFirstChild("HumanoidRootPart")
            local targetHumanoid = currentTarget.Character:FindFirstChild("Humanoid")
            
            if targetRoot and targetHumanoid and targetHumanoid.Health > 0 then
                local distance = (targetRoot.Position - rootPart.Position).Magnitude
                
                -- Check if path to target is safe before moving
                local direction = (targetRoot.Position - rootPart.Position).Unit
                local checkDistance = math.min(distance, 20) -- Check up to 20 studs ahead
                
                local pathSafe = true
                for i = 5, checkDistance, 5 do
                    local checkPoint = rootPart.Position + (direction * i)
                    if not isPositionSafe(checkPoint) then
                        pathSafe = false
                        forcePrint("Unsafe path detected at " .. i .. " studs")
                        break
                    end
                end
                
                if pathSafe then
                    -- Safe to approach target
                    humanoid:MoveTo(targetRoot.Position)
                    
                    -- Face the target
                    local lookDirection = (targetRoot.Position - rootPart.Position).Unit
                    humanoid:MoveTo(rootPart.Position + (lookDirection * 2))
                    
                    -- Attack if in range
                    if distance <= CONFIG.ATTACK_RANGE and sword then
                        if tick() - lastAttack > CONFIG.ATTACK_COOLDOWN then
                            lastAttack = tick()
                            -- Simple attack
                            if sword and sword.Parent then
                                sword:Activate()
                                forcePrint("Attacking " .. currentTarget.Name)
                            end
                        end
                    end
                else
                    -- Path is unsafe, don't move toward void
                    forcePrint("Avoiding unsafe path to target")
                    -- Move sideways or stay put
                    local sideStep = rootPart.Position + Vector3.new(math.random(-5, 5), 0, math.random(-5, 5))
                    if isPositionSafe(sideStep) then
                        humanoid:MoveTo(sideStep)
                    end
                end
            else
                currentTarget = nil
            end
        else
            -- No target, wander slightly
            if math.random(1, 100) < 10 then -- 10% chance to move
                local wanderPos = rootPart.Position + Vector3.new(math.random(-10, 10), 0, math.random(-10, 10))
                if isPositionSafe(wanderPos) then
                    humanoid:MoveTo(wanderPos)
                end
            end
        end
    end)
    
    -- Handle character death
    humanoid.Died:Connect(function()
        forcePrint("Character died - stopping AI")
        if heartbeatConnection then
            heartbeatConnection:Disconnect()
        end
    end)
    
    forcePrint("AI started successfully")
    return heartbeatConnection
end

-- Handle respawns
LocalPlayer.CharacterAdded:Connect(function(character)
    forcePrint("Character respawned - restarting AI in 3 seconds...")
    wait(3)
    
    -- Disconnect any old connection
    if _G.AIConnection then
        _G.AIConnection:Disconnect()
    end
    
    -- Start new AI
    _G.AIConnection = StartAI()
end)

-- Start the AI initially
forcePrint("Starting AI in 5 seconds...")
wait(5)
_G.AIConnection = StartAI()

forcePrint("LinkedSwordAI fully loaded and running")
