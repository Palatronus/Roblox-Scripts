--[[
    Linked Sword AI Combat Script (Revised for External Executors)
    
    This script implements autonomous sword fighting AI for the Linked Sword tool in Roblox.
    Optimized specifically for external executor usage.
]]

-- Force print to output console immediately
local oldprint = print
print = function(...)
    oldprint(...)
    oldprint("") -- Force flush
end

-- Immediate console output
print("LinkedSwordAI: Script starting...")

-- Configuration
local CONFIG = {
    DETECTION_RADIUS = 15,
    ATTACK_COOLDOWN = 1.2,
    FEINT_CHANCE = 0.3,
    CHARGE_ATTACK_CHANCE = 0.25,
    DEFENSIVE_CHANCE = 0.2,
    JUMP_CHANCE = 0.15,
    MAX_TARGET_DISTANCE = 20,
    MIN_HEALTH_CHECK = 0
}

-- Create status indicator GUI
local function CreateStatusGUI()
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "LinkedSwordAI_Status"
    
    -- Try different parent options that work with various executors
    local success = pcall(function()
        ScreenGui.Parent = game:GetService("CoreGui")
    end)
    
    if not success then
        success = pcall(function()
            ScreenGui.Parent = game:GetService("Players").LocalPlayer.PlayerGui
        end)
    end
    
    if not success then
        print("LinkedSwordAI: Failed to create status GUI")
        return nil
    end
    
    local Frame = Instance.new("Frame")
    Frame.Size = UDim2.new(0, 200, 0, 100)
    Frame.Position = UDim2.new(1, -220, 0, 20)
    Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Frame.BackgroundTransparency = 0.5
    Frame.BorderSizePixel = 2
    Frame.Parent = ScreenGui
    
    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, 0, 0, 20)
    Title.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.Text = "Linked Sword AI"
    Title.Font = Enum.Font.SourceSansBold
    Title.TextSize = 14
    Title.Parent = Frame
    
    local Status = Instance.new("TextLabel")
    Status.Size = UDim2.new(1, 0, 1, -20)
    Status.Position = UDim2.new(0, 0, 0, 20)
    Status.BackgroundTransparency = 1
    Status.TextColor3 = Color3.fromRGB(255, 255, 255)
    Status.Text = "Initializing..."
    Status.Font = Enum.Font.SourceSans
    Status.TextSize = 14
    Status.TextXAlignment = Enum.TextXAlignment.Left
    Status.TextYAlignment = Enum.TextYAlignment.Top
    Status.Parent = Frame
    
    return {
        ScreenGui = ScreenGui,
        Frame = Frame,
        Status = Status,
        UpdateStatus = function(text)
            Status.Text = text
        end
    }
end

-- Main execution in protected call
local success, errorMsg = pcall(function()
    -- Services
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    
    -- Get player and character
    local LocalPlayer = Players.LocalPlayer
    if not LocalPlayer then
        print("LinkedSwordAI: LocalPlayer not found")
        return
    end
    
    print("LinkedSwordAI: LocalPlayer found - " .. LocalPlayer.Name)
    
    local Character = LocalPlayer.Character
    if not Character then
        print("LinkedSwordAI: Character not found")
        return
    end
    
    local Humanoid = Character:FindFirstChild("Humanoid")
    local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
    
    if not Humanoid or not HumanoidRootPart then
        print("LinkedSwordAI: Humanoid or HumanoidRootPart not found")
        return
    end
    
    print("LinkedSwordAI: Character components found")
    
    -- Create status GUI
    local StatusGUI = CreateStatusGUI()
    if not StatusGUI then
        print("LinkedSwordAI: Failed to create status GUI")
    else
        print("LinkedSwordAI: Status GUI created")
    end
    
    -- Variables
    local LinkedSword = nil
    local CurrentTarget = nil
    local LastAttackTime = 0
    
    -- Find the Linked Sword tool
    local function FindLinkedSword()
        for _, tool in pairs(Character:GetChildren()) do
            if tool:IsA("Tool") and tool.Name:find("Sword") then
                if StatusGUI then StatusGUI.UpdateStatus("Found sword: " .. tool.Name) end
                print("LinkedSwordAI: Found sword - " .. tool.Name)
                return tool
            end
        end
        
        for _, tool in pairs(LocalPlayer.Backpack:GetChildren()) do
            if tool:IsA("Tool") and tool.Name:find("Sword") then
                if StatusGUI then StatusGUI.UpdateStatus("Found sword in backpack: " .. tool.Name) end
                print("LinkedSwordAI: Found sword in backpack - " .. tool.Name)
                return tool
            end
        end
        
        if StatusGUI then StatusGUI.UpdateStatus("No sword found") end
        print("LinkedSwordAI: No sword found")
        return nil
    end
    
    -- Find the nearest valid player
    local function FindNearestPlayer()
        local nearestPlayer = nil
        local shortestDistance = CONFIG.DETECTION_RADIUS
        
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local distance = (player.Character.HumanoidRootPart.Position - HumanoidRootPart.Position).Magnitude
                    
                    if distance <= shortestDistance then
                        -- Check for god mode
                        local playerHumanoid = player.Character:FindFirstChild("Humanoid")
                        if playerHumanoid and playerHumanoid.Health > CONFIG.MIN_HEALTH_CHECK then
                            shortestDistance = distance
                            nearestPlayer = player
                        end
                    end
                end
            end
        end
        
        return nearestPlayer
    end
    
    -- Execute attack with the Linked Sword
    local function ExecuteAttack()
        if not LinkedSword then
            LinkedSword = FindLinkedSword()
            if not LinkedSword then return end
        end
        
        -- Equip the sword if it's not already equipped
        if LinkedSword.Parent ~= Character then
            LinkedSword.Parent = Character
        end
        
        -- Simple attack
        LinkedSword:Activate()
        LastAttackTime = tick()
        
        if StatusGUI then StatusGUI.UpdateStatus("Attacking!") end
    end
    
    -- Main update function
    local function Update()
        -- Find or validate current target
        if not CurrentTarget or not CurrentTarget.Character or 
           not CurrentTarget.Character:FindFirstChild("HumanoidRootPart") then
            CurrentTarget = FindNearestPlayer()
            
            if CurrentTarget then
                if StatusGUI then 
                    StatusGUI.UpdateStatus("Target: " .. CurrentTarget.Name)
                end
                print("LinkedSwordAI: New target - " .. CurrentTarget.Name)
            else
                if StatusGUI then 
                    StatusGUI.UpdateStatus("No target found")
                end
                return
            end
        end
        
        -- If we have a target, execute AI behavior
        if CurrentTarget and CurrentTarget.Character and 
           CurrentTarget.Character:FindFirstChild("HumanoidRootPart") then
            
            local targetHRP = CurrentTarget.Character.HumanoidRootPart
            local distance = (targetHRP.Position - HumanoidRootPart.Position).Magnitude
            
            -- Move toward target
            Humanoid:MoveTo(targetHRP.Position)
            
            -- Face the target
            HumanoidRootPart.CFrame = CFrame.lookAt(
                HumanoidRootPart.Position, 
                Vector3.new(targetHRP.Position.X, HumanoidRootPart.Position.Y, targetHRP.Position.Z)
            )
            
            -- Attack if close enough and cooldown expired
            if distance < 8 and tick() - LastAttackTime > CONFIG.ATTACK_COOLDOWN then
                ExecuteAttack()
            end
        end
    end
    
    -- Initialize
    LinkedSword = FindLinkedSword()
    
    -- Connect update function
    local updateConnection
    updateConnection = RunService.Heartbeat:Connect(function()
        local success, error = pcall(Update)
        if not success then
            print("LinkedSwordAI: Error in update - " .. tostring(error))
            if StatusGUI then StatusGUI.UpdateStatus("Error: " .. tostring(error)) end
            updateConnection:Disconnect()
        end
    end)
    
    if StatusGUI then StatusGUI.UpdateStatus("AI Running") end
    print("LinkedSwordAI: Script initialized successfully")
end)

if not success then
    print("LinkedSwordAI: Critical error - " .. tostring(errorMsg))
end
