[file name]: AI Bot Sf Prototypes.txt
[file content begin]
--[[
    Linked Sword AI Combat Script (Fixed & Optimized)
    
    Fixed version with proper error handling and reduced lag.
]]--

-- Force print to output console immediately
local function forcePrint(...)
    local message = table.concat({...}, " ")
    print(message)
end

-- Debug function with timestamps
local function debugPrint(category, ...)
    local args = {...}
    local message = "[" .. category .. "] " .. table.concat(args, " ")
    local timestamp = os.date("%H:%M:%S")
    forcePrint(timestamp .. " - " .. message)
end

forcePrint("LinkedSwordAI: Script starting...")

-- Global persistent data
if not _G.LinkedSwordAIPersistentData then
    _G.LinkedSwordAIPersistentData = {
        LinkedSword = nil,
        CurrentTarget = nil,
        LastAttackTime = 0,
        LastSwordCheckTime = 0,
        LastRetargetTime = 0,
        IsStuck = false,
        AttackSequenceActive = false,
        StatusGUI = nil,
        SwordToolName = nil,
        EquipmentReady = false,
        UpdateFrameCounter = 0
    }
end

local persistentData = _G.LinkedSwordAIPersistentData

-- Simplified Configuration
local CONFIG = {
    DETECTION_RADIUS = 100,
    ATTACK_RANGE = 12,
    ATTACK_COOLDOWN = 1.0,
    SWORD_CHECK_INTERVAL = 5,
    RETARGET_CHECK_TIME = 2.0,
    STUCK_CHECK_TIME = 2.0,
    STUCK_CHECK_DISTANCE = 2.0,
    UPDATE_THROTTLING = 2
}

-- Create status GUI
local function CreateStatusGUI()
    local gui = {}
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "LinkedSwordAI_Status"
    screenGui.Parent = game:GetService("CoreGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 200, 0, 100)
    frame.Position = UDim2.new(0.8, 0, 0.1, 0)
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    frame.BackgroundTransparency = 0.5
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(255, 255, 255)
    frame.Parent = screenGui
    
    local status = Instance.new("TextLabel")
    status.Size = UDim2.new(1, -10, 0, 20)
    status.Position = UDim2.new(0, 5, 0, 5)
    status.BackgroundTransparency = 1
    status.TextColor3 = Color3.fromRGB(255, 255, 255)
    status.Text = "Status: Initializing..."
    status.Font = Enum.Font.SourceSans
    status.TextSize = 14
    status.TextXAlignment = Enum.TextXAlignment.Left
    status.Parent = frame
    
    local target = Instance.new("TextLabel")
    target.Size = UDim2.new(1, -10, 0, 20)
    target.Position = UDim2.new(0, 5, 0, 30)
    target.BackgroundTransparency = 1
    target.TextColor3 = Color3.fromRGB(255, 150, 150)
    target.Text = "Target: None"
    target.Font = Enum.Font.SourceSans
    target.TextSize = 14
    target.TextXAlignment = Enum.TextXAlignment.Left
    target.Parent = frame
    
    local distance = Instance.new("TextLabel")
    distance.Size = UDim2.new(1, -10, 0, 20)
    distance.Position = UDim2.new(0, 5, 0, 55)
    distance.BackgroundTransparency = 1
    distance.TextColor3 = Color3.fromRGB(150, 255, 150)
    distance.Text = "Distance: N/A"
    distance.Font = Enum.Font.SourceSans
    distance.TextSize = 14
    distance.TextXAlignment = Enum.TextXAlignment.Left
    distance.Parent = frame
    
    function gui.UpdateStatus(text)
        if status then status.Text = "Status: " .. text end
    end
    
    function gui.UpdateTarget(text)
        if target then target.Text = "Target: " .. text end
    end
    
    function gui.UpdateDistance(dist)
        if distance then distance.Text = "Distance: " .. (dist and string.format("%.1f", dist) or "N/A") end
    end
    
    return gui
end

-- Main AI function
local function InitializeAI()
    -- Services
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    
    -- Get local player
    local LocalPlayer = Players.LocalPlayer
    if not LocalPlayer then
        forcePrint("LinkedSwordAI: LocalPlayer not found")
        return false
    end
    
    forcePrint("LinkedSwordAI: LocalPlayer found - " .. LocalPlayer.Name)
    
    -- Wait for character
    local Character = LocalPlayer.Character
    if not Character then
        forcePrint("LinkedSwordAI: Character not found, waiting...")
        wait(3)
        Character = LocalPlayer.Character
        if not Character then
            forcePrint("LinkedSwordAI: Character still not found after waiting")
            return false
        end
    end
    
    -- Get humanoid and root part
    local Humanoid = Character:WaitForChild("Humanoid", 5)
    local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart", 5)
    
    if not Humanoid or not HumanoidRootPart then
        forcePrint("LinkedSwordAI: Humanoid or HumanoidRootPart not found")
        return false
    end
    
    forcePrint("LinkedSwordAI: Character components found")
    
    -- Create GUI
    if not persistentData.StatusGUI then
        persistentData.StatusGUI = CreateStatusGUI()
        forcePrint("LinkedSwordAI: Status GUI created")
    end
    
    -- Find sword function
    local function FindLinkedSword()
        -- Check backpack first
        local backpack = LocalPlayer:FindFirstChild("Backpack")
        if backpack then
            for _, tool in pairs(backpack:GetChildren()) do
                if tool:IsA("Tool") and (tool.Name:lower():find("sword") or tool.Name:lower():find("blade")) then
                    persistentData.SwordToolName = tool.Name
                    forcePrint("LinkedSwordAI: Found sword in backpack - " .. tool.Name)
                    return tool
                end
            end
        end
        
        -- Check character
        for _, tool in pairs(Character:GetChildren()) do
            if tool:IsA("Tool") and (tool.Name:lower():find("sword") or tool.Name:lower():find("blade")) then
                persistentData.SwordToolName = tool.Name
                forcePrint("LinkedSwordAI: Found sword on character - " .. tool.Name)
                return tool
            end
        end
        
        forcePrint("LinkedSwordAI: No sword found")
        return nil
    end
    
    -- Equip sword function
    local function EquipSword()
        if not persistentData.LinkedSword then
            persistentData.LinkedSword = FindLinkedSword()
        end
        
        if persistentData.LinkedSword then
            -- Ensure sword is in character
            if persistentData.LinkedSword.Parent ~= Character then
                persistentData.LinkedSword.Parent = Character
                wait(0.5)
            end
            
            -- Check if equipped
            if persistentData.LinkedSword.Parent == Character then
                persistentData.EquipmentReady = true
                if persistentData.StatusGUI then
                    persistentData.StatusGUI.UpdateStatus("Sword equipped")
                end
                forcePrint("LinkedSwordAI: Sword equipped successfully")
                return true
            end
        end
        
        if persistentData.StatusGUI then
            persistentData.StatusGUI.UpdateStatus("No sword available")
        end
        return false
    end
    
    -- Find players in range
    local function FindPlayersInRange()
        local playersInRange = {}
        local myPosition = HumanoidRootPart.Position
        
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local targetHRP = player.Character:FindFirstChild("HumanoidRootPart")
                local targetHumanoid = player.Character:FindFirstChild("Humanoid")
                
                if targetHRP and targetHumanoid and targetHumanoid.Health > 0 then
                    local distance = (targetHRP.Position - myPosition).Magnitude
                    
                    if distance <= CONFIG.DETECTION_RADIUS then
                        table.insert(playersInRange, {
                            player = player,
                            distance = distance,
                            humanoidRootPart = targetHRP
                        })
                    end
                end
            end
        end
        
        -- Sort by distance
        table.sort(playersInRange, function(a, b)
            return a.distance < b.distance
        end)
        
        return playersInRange
    end
    
    -- Check if stuck
    local function CheckIfStuck()
        if not persistentData.LastStuckPosition then
            persistentData.LastStuckPosition = HumanoidRootPart.Position
            persistentData.LastStuckTime = tick()
            return false
        end
        
        local currentTime = tick()
        if currentTime - persistentData.LastStuckTime > CONFIG.STUCK_CHECK_TIME then
            local distanceMoved = (HumanoidRootPart.Position - persistentData.LastStuckPosition).Magnitude
            
            if distanceMoved < CONFIG.STUCK_CHECK_DISTANCE then
                persistentData.IsStuck = true
                return true
            end
            
            persistentData.LastStuckPosition = HumanoidRootPart.Position
            persistentData.LastStuckTime = currentTime
            persistentData.IsStuck = false
        end
        
        return false
    end
    
    -- Handle being stuck
    local function HandleStuck()
        if persistentData.StatusGUI then
            persistentData.StatusGUI.UpdateStatus("Stuck, trying to move")
        end
        
        -- Try moving in different directions
        local directions = {
            Vector3.new(5, 0, 0),
            Vector3.new(-5, 0, 0),
            Vector3.new(0, 0, 5),
            Vector3.new(0, 0, -5),
            Vector3.new(3, 0, 3),
            Vector3.new(-3, 0, 3),
            Vector3.new(3, 0, -3),
            Vector3.new(-3, 0, -3)
        }
        
        for _, direction in ipairs(directions) do
            local targetPos = HumanoidRootPart.Position + direction
            Humanoid:MoveTo(targetPos)
            wait(0.1)
            
            -- Check if we started moving
            if not CheckIfStuck() then
                break
            end
        end
    end
    
    -- Simple attack function
    local function ExecuteAttack()
        if not persistentData.LinkedSword or persistentData.AttackSequenceActive then
            return
        end
        
        persistentData.AttackSequenceActive = true
        persistentData.LastAttackTime = tick()
        
        spawn(function()
            -- Face the target
            if persistentData.CurrentTarget and persistentData.CurrentTarget.Character then
                local targetHRP = persistentData.CurrentTarget.Character:FindFirstChild("HumanoidRootPart")
                if targetHRP then
                    HumanoidRootPart.CFrame = CFrame.lookAt(
                        HumanoidRootPart.Position,
                        Vector3.new(targetHRP.Position.X, HumanoidRootPart.Position.Y, targetHRP.Position.Z)
                    )
                end
            end
            
            -- Execute attack sequence
            for i = 1, 3 do
                if persistentData.LinkedSword and persistentData.LinkedSword.Parent == Character then
                    pcall(function()
                        persistentData.LinkedSword:Activate()
                    end)
                end
                wait(0.2)
            end
            
            persistentData.AttackSequenceActive = false
        end)
    end
    
    -- Main update function
    local function Update()
        persistentData.UpdateFrameCounter = persistentData.UpdateFrameCounter + 1
        
        -- Throttle updates to reduce lag
        if persistentData.UpdateFrameCounter % CONFIG.UPDATE_THROTTLING ~= 0 then
            return
        end
        
        -- Check for sword periodically
        local currentTime = tick()
        if currentTime - persistentData.LastSwordCheckTime > CONFIG.SWORD_CHECK_INTERVAL then
            if not persistentData.LinkedSword or persistentData.LinkedSword.Parent ~= Character then
                EquipSword()
            end
            persistentData.LastSwordCheckTime = currentTime
        end
        
        -- Find targets if needed
        if not persistentData.CurrentTarget or currentTime - persistentData.LastRetargetTime > CONFIG.RETARGET_CHECK_TIME then
            local playersInRange = FindPlayersInRange()
            
            if #playersInRange > 0 then
                local newTarget = playersInRange[1].player
                
                if newTarget ~= persistentData.CurrentTarget then
                    persistentData.CurrentTarget = newTarget
                    if persistentData.StatusGUI then
                        persistentData.StatusGUI.UpdateTarget(newTarget.Name)
                        persistentData.StatusGUI.UpdateStatus("Targeting " .. newTarget.Name)
                    end
                    forcePrint("LinkedSwordAI: New target - " .. newTarget.Name)
                end
            else
                persistentData.CurrentTarget = nil
                if persistentData.StatusGUI then
                    persistentData.StatusGUI.UpdateTarget("None")
                    persistentData.StatusGUI.UpdateStatus("No targets")
                end
            end
            
            persistentData.LastRetargetTime = currentTime
        end
        
        -- If we have a target, handle combat
        if persistentData.CurrentTarget and persistentData.CurrentTarget.Character then
            local targetHRP = persistentData.CurrentTarget.Character:FindFirstChild("HumanoidRootPart")
            local targetHumanoid = persistentData.CurrentTarget.Character:FindFirstChild("Humanoid")
            
            if targetHRP and targetHumanoid and targetHumanoid.Health > 0 then
                local distance = (targetHRP.Position - HumanoidRootPart.Position).Magnitude
                
                if persistentData.StatusGUI then
                    persistentData.StatusGUI.UpdateDistance(distance)
                end
                
                -- Check if stuck
                if CheckIfStuck() then
                    HandleStuck()
                    return
                end
                
                -- Move to target if too far
                if distance > CONFIG.ATTACK_RANGE then
                    if persistentData.StatusGUI then
                        persistentData.StatusGUI.UpdateStatus("Moving to target")
                    end
                    Humanoid:MoveTo(targetHRP.Position)
                else
                    -- In attack range
                    if persistentData.StatusGUI then
                        persistentData.StatusGUI.UpdateStatus("In attack range")
                    end
                    
                    -- Stop moving
                    Humanoid:MoveTo(HumanoidRootPart.Position)
                    
                    -- Attack if cooldown is ready and sword is equipped
                    if persistentData.LinkedSword and persistentData.LinkedSword.Parent == Character then
                        if currentTime - persistentData.LastAttackTime > CONFIG.ATTACK_COOLDOWN then
                            ExecuteAttack()
                        end
                    else
                        -- Try to equip sword
                        EquipSword()
                    end
                end
            else
                -- Target is invalid
                persistentData.CurrentTarget = nil
            end
        else
            -- No target, idle
            if persistentData.StatusGUI then
                persistentData.StatusGUI.UpdateStatus("Idle")
            end
        end
    end
    
    -- Initial equipment
    spawn(function()
        wait(2) -- Wait for character to fully load
        EquipSword()
    end)
    
    -- Start the main loop
    local heartbeatConnection
    heartbeatConnection = RunService.Heartbeat:Connect(function()
        local success, err = pcall(Update)
        if not success then
            forcePrint("LinkedSwordAI: Update error - " .. tostring(err))
        end
    end)
    
    -- Handle respawn
    LocalPlayer.CharacterAdded:Connect(function(newCharacter)
        forcePrint("LinkedSwordAI: Character respawned, reinitializing...")
        
        -- Disconnect old heartbeat
        if heartbeatConnection then
            heartbeatConnection:Disconnect()
        end
        
        wait(3) -- Wait for character to load
        InitializeAI()
    end)
    
    if persistentData.StatusGUI then
        persistentData.StatusGUI.UpdateStatus("AI Running")
    end
    forcePrint("LinkedSwordAI: Initialized successfully")
    
    return true
end

-- Start the AI
wait(2) -- Initial wait for game to load

local success, err = pcall(function()
    InitializeAI()
end)

if not success then
    forcePrint("LinkedSwordAI: Critical error - " .. tostring(err))
else
    forcePrint("LinkedSwordAI: Started successfully")
end
[file content end]
