local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LP = Players.LocalPlayer

-- System state control
local SystemsActive = true
local HeartbeatConnection
local CharacterConnection
local HealthConnection

-- Configuration
local ACTIVE_COLOR = Color3.new(75/255, 151/255, 75/255)
local ARMOR_NAME = "BattleArmor"
local HEALPAD_NAME = "HealPad"

-- Debug logging
local function Log(message)
    print("[SFOTH System]", message)
end

-- System resurrection
local function RestartSystems()
    Log("Restarting all systems...")
    
    -- Cleanup previous connections
    if HeartbeatConnection then
        HeartbeatConnection:Disconnect()
        HeartbeatConnection = nil
    end
    if HealthConnection then
        HealthConnection:Disconnect()
        HealthConnection = nil
    end
    
    -- Force garbage collection
    task.defer(function()
        wait(1)
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "SYSTEM RESURRECTION",
            Text = "Full system reboot completed",
            Duration = 2
        })
    end)
end

-- Error-protected core functions
local function SafeForceHeal()
    pcall(function()
        if not LP.Character then return end
        local humanoid = LP.Character:FindFirstChild("Humanoid")
        if not humanoid or humanoid.Health >= humanoid.MaxHealth then return end

        local closestPad
        local closestDistance = math.huge
        local root = LP.Character:FindFirstChild("HumanoidRootPart")
        if not root then return end

        -- Active pad detection
        for _, pad in ipairs(workspace:GetDescendants()) do
            if pad.Name == HEALPAD_NAME and pad:IsA("Model") then
                local padPart = pad:FindFirstChildWhichIsA("BasePart")
                if padPart and math.abs(padPart.Color.R - ACTIVE_COLOR.R) < 0.05 then
                    local distance = (root.Position - padPart.Position).Magnitude
                    if distance < closestDistance then
                        closestPad = padPart
                        closestDistance = distance
                    end
                end
            end
        end

        if closestPad then
            Log("Activating heal pad: "..closestPad:GetFullName())
            for _ = 1, 3 do
                firetouchinterest(root, closestPad, 0)
                RunService.Heartbeat:Wait()
                firetouchinterest(root, closestPad, 1)
                RunService.Heartbeat:Wait()
            end
        end
    end)
end

local function SafeMaintainArmor()
    pcall(function()
        if not LP.Character then return end
        if LP.Character:FindFirstChild(ARMOR_NAME) then return end

        local armors = {}
        local root = LP.Character:FindFirstChild("HumanoidRootPart")
        if not root then return end

        -- Armor collection
        for _, obj in ipairs(workspace:GetDescendants()) do
            if obj.Name == "BattleArmorStand" and obj:IsA("Model") then
                local part = obj:FindFirstChildWhichIsA("BasePart")
                if part then
                    table.insert(armors, {
                        part = part,
                        distance = (root.Position - part.Position).Magnitude
                    })
                end
            end
        end

        table.sort(armors, function(a,b) return a.distance < b.distance end)

        for _, armor in ipairs(armors) do
            Log("Attempting armor pickup: "..armor.part:GetFullName())
            for _ = 1, 2 do
                firetouchinterest(root, armor.part, 0)
                RunService.Heartbeat:Wait()
                firetouchinterest(root, armor.part, 1)
                RunService.Heartbeat:Wait()
            end
            if LP.Character:FindFirstChild(ARMOR_NAME) then break end
        end
    end)
end

-- Core heartbeat system
local function StartHeartbeat()
    HeartbeatConnection = RunService.Heartbeat:Connect(function()
        if not SystemsActive then return end
        
        -- System 1: Armor maintenance
        coroutine.wrap(function()
            SafeMaintainArmor()
        end)()
        
        -- System 2: Health maintenance
        coroutine.wrap(function()
            SafeForceHeal()
        end)()
    end)
end

-- Character lifecycle manager
local function ManageCharacter()
    Log("Initializing character systems...")
    
    -- Cleanup existing connections
    if HealthConnection then
        HealthConnection:Disconnect()
    end
    
    -- Health monitoring
    local character = LP.Character or LP.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    
    HealthConnection = humanoid.HealthChanged:Connect(function()
        if humanoid.Health < humanoid.MaxHealth then
            SafeForceHeal()
        end
    end)
    
    -- Death/respawn handler
    humanoid.Died:Connect(function()
        Log("Character died - restarting systems...")
        RestartSystems()
        ManageCharacter()
    end)
end

-- Toggle system
UIS.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.H then
        SystemsActive = not SystemsActive
        Log("Main systems "..(SystemsActive and "activated" or "deactivated"))
        if SystemsActive then
            ManageCharacter()
            StartHeartbeat()
        end
    end
end)

-- Initial startup
task.spawn(function()
    ManageCharacter()
    StartHeartbeat()
    
    -- Eternal watchdog
    while true do
        task.wait(30)
        if SystemsActive and not HeartbeatConnection.Connected then
            Log("Watchdog detected system failure - restarting...")
            RestartSystems()
            ManageCharacter()
            StartHeartbeat()
        end
    end
end)

Log("System initialized - Press H to toggle")
