local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LP = Players.LocalPlayer
local Toggle = false
local Debounce = false
local CollectedArmors = {}

-- Toggle with H key
UIS.InputBegan:Connect(function(Input)
    if Input.KeyCode == Enum.KeyCode.H then
        Toggle = not Toggle
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Auto Armor/Heal",
            Text = Toggle and "ACTIVATED" or "DEACTIVATED",
            Duration = 1
        })
    end
end)

local function FindValidItem(modelName, isArmor)
    -- Check if armor was already collected
    if isArmor and CollectedArmors[modelName] then
        return nil
    end
    
    local items = workspace:FindPartsInRegion3WithIgnoreList(
        Region3.new(LP.Character.HumanoidRootPart.Position - Vector3.new(500,500,500), 
                    LP.Character.HumanoidRootPart.Position + Vector3.new(500,500,500)),
        {LP.Character},
        500
    )
    
    for _, item in pairs(items) do
        if item:IsDescendantOf(workspace) and item.Name == modelName then
            local model = item.Parent
            if model:IsA("Model") then
                -- Additional validation for armor
                if isArmor then
                    if not CollectedArmors[model] and model:FindFirstChild("Humanoid") then
                        return model
                    end
                else
                    return model
                end
            end
        end
    end
    return nil
end

local function CollectItem(itemType)
    if Debounce or not Toggle then return end
    Debounce = true
    
    local modelName = itemType == "armor" and "BattleArmorStand" or "HealPad"
    local isArmor = itemType == "armor"
    
    local Model = FindValidItem(modelName, isArmor)
    
    if Model and LP.Character and LP.Character:FindFirstChild("HumanoidRootPart") then
        local interactPart = Model:FindFirstChild("TouchInterest") and Model:FindFirstChild("TouchInterest").Parent
                        or Model:FindFirstChildOfClass("Part")
        
        if interactPart then
            local originalCF = LP.Character.HumanoidRootPart.CFrame
            local originalPos = originalCF.Position
            
            -- Phase through walls during teleport
            local oldCollision = LP.Character.HumanoidRootPart.CanCollide
            LP.Character.HumanoidRootPart.CanCollide = false
            
            -- Teleport to item
            LP.Character.HumanoidRootPart.CFrame = interactPart.CFrame + Vector3.new(0, 3, 0)
            
            -- Allow time for collection
            for _ = 1, 3 do
                RunService.Heartbeat:Wait()
                interactPart.CFrame = interactPart.CFrame -- Force position update
            end
            
            -- Return to original position
            LP.Character.HumanoidRootPart.CFrame = originalCF
            LP.Character.HumanoidRootPart.CanCollide = oldCollision
            
            -- Mark armor as collected
            if isArmor then
                CollectedArmors[Model] = true
                task.delay(60, function() CollectedArmors[Model] = nil end) -- Reset after 60 seconds
            end
        end
    end
    Debounce = false
end

-- Auto armor on spawn/respawn
LP.CharacterAdded:Connect(function(Char)
    if Toggle then
        repeat task.wait() until Char:FindFirstChild("HumanoidRootPart")
        for _ = 1, 3 do  -- Retry mechanism
            CollectItem("armor")
            if Char:FindFirstChild("BattleArmor") then break end
            task.wait(0.5)
        end
    end
end)

-- Auto heal when damaged
LP.CharacterAdded:Connect(function(Char)
    local Hum = Char:WaitForChild("Humanoid")
    Hum.HealthChanged:Connect(function()
        if Toggle and Hum.Health < Hum.MaxHealth then
            CollectItem("heal")
        end
    end)
end)

-- Periodic armor check
task.spawn(function()
    while task.wait(5) do
        if Toggle and LP.Character and not LP.Character:FindFirstChild("BattleArmor") then
            CollectItem("armor")
        end
    end
end)

-- Initial notification
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "SFOTH Ultimate Script",
    Text = "Fixed armor/heal issues\nIntelligent item tracking\n3x retry system",
    Duration = 5
})
