local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local LP = Players.LocalPlayer
local Toggle = true

-- Toggle system with visual feedback
UIS.InputBegan:Connect(function(Input)
    if Input.KeyCode == Enum.KeyCode.H then
        Toggle = not Toggle
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "AUTO-HEAL "..(Toggle and "ENABLED" or "DISABLED"),
            Text = Toggle and "Active pad detection active" or "System disabled",
            Duration = 2
        })
    end
end)

local function GetActivePads()
    local activePads = {}
    for _, pad in ipairs(workspace:GetDescendants()) do
        if pad.Name == "HealPad" and pad:IsA("Model") then
            local statusPart = pad:FindFirstChild("Pad") or pad:FindFirstChildWhichIsA("Part")
            if statusPart then
                -- Check for green color (RGB: 0,1,0)
                if statusPart.Color == Color3.new(0, 1, 0) then
                    table.insert(activePads, {
                        model = pad,
                        part = statusPart,
                        position = statusPart.Position
                    })
                end
            end
        end
    end
    return activePads
end

local function UseHealPad(padData)
    if not LP.Character or not LP.Character:FindFirstChild("HumanoidRootPart") then return end
    
    -- Long-press simulation for reliable activation
    firetouchinterest(LP.Character.HumanoidRootPart, padData.part, 0)
    task.wait(0.35) -- Extended contact time
    firetouchinterest(LP.Character.HumanoidRootPart, padData.part, 1)
    
    -- Visual feedback
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "HEALING ACTIVATED",
        Text = "Used pad: "..padData.model.Name,
        Duration = 2
    })
end

local function AutoHeal()
    if not Toggle then return end
    
    local activePads = GetActivePads()
    if #activePads == 0 then return end
    
    -- Use all available active pads in sequence
    for _, padData in ipairs(activePads) do
        if LP.Character and LP.Character:FindFirstChild("Humanoid") then
            local humanoid = LP.Character.Humanoid
            if humanoid.Health < humanoid.MaxHealth then
                UseHealPad(padData)
                task.wait(0.5) -- Pad activation delay
            end
        end
    end
end

-- Smart armor system
local function GetArmor()
    local armorStands = {}
    for _, stand in ipairs(workspace:GetDescendants()) do
        if stand.Name == "BattleArmorStand" and stand:IsA("Model") then
            table.insert(armorStands, stand)
        end
    end
    
    for _, stand in ipairs(armorStands) do
        local part = stand:FindFirstChildWhichIsA("Part")
        if part then
            firetouchinterest(LP.Character.HumanoidRootPart, part, 0)
            firetouchinterest(LP.Character.HumanoidRootPart, part, 1)
            task.wait(0.5)
            if LP.Character:FindFirstChild("BattleArmor") then break end
        end
    end
end

-- Main system loop
task.spawn(function()
    while task.wait(0.3) do
        if Toggle and LP.Character then
            -- Automatic armor check
            if not LP.Character:FindFirstChild("BattleArmor") then
                GetArmor()
            end
            
            -- Continuous healing check
            AutoHeal()
        end
    end
end)

-- Initial notification
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "SFOTH VISUAL DETECTION SYSTEM",
    Text = "Healing when pads are green\nUsing all available pads",
    Duration = 5
})
