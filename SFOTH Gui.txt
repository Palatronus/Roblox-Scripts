local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local LP = Players.LocalPlayer
local Toggle = true

-- System state management
local Connections = {}
local ActiveLoops = {}
local CleanupQueue = {}

-- Verified color values
local ACTIVE_COLOR = Color3.new(75/255, 151/255, 75/255)
local INACTIVE_COLOR = Color3.new(196/255, 40/255, 28/255)

-- Error-resistant color comparison
local function CompareColors(a, b)
    return math.floor(a.R * 255) == math.floor(b.R * 255) and
           math.floor(a.G * 255) == math.floor(b.G * 255) and
           math.floor(a.B * 255) == math.floor(b.B * 255)
end

-- Memory cleanup system
local function PerformCleanup()
    for _, obj in ipairs(CleanupQueue) do
        if obj.Disconnect then
            obj:Disconnect()
        elseif obj.destroy then
            obj:destroy()
        end
    end
    CleanupQueue = {}
end

-- Toggle system with memory management
UIS.InputBegan:Connect(function(Input)
    if Input.KeyCode == Enum.KeyCode.H then
        Toggle = not Toggle
        PerformCleanup()
        
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "SYSTEM: "..(Toggle and "ON" or "OFF"),
            Text = Toggle and "Stabilized system active" or "Full cleanup performed",
            Duration = 2
        })
    end
end)

local function SafeGetCharacter()
    return LP.Character or LP.CharacterAdded:Wait()
end

local function ForceHeal()
    pcall(function()
        local character = SafeGetCharacter()
        local humanoid = character:WaitForChild("Humanoid")
        if humanoid.Health >= humanoid.MaxHealth then return end

        local closestPad
        local closestDistance = math.huge
        local charPos = character:WaitForChild("HumanoidRootPart").Position

        for _, pad in ipairs(workspace:GetDescendants()) do
            if pad.Name == "HealPad" and pad:IsA("Model") then
                local padPart = pad:FindFirstChild("Pad") or pad:FindFirstChildWhichIsA("BasePart")
                if padPart and CompareColors(padPart.Color, ACTIVE_COLOR) then
                    local distance = (charPos - padPart.Position).Magnitude
                    if distance < closestDistance then
                        closestDistance = distance
                        closestPad = padPart
                    end
                end
            end
        end

        if closestPad then
            for _ = 1, 3 do
                firetouchinterest(character.HumanoidRootPart, closestPad, 0)
                task.wait(0.1)
                firetouchinterest(character.HumanoidRootPart, closestPad, 1)
                task.wait(0.1)
            end
        end
    end)
end

local function MaintainArmor()
    pcall(function()
        local character = SafeGetCharacter()
        if character:FindFirstChild("BattleArmor") then return end

        local armors = {}
        for _, obj in ipairs(workspace:GetDescendants()) do
            if obj.Name == "BattleArmorStand" and obj:IsA("Model") then
                local part = obj:FindFirstChildWhichIsA("BasePart")
                if part then table.insert(armors, part) end
            end
        end

        table.sort(armors, function(a,b)
            return (character.HumanoidRootPart.Position - a.Position).Magnitude <
                   (character.HumanoidRootPart.Position - b.Position).Magnitude
        end)

        for _, armor in ipairs(armors) do
            for _ = 1, 2 do
                firetouchinterest(character.HumanoidRootPart, armor, 0)
                task.wait(0.1)
                firetouchinterest(character.HumanoidRootPart, armor, 1)
            end
            if character:FindFirstChild("BattleArmor") then break end
        end
    end)
end

-- Core system with lifecycle management
local function InitializeSystems()
    -- Clean previous instances
    PerformCleanup()

    -- Health monitoring
    local char = SafeGetCharacter()
    local humanoid = char:WaitForChild("Humanoid")
    
    local healthConnection = humanoid.HealthChanged:Connect(function()
        if Toggle and humanoid.Health < humanoid.MaxHealth then
            ForceHeal()
        end
    end)
    table.insert(CleanupQueue, healthConnection)

    -- Main loop
    local mainLoop = task.spawn(function()
        while Toggle do
            MaintainArmor()
            task.wait(1)
        end
    end)
    table.insert(CleanupQueue, mainLoop)

    -- Secondary loop
    local healLoop = task.spawn(function()
        while Toggle do
            if humanoid.Health < humanoid.MaxHealth then
                ForceHeal()
            end
            task.wait(0.5)
        end
    end)
    table.insert(CleanupQueue, healLoop)
end

-- Character lifecycle handler
local function HandleCharacter()
    local charConnection
    charConnection = LP.CharacterAdded:Connect(function()
        InitializeSystems()
        charConnection:Disconnect()
    end)
    table.insert(CleanupQueue, charConnection)
    
    if LP.Character then
        InitializeSystems()
    end
end

-- Initial startup
HandleCharacter()
table.insert(CleanupQueue, LP.CharacterAdded:Connect(HandleCharacter))

-- Final safeguard
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "STABLE SYSTEM LOADED",
    Text = "Anti-crash protections active\nAutomatic cleanup enabled",
    Duration = 5
})
