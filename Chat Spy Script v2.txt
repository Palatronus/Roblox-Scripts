--[[
   Roblox Chat Spy (Client-Side)
   Type "/spy" to toggle
   - Properly sets OnIncomingMessage callback
   - Zero attempts to "get" the callback value
   - Full client-side functionality
--]]

print("-- Chat Spy Activated --")
print("Type \"/spy\" to toggle")

-- Configuration
local Config = {
    enabled = true,
    spyOnMyself = true,
    public = false,
    publicItalics = true
}

-- Services
local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local StarterGui = game:GetService("StarterGui")

-- Instance tracking
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Message styling
local SpyMessageProperties = {
    Color = Color3.fromRGB(0, 255, 255),
    Font = Enum.Font.SourceSansBold,
    TextSize = 18
}

-- Toggle spy status
local function updateSpyStatus()
    SpyMessageProperties.Text = "{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}"
    StarterGui:SetCore("ChatMakeSystemMessage", SpyMessageProperties)
end

-- Command handler
local function processCommand(message)
    if string.lower(message) == "/spy" then
        Config.enabled = not Config.enabled
        updateSpyStatus()
        return true
    end
    return false
end

-- Main message handler
local function handleIncomingMessage(message)
    -- Only process if spy is enabled and this instance is active
    if _G.chatSpyInstance ~= instance then return end
    if not Config.enabled then return end
    
    local textSource = message.TextSource
    if not textSource then return end
    
    local isLocalPlayer = textSource.UserId == player.UserId
    if not Config.spyOnMyself and isLocalPlayer then return end
    
    -- Detect private messages by channel attribute
    local channel = message:GetAttribute("ChatChannel")
    local isPrivate = channel and (channel.Name == "RBXWhisper" or channel.Name == "RBXTeam")
    
    if isPrivate then
        local msgContent = message.Text or ""
        local senderName = textSource.Name or "Unknown"
        
        if Config.public then
            -- Prevent recursive spying
            if not msgContent:find("^{SPY}") then
                local formatted = Config.publicItalics and "/me " or ""
                formatted = formatted .. "{SPY} [".. senderName .."]: ".. msgContent
                
                -- Send to public chat
                task.spawn(function()
                    TextChatService.TextChannels.RBXGeneral:SendAsync(formatted)
                end)
            end
        else
            -- Send private system message
            SpyMessageProperties.Text = "{SPY} [".. senderName .."]: ".. msgContent
            StarterGui:SetCore("ChatMakeSystemMessage", SpyMessageProperties)
        end
    end
end

-- SET the callback without attempting to GET its value
TextChatService.OnIncomingMessage = function(message)
    -- FIRST call our spy handler
    handleIncomingMessage(message)
    
    -- THEN return properties for normal chat rendering
    return {
        -- These properties are REQUIRED for chat to function
        Font = Enum.Font.SourceSans,
        TextSize = 18,
        TextColor3 = Color3.new(1, 1, 1),
        TextStrokeTransparency = 0.8,
        TextXAlignment = Enum.TextXAlignment.Left
    }
end

-- Setup command detection
player.Chatted:Connect(processCommand)

-- Initial status
updateSpyStatus()

print("Chat Spy Initialized Successfully")
