--[[
	Console-Based Chat Spy
	Works in any exploiting environment
	Prints private messages to console
--]]

print("===== CHAT SPY STARTED =====")

-- Services
local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")

-- Get player with direct method
local player
for _ = 1, 10 do
    player = Players.LocalPlayer
    if player then break end
    task.wait(0.1)
end

if not player then
    player = Players.PlayerAdded:Wait()
end

print("Player detected:", player.Name)

-- Config
local Config = {
    enabled = true,
    spyOnMyself = false,
    filterCommands = false
}

print("Config loaded - enabled:", Config.enabled, "spyOnMyself:", Config.spyOnMyself, "filterCommands:", Config.filterCommands)

-- Core spying function
local function capturePrivateMessage(message)
    if not Config.enabled then return end
    
    -- Get channel info
    local channel = message.TextChannel
    if not channel then return end
    
    -- Only care about private channels
    if channel.Name ~= "RBXWhisper" and channel.Name ~= "RBXTeam" then return end
    
    -- Get message text
    local text = message.Text or ""
    if text == "" then return end
    
    -- Skip commands if filtering enabled
    if Config.filterCommands and text:match("^%/%w+") then return end
    
    -- Get speaker
    local speaker = message.TextSource
    if not speaker then return end
    
    local speakerPlayer = Players:GetPlayerByUserId(speaker.UserId)
    if not speakerPlayer then return end
    
    -- Skip own messages if disabled
    if speakerPlayer == player and not Config.spyOnMyself then return end
    
    -- Print to console
    print(string.format("[SPY] [%s]: %s", speakerPlayer.Name, text))
end

-- Connect to chat events
TextChatService.MessageReceived:Connect(capturePrivateMessage)

-- Toggle command
player.Chatted:Connect(function(msg)
    if msg:lower():sub(1,4) == "/spy" then
        Config.enabled = not Config.enabled
        print("[SPY] Status changed to:", Config.enabled and "ENABLED" or "DISABLED")
    end
end)

-- Initial confirmation
print("===== SPY ACTIVE - Listening for private messages =====")
print("Test commands:")
print("/w [friend] Private test message")
print("/team Team chat test")
print("/e wave (if filterCommands=false)")

-- Diagnostic check
task.delay(5, function()
    print("===== DIAGNOSTIC REPORT =====")
    print("TextChatService available:", tostring(TextChatService ~= nil))
    print("MessageReceived event connected:", tostring(TextChatService.MessageReceived ~= nil))
    
    local hasWhisper = false
    local hasTeam = false
    
    for _, channel in ipairs(TextChatService:GetChildren()) do
        if channel.Name == "RBXWhisper" then hasWhisper = true end
        if channel.Name == "RBXTeam" then hasTeam = true end
    end
    
    print("Whisper channel exists:", hasWhisper)
    print("Team channel exists:", hasTeam)
    print("===== END DIAGNOSTIC =====")
end)
