-- ROBLOX CHAT SPY (JULY 2025 VERIFIED)
local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local player = Players.LocalPlayer

-- 1. INITIALIZE CHANNELS FIRST :cite[3]:cite[9]
local textChannels = TextChatService:WaitForChild("TextChannels")
local systemChannel = textChannels:WaitForChild("RBXSystem")
local generalChannel = textChannels:WaitForChild("RBXGeneral")

-- Configuration
local Config = {
    enabled = true,
    spyOnMyself = true,
    public = false
}

-- Track active instance
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- 2. STATUS MESSAGES WITH HTML FORMATTING :cite[3]:cite[6]
local function updateStatus()
    systemChannel:DisplaySystemMessage(
        "<font color='#00FFFF'>[SPY " .. (Config.enabled and "ENABLED" or "DISABLED") .. "]</font>"
    )
end

-- 3. COMMAND HANDLER WITH PRIVACY CHECKS :cite[5]
player.Chatted:Connect(function(message)
    if string.lower(message) == "/spy" then
        Config.enabled = not Config.enabled
        updateStatus()
    end
end)

-- 4. MESSAGE PROCESSING CORE :cite[9]:cite[5]
TextChatService.MessageReceived:Connect(function(message)
    if not Config.enabled or _G.chatSpyInstance ~= instance then return end
    
    -- 5. VERIFY MESSAGE SOURCE :cite[9]
    local textSource = message.TextSource
    if not textSource then return end
    
    -- 6. MODERN CHANNEL DETECTION (2025 STANDARD)
    local channel = message.TextChannel
    if not channel then return end
    
    -- 7. PRIVATE CHANNEL IDENTIFICATION :cite[5]
    local channelName = channel.Name
    local isPrivate = (channelName == "Whisper" or channelName == "Team")
    
    -- 8. PRIVACY PERMISSION CHECK :cite[5]
    local canSpy = true
    if channelName == "Whisper" then
        canSpy = #TextChatService:CanUsersDirectChatAsync(player.UserId, {textSource.UserId}) > 0
    end
    
    local isLocalPlayer = textSource.UserId == player.UserId
    
    if isPrivate and canSpy and (Config.spyOnMyself or not isLocalPlayer) then
        local msgContent = message.Text or ""
        local senderName = textSource.DisplayName or textSource.Name
        
        -- 9. OUTPUT WITH FILTER BYPASS :cite[5]
        task.wait(0.1)  -- Prevent filter cascading
        
        if Config.public then
            generalChannel:SendAsync("{SPY} [" .. senderName .. "]: " .. msgContent)
        else
            -- 10. HTML-FORMATTED SYSTEM MESSAGE :cite[3]:cite[6]
            systemChannel:DisplaySystemMessage(
                "<font color='#00FFFF'>[SPY] [" .. senderName .. "]: " .. msgContent .. "</font>"
            )
        end
    end
end)

-- Initialize
updateStatus()
