--[[
	Modern Chat Spy (TextChatService)
	Type "/spy" to enable/disable.
	Updated with Infinite Yield's message capture techniques
--]]

print("-- Modern Chat Spy Executed (TextChatService) --")
print("Type \"/spy\" to toggle the chat spy.")

-- Services
local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local player = Players.LocalPlayer

-- Config
Config = {
	enabled = true,          -- Default spy state
	spyOnMyself = true,      -- Capture own private messages
	public = false,          -- Broadcast spy logs publicly
	publicItalics = true,    -- Use italics for public messages
	filterCommands = true,   -- Hide commands like "/e wave"
	captureUnfiltered = true -- Essential: Capture raw pre-filtered messages
}

-- System message appearance
PrivateProperties = {
	Color = Color3.fromRGB(0, 255, 255),
	Font = Enum.Font.SourceSansBold,
	TextSize = 18
}

-- Anti-duplication tracking
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Critical: Store original callback for preservation :cite[3]:cite[5]
local originalOnIncomingMessage = TextChatService.OnIncomingMessage

-- ===== Infinite Yield Message Handling ===== --
TextChatService.OnIncomingMessage = function(...)
	-- Preserve existing chat functionality
	if type(originalOnIncomingMessage) == "function" then
		originalOnIncomingMessage(...)
	end
	
	-- Process message
	local message = ...
	if not message then return end
	
	-- Skip if spy disabled or instance mismatched
	if _G.chatSpyInstance ~= instance or not Config.enabled then 
		return 
	end

	-- Extract message properties
	local status = message.Status
	local text = message.Text or ""
	local speaker = message.TextSource
	local isPrivate = (status == Enum.TextChatMessageStatus.Whisper or
					  status == Enum.TextChatMessageStatus.Team or
					  status == Enum.TextChatMessageStatus.Private)
	
	-- Skip non-private or empty messages
	if not isPrivate or text == "" then 
		return 
	end
	
	-- Filter commands if enabled
	if Config.filterCommands and text:match("^%/%w+") then 
		return 
	end

	-- Identify speaker
	local playerName = "System"
	local playerObj = nil
	if speaker then
		playerObj = Players:GetPlayerByUserId(speaker.UserId)
		if playerObj then
			playerName = playerObj.Name
			-- Skip own messages if disabled
			if playerObj == player and not Config.spyOnMyself then
				return
			end
		end
	end

	-- Clean message text
	local cleanText = text:gsub("[\n\r]", ""):gsub("\t", " "):gsub("%s+", " ")
	
	-- ===== Output Handling ===== --
	if Config.public then
		local prefix = Config.publicItalics and "/me " or ""
		local formatted = prefix .. "{SPY} [".. playerName .."]: " .. cleanText
		
		-- Safe channel handling
		local success, err = pcall(function()
			local generalChannel = TextChatService:FindFirstChild("RBXGeneral")
			if generalChannel then
				generalChannel:SendAsync(formatted)
			end
		end)
		
		if not success then
			warn("Public broadcast failed: " .. err)
		end
	else
		-- Private system message
		PrivateProperties.Text = "{SPY} [".. playerName .."]: " .. cleanText
		StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
	end
end

-- ===== Command Handling ===== --
local function onChatted(msg)
	if _G.chatSpyInstance ~= instance then return end
	
	msg = msg:lower()
	if msg:sub(1, 4) == "/spy" then
		Config.enabled = not Config.enabled
		task.wait(0.3)
		PrivateProperties.Text = "{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}"
		StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
	end
end

-- Initialize command handler
player.Chatted:Connect(onChatted)

-- Initial status message
PrivateProperties.Text = "{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}"
StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
