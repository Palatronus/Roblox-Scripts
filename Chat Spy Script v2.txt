--[[
   Modern Chat Spy (TextChatService Version)
   Type "/spy" to enable/disable chat spy
   Compatible with Synapse and most executors
--]]

print("-- Modern Chat Spy Executed --")
print("Type \"/spy\" to enable or disable the chat spy")
print("Updated for Roblox TextChatService")

-- Configuration
local Config = {
    enabled = true,
    spyOnMyself = true,
    public = false,
    publicItalics = true
}

-- Message styling
local PrivateProperties = {
    Color = Color3.fromRGB(0, 255, 255),
    Font = Enum.Font.SourceSansBold,
    TextSize = 18
}

-- Services
local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local StarterGui = game:GetService("StarterGui")

-- Spy instance tracking
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Toggle spy status
local function updateSpyStatus()
    PrivateProperties.Text = "{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}"
    StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
end

-- Register /spy command
TextChatService:RegisterCommands({
    {
        name = "spy",
        description = "Toggle chat spy",
        enabled = true,
        primaryAlias = "spy",
        secondaryAlias = "",
        callback = function()
            Config.enabled = not Config.enabled
            updateSpyStatus()
            return false  -- Prevent command from showing in chat
        end
    }
})

-- Message handler
TextChatService.OnIncomingMessage = (function(original)
    return function(message)
        if _G.chatSpyInstance ~= instance then return original(message) end
        
        local properties = original(message)
        local speaker = message.TextSource
        local isLocalPlayer = speaker and speaker.UserId == player.UserId
        
        -- Handle spy functionality
        if Config.enabled and speaker and (Config.spyOnMyself or not isLocalPlayer) then
            local msgContent = message.Text
            local isPrivate = (
                message.Status == Enum.TextChatMessageStatus.Private or
                message.Status == Enum.TextChatMessageStatus.FilteredPrivate
            )

            if isPrivate then
                if Config.public then
                    local formatted = Config.publicItalics and "/me " or ""
                    formatted ..= "{SPY} [".. speaker.Name .."]: ".. msgContent
                    task.spawn(function()
                        TextChatService:SendAsync(formatted, "All")
                    end)
                else
                    PrivateProperties.Text = "{SPY} [".. speaker.Name .."]: ".. msgContent
                    StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
                end
            end
        end

        return properties
    end
end)(TextChatService.OnIncomingMessage)

-- Initial status
updateSpyStatus()
