--[[
	Infinite Yield-Style Chat Spy (July 2025)
	Type "/spy" to toggle
	Fully compliant with TextChatService regulations
--]]

print("-- Modern Chat Spy Initialized --")

-- Services
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local TextChatService = game:GetService("TextChatService")
local player = Players.LocalPlayer or Players.PlayerAdded:Wait()

-- Config (IY Defaults)
local Config = {
    enabled = true,
    spyOnMyself = true,
    public = false,
    publicItalics = true,
    filterCommands = true
}

-- IY-style message appearance
local PrivateProperties = {
    Color = Color3.fromRGB(0, 255, 255),  -- Cyan
    Font = Enum.Font.SourceSansBold,
    TextSize = 18
}

-- Anti-duplication
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Safe messaging (IY method)
local function safeMessage(text)
    pcall(function()
        PrivateProperties.Text = text
        StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
    end)
end

-- ===== Modern Message Handler =====
local function processMessage(message)
    if _G.chatSpyInstance ~= instance or not Config.enabled then
        return
    end

    -- Channel-based detection (IY method)
    local channel = message.TextChannel
    if not (channel and (channel.Name == "RBXWhisper" or channel.Name == "RBXTeam")) then
        return
    end

    local text = message.Text or ""
    if text == "" then return end

    -- Command filtering
    if Config.filterCommands and text:match("^%/%w+") then 
        return 
    end

    -- Speaker identification
    local speaker = message.TextSource
    if not speaker then return end
    
    local playerObj = Players:GetPlayerByUserId(speaker.UserId)
    if not playerObj then return end
    
    if playerObj == player and not Config.spyOnMyself then
        return
    end

    -- Message cleaning
    local cleanText = text:gsub("[\n\r]", ""):gsub("\t", " "):gsub("%s+", " ")
    
    -- Output handling (deferred for safety)
    task.defer(function()
        if Config.public then
            local prefix = Config.publicItalics and "/me " or ""
            local formatted = prefix .. "{SPY} [".. playerObj.Name .."]: " .. cleanText
            
            pcall(function()
                local generalChannel = TextChatService:FindFirstChild("RBXGeneral")
                if generalChannel then
                    generalChannel:SendAsync(formatted)
                end
            end)
        else
            safeMessage("{SPY} [".. playerObj.Name .."]: " .. cleanText)
        end
    end)
end

-- ===== Main Initialization =====
TextChatService.OnIncomingMessage = function(message)
    pcall(processMessage, message)  -- Critical error protection
    return true  -- Maintain chat delivery
end

-- Command handler
player.Chatted:Connect(function(msg)
    if _G.chatSpyInstance ~= instance then return end
    
    if msg:lower():sub(1,4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        safeMessage("{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}")
    end
end)

-- Initial status with delay
task.delay(1.5, function()
    safeMessage("{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}")
end)
