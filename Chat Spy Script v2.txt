-- Infinite Yield-Style Chat Spy
-- Captures whispers, team chat, and commands exactly like IY

local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local StarterGui = game:GetService("StarterGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Get player with IY's method
local player = Players.LocalPlayer
repeat task.wait() until player

-- IY configuration
local Config = {
    Enabled = true,
    SpyOnSelf = false,
    Public = false,
    PublicItalics = true,
    FilterCommands = false
}

-- IY message properties
local MessageProperties = {
    Color = Color3.fromRGB(0, 255, 255),
    Font = Enum.Font.SourceSansBold,
    TextSize = 18
}

-- IY initialization sequence
local function Initialize()
    -- Create spy instance tracking (IY method)
    local instance = (_G.chatSpyInstance or 0) + 1
    _G.chatSpyInstance = instance

    -- IY status message function
    local function ShowStatus()
        StarterGui:SetCore("ChatMakeSystemMessage", {
            Text = "{SPY "..(Config.Enabled and "EN" or "DIS").."ABLED}",
            Color = MessageProperties.Color,
            Font = MessageProperties.Font,
            TextSize = MessageProperties.TextSize
        })
    end

    -- IY message processor
    local function ProcessMessage(message)
        if not Config.Enabled or _G.chatSpyInstance ~= instance then return end
        
        -- IY channel detection method
        local channel = message.TextChannel
        if not channel then return end
        
        -- Capture whispers and team chat only
        if channel.Name ~= "RBXWhisper" and channel.Name ~= "RBXTeam" then return end
        
        -- Get message text
        local text = message.Text or ""
        if text == "" then return end
        
        -- Skip commands if filtering enabled (IY command filter)
        if Config.FilterCommands and text:match("^%/%w+") then return end
        
        -- Get speaker
        local speaker = message.TextSource
        if not speaker then return end
        
        local speakerPlayer = Players:GetPlayerByUserId(speaker.UserId)
        if not speakerPlayer then return end
        
        -- Skip own messages if disabled (IY self-message handling)
        if speakerPlayer == player and not Config.SpyOnSelf then return end
        
        -- IY message cleaning
        local cleanText = text:gsub("[\n\r]", ""):gsub("\t", " "):gsub("%s+", " ")
        
        -- IY output method
        if Config.Public then
            -- Public broadcast with italics support
            local prefix = Config.PublicItalics and "/me " or ""
            task.spawn(function()
                pcall(function()
                    TextChatService.TextChannels.RBXGeneral:SendAsync(prefix .. "{SPY} [".. speakerPlayer.Name .."]: " .. cleanText)
                end)
            end)
        else
            -- Private system message (IY style)
            task.spawn(function()
                StarterGui:SetCore("ChatMakeSystemMessage", {
                    Text = "{SPY} [".. speakerPlayer.Name .."]: " .. cleanText,
                    Color = MessageProperties.Color,
                    Font = MessageProperties.Font,
                    TextSize = MessageProperties.TextSize
                })
            end)
        end
    end

    -- IY event connection
    TextChatService.MessageReceived:Connect(ProcessMessage)

    -- IY command handler
    player.Chatted:Connect(function(msg)
        if _G.chatSpyInstance ~= instance then return end
        
        if msg:lower():sub(1,4) == "/spy" then
            Config.Enabled = not Config.Enabled
            task.wait(0.3)
            ShowStatus()
        end
    end)

    -- Initial status (IY activation)
    task.delay(1, ShowStatus)
end

-- IY execution guard
pcall(Initialize)

-- IY-style fallback message
task.delay(2, function()
    if Config.Enabled then
        StarterGui:SetCore("ChatMakeSystemMessage", {
            Text = "SPY SYSTEM ACTIVE",
            Color = Color3.new(0, 1, 0),
            Font = Enum.Font.SourceSansBold,
            TextSize = 18
        })
    end
end)
