print("-- Chat Spy Executed --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Config
Config = {
    enabled = true,
    spyOnMyself = false,
    public = false,
    publicItalics = true
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Message tracking for spam protection :cite[8]
local messageTracker = {}
local TRACKER_TTL = 1.5  -- Seconds to remember messages

-- System message formatting
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#00FFFF"><b>%s</b></font>',
            text
        )
    )
end

-- Whisper detection
local function isWhisperToLocalPlayer(message)
    return message:lower():match("^/w%s+" .. player.Name:lower() .. "%s")
end

-- Core message processing
local function processMessage(speaker, message, channel)
    if not Config.enabled then return end
    if speaker == player and not Config.spyOnMyself then return end
    
    -- Skip ALL public channels and non-private communications :cite[6]
    if channel == "RBXGeneral" or channel == "All" then return end
    
    -- Skip whispers TO local player
    if channel == "RBXWhisper" and isWhisperToLocalPlayer(message) then 
        return 
    end
    
    -- Message deduplication :cite[8]
    local msgSignature = speaker.UserId .. ":" .. message
    local now = tick()
    if messageTracker[msgSignature] and (now - messageTracker[msgSignature] < TRACKER_TTL) then
        return
    end
    messageTracker[msgSignature] = now
    
    -- Clean message
    local cleanMsg = message:gsub("[\n\r]", ""):gsub("\t", " "):gsub(" +", " ")
    
    if Config.public then
        local formatted = (Config.publicItalics and "/me " or "") .. "{SPY} [" .. speaker.Name .. "]: " .. cleanMsg
        TextChatService.TextChannels.RBXGeneral:SendAsync(formatted)
    else
        displaySystemMessage("{SPY} [" .. speaker.Name .. "]: " .. cleanMsg)
    end
end

-- Infinite Yield-style message hook
local function setupInfiniteYieldHook()
    local chatEvents = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
    if not chatEvents then return false end
    
    local onMessageDone = chatEvents:FindFirstChild("OnMessageDoneFiltering")
    if not onMessageDone then return false end
    
    onMessageDone.OnClientEvent:Connect(function(messageData)
        if _G.chatSpyInstance ~= instance then return end
        if not messageData.FromSpeaker then return end
        
        local speaker = Players:GetPlayerByUserId(messageData.FromSpeaker)
        if not speaker then return end
        
        processMessage(
            speaker,
            messageData.Message,
            messageData.OriginalChannel
        )
    end)
    
    return true
end

-- Handle own messages
local function setupOwnMessageHook()
    player.Chatted:Connect(function(rawMessage)
        if _G.chatSpyInstance ~= instance then return end
        if not Config.enabled then return end
        if not Config.spyOnMyself then return end
        
        -- Determine channel from message content
        local channel = "All"
        if rawMessage:sub(1,3):lower() == "/w " then
            channel = "RBXWhisper"
        elseif rawMessage:sub(1,1) == "/" then
            channel = "Command"
        end
        
        processMessage(player, rawMessage, channel)
    end)
end

-- Command handling
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    if string.sub(message:lower(), 1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
        params.Text = ""
        return
    end
end)

-- Initialize chat hooks
if setupInfiniteYieldHook() then
    displaySystemMessage("{SPY MESSAGE HOOK ACTIVE}")
else
    -- Fallback to TextChatService for other players
    TextChatService.MessageReceived:Connect(function(message)
        if _G.chatSpyInstance ~= instance then return end
        if not message.TextSource then return end
        
        local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
        if speaker and speaker ~= player then
            local channel = message.TextChannel and message.TextChannel.Name or "Unknown"
            -- Skip public messages in fallback :cite[6]
            if channel == "RBXGeneral" then return end
            processMessage(speaker, message.Text, channel)
        end
    end)
    displaySystemMessage("{SPY USING FALLBACK HOOK}")
end

-- Setup own message hook
setupOwnMessageHook()

-- Initial status
displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")

-- Optimized player connections
local function handlePlayerChatted(speaker, message)
    if _G.chatSpyInstance ~= instance then return end
    if speaker == player then return end
    
    -- Explicit channel detection
    local channel = "All"
    if message:sub(1,3):lower() == "/w " then
        channel = "RBXWhisper"
    elseif message:sub(1,1) == "/" then
        channel = "Command"
    end
    
    processMessage(speaker, message, channel)
end

-- Connect to existing players
for _, otherPlayer in ipairs(Players:GetPlayers()) do
    if otherPlayer ~= player then
        otherPlayer.Chatted:Connect(function(msg)
            handlePlayerChatted(otherPlayer, msg)
        end)
    end
end

Players.PlayerAdded:Connect(function(newPlayer)
    newPlayer.Chatted:Connect(function(msg)
        handlePlayerChatted(newPlayer, msg)
    end)
end)
