print("-- Chat Spy Executed --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Config
Config = {
    enabled = true,
    spyOnMyself = true,
    public = false,
    publicItalics = true
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Track whisper initiations
local whisperInitiations = {}
local pendingMessages = {}

-- System message formatting
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#00FFFF"><b>%s</b></font>',
            text
        )
    )
end

-- Core message processing
local function processMessage(speaker, message, channel)
    if not Config.enabled then return end
    
    -- Skip public chat messages
    if channel == "RBXGeneral" then return end
    
    -- Skip own private messages (both sent and received)
    if speaker == player and channel == "RBXWhisper" then return end
    
    -- Clean message
    local cleanMsg = message:gsub("[\n\r]", ""):gsub("\t", " "):gsub(" +", " ")
    
    -- Handle whisper initiation
    if channel == "RBXWhisper" then
        local initKey = speaker.Name .. player.Name
        if not whisperInitiations[initKey] then
            displaySystemMessage("{SPY} Whisper started: " .. speaker.Name)
            whisperInitiations[initKey] = true
        end
        return  -- Skip content of private messages
    end
    
    -- Process other messages
    if Config.public then
        local formatted = (Config.publicItalics and "/me " or "") .. "{SPY} [" .. speaker.Name .. "]: " .. cleanMsg
        TextChatService.TextChannels.RBXGeneral:SendAsync(formatted)
    else
        displaySystemMessage("{SPY} [" .. speaker.Name .. "]: " .. cleanMsg)
    end
end

-- Infinite Yield-style message hook with retry mechanism
local function setupInfiniteYieldHook()
    local chatEvents = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
    if not chatEvents then return false end
    
    local onMessageDone = chatEvents:FindFirstChild("OnMessageDoneFiltering")
    if not onMessageDone then return false end
    
    onMessageDone.OnClientEvent:Connect(function(messageData)
        if _G.chatSpyInstance ~= instance then return end
        if not messageData.FromSpeaker then return end
        
        local speaker = Players:GetPlayerByUserId(messageData.FromSpeaker)
        if not speaker then return end
        
        -- Create unique message ID
        local msgId = speaker.UserId .. "_" .. os.clock()
        pendingMessages[msgId] = {
            speaker = speaker,
            message = messageData.Message,
            channel = messageData.OriginalChannel
        }
        
        -- Process with retry mechanism
        local retries = 0
        local function attemptProcess()
            retries = retries + 1
            if pendingMessages[msgId] and Config.enabled then
                processMessage(pendingMessages[msgId].speaker, pendingMessages[msgId].message, pendingMessages[msgId].channel)
                pendingMessages[msgId] = nil
            elseif retries < 3 then
                task.wait(0.1)
                attemptProcess()
            end
        end
        
        task.spawn(attemptProcess)
    end)
    
    return true
end

-- Handle own messages
local function setupOwnMessageHook()
    player.Chatted:Connect(function(rawMessage)
        if _G.chatSpyInstance ~= instance then return end
        if not Config.enabled then return end
        if not Config.spyOnMyself then return end
        
        -- Determine channel
        local channel = "All"
        if rawMessage:sub(1,3):lower() == "/w " then
            channel = "RBXWhisper"
        elseif rawMessage:sub(1,1) == "/" then
            channel = "Command"
        end
        
        -- Skip public messages and private messages
        if channel == "RBXGeneral" or channel == "RBXWhisper" then return end
        
        processMessage(player, rawMessage, channel)
    end)
end

-- Command handling
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    if string.sub(message:lower(), 1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        displaySystemMessage("{SPY} " .. (Config.enabled and "ENABLED" or "DISABLED"))
        params.Text = ""
        return
    end
end

-- Initialize chat hooks
if setupInfiniteYieldHook() then
    displaySystemMessage("{SPY} MESSAGE HOOK ACTIVE")
else
    -- Fallback to TextChatService for other players
    TextChatService.MessageReceived:Connect(function(message)
        if _G.chatSpyInstance ~= instance then return end
        if not message.TextSource then return end
        
        local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
        if speaker and speaker ~= player then
            local channel = message.TextChannel and message.TextChannel.Name or "Unknown"
            processMessage(speaker, message.Text, channel)
        end
    end)
    displaySystemMessage("{SPY} USING FALLBACK HOOK")
end

-- Setup own message hook
setupOwnMessageHook()

-- Initial status
displaySystemMessage("{SPY} " .. (Config.enabled and "ENABLED" :or "DISABLED"))

-- Add player connections for Chatted event as additional fallback
for _, otherPlayer in ipairs(Players:GetPlayers()) do
    if otherPlayer ~= player then
        otherPlayer.Chatted:Connect(function(message)
            if _G.chatSpyInstance ~= instance then return end
            -- Create unique message ID
            local msgId = otherPlayer.UserId .. "_" .. os.clock()
            pendingMessages[msgId] = {
                speaker = otherPlayer,
                message = message,
                channel = "All"
            }
            
            -- Process with retry mechanism
            local retries = 0
            local function attemptProcess()
                retries = retries + 1
                if pendingMessages[msgId] and Config.enabled then
                    processMessage(pendingMessages[msgId].speaker, pendingMessages[msgId].message, pendingMessages[msgId].channel)
                    pendingMessages[msgId] = nil
                elseif retries < 3 then
                    task.wait(0.1)
                    attemptProcess()
                end
            end
            
            task.spawn(attemptProcess)
        end)
    end
end

Players.PlayerAdded:Connect(function(newPlayer)
    newPlayer.Chatted:Connect(function(message)
        if _G.chatSpyInstance ~= instance then return end
        -- Create unique message ID
        local msgId = newPlayer.UserId .. "_" .. os.clock()
        pendingMessages[msgId] = {
            speaker = newPlayer,
            message = message,
            channel = "All"
        }
        
        -- Process with retry mechanism
        local retries = 0
        local function attemptProcess()
            retries = retries + 1
            if pendingMessages[msgId] and Config.enabled then
                processMessage(pendingMessages[msgId].speaker, pendingMessages[msgId].message, pendingMessages[msgId].channel)
                pendingMessages[msgId] = nil
            elseif retries < 3 then
                task.wait(0.1)
                attemptProcess()
            end
        end
        
        task.spawn(attemptProcess)
    end)
end)
