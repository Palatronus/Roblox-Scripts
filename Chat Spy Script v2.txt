print("-- Chat Spy Executed --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Config
Config = {
    enabled = true,
    spyOnMyself = false,
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- System message formatting
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#00FFFF"><b>%s</b></font>',
            text
        )
    )
end

-- Core message processing
local function processPrivateMessage(speaker, message)
    if not Config.enabled then return end
    if speaker == player and not Config.spyOnMyself then return end
    
    -- Clean message
    local cleanMsg = message:gsub("[\n\r]", ""):gsub("\t", " "):gsub(" +", " ")
    displaySystemMessage("{SPY} [" .. speaker.Name .. "]: " .. cleanMsg)
end

-- Handle own messages
player.Chatted:Connect(function(rawMessage)
    if _G.chatSpyInstance ~= instance then return end
    if not Config.enabled then return end
    if not Config.spyOnMyself then return end
    
    -- Process private messages
    if rawMessage:sub(1,3):lower() == "/w " then
        processPrivateMessage(player, rawMessage)
    elseif rawMessage:sub(1,1) == "/" then
        processPrivateMessage(player, rawMessage)
    end
end)

-- Command handling
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    if string.sub(message:lower(), 1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
        params.Text = ""
        return
    end
end)

-- Monitor private messages
TextChatService.MessageReceived:Connect(function(message)
    if _G.chatSpyInstance ~= instance then return end
    if not Config.enabled then return end
    if not message.TextSource then return end
    
    local channel = message.TextChannel and message.TextChannel.Name or "Unknown"
    if channel == "RBXWhisper" or channel == "RBXTeam" then
        local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
        if speaker then
            processPrivateMessage(speaker, message.Text)
        end
    end
end)

-- Monitor other players' commands
for _, otherPlayer in ipairs(Players:GetPlayers()) do
    if otherPlayer ~= player then
        otherPlayer.Chatted:Connect(function(msg)
            if _G.chatSpyInstance ~= instance then return end
            if not Config.enabled then return end
            if msg:sub(1,1) == "/" and msg:sub(1,4):lower() ~= "/spy" then
                processPrivateMessage(otherPlayer, msg)
            end
        end)
    end
end

Players.PlayerAdded:Connect(function(newPlayer)
    newPlayer.Chatted:Connect(function(msg)
        if _G.chatSpyInstance ~= instance then return end
        if not Config.enabled then return end
        if msg:sub(1,1) == "/" and msg:sub(1,4):lower() ~= "/spy" then
            processPrivateMessage(newPlayer, msg)
        end
    end)
end)

-- Initial status
displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
