--[[
	Modern Chat Spy (TextChatService)
	Type "/spy" to enable/disable.
	Updated for Roblox's TextChatService system (2023+)
	Incorporates Infinite Yield's chat logging techniques
--]]

print("-- Modern Chat Spy Executed (TextChatService) --")
print("Type \"/spy\" to toggle the chat spy.")

-- Config
Config = {
	enabled = true,         -- Default state
	spyOnMyself = false,     -- Show your own private messages
	public = false,         -- Broadcast spy logs publicly
	publicItalics = true,   -- Use italics for public spy messages
	filterCommands = false,  -- Hide commands like "/e wave"
	logUnfiltered = true    -- Capture raw messages before filtering
}

-- System message appearance
PrivateProperties = {
	Color = Color3.fromRGB(0, 255, 255),
	Font = Enum.Font.SourceSansBold,
	TextSize = 18
}

-- Services
local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local player = Players.LocalPlayer
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Critical fix: Use OnIncomingMessage instead of MessageReceived
local function processIncomingMessage(message, channel)
	if _G.chatSpyInstance ~= instance then return end
	if not Config.enabled then return end
	
	-- Extract message properties (Infinite Yield method)
	local text = message.Text
	local status = message.Status
	local speaker = message.TextSource
	local isPrivate = status == Enum.TextChatMessageStatus.Whisper 
		or status == Enum.TextChatMessageStatus.Team 
		or status == Enum.TextChatMessageStatus.Private
	
	-- Skip non-private messages
	if not isPrivate then return end
	
	-- Filter commands if enabled
	if Config.filterCommands and text:match("^%/%w+") then return end
	
	-- Get speaker information
	local playerName = "System"
	if speaker then
		local playerObj = Players:GetPlayerByUserId(speaker.UserId)
		if playerObj then
			playerName = playerObj.Name
			
			-- Skip own messages if disabled
			if playerObj == player and not Config.spyOnMyself then
				return
			end
		end
	end
	
	-- Clean message text
	local cleanText = text:gsub("[\n\r]", ""):gsub("\t", " "):gsub("%s+", " ")
	
	-- Log handling
	if Config.public then
		local prefix = Config.publicItalics and "/me " or ""
		local formatted = prefix .. "{SPY} [".. playerName .."]: " .. cleanText
		local generalChannel = TextChatService:FindFirstChild("RBXGeneral")
		if generalChannel then
			generalChannel:SendAsync(formatted)
		end
	else
		PrivateProperties.Text = "{SPY} [".. playerName .."]: " .. cleanText
		StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
	end
end

-- Toggle with /spy command
local function onChatted(msg)
	if _G.chatSpyInstance ~= instance then return end
	
	msg = msg:lower()
	if msg:sub(1, 4) == "/spy" then
		Config.enabled = not Config.enabled
		task.wait(0.3)
		PrivateProperties.Text = "{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}"
		StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
	end
end

-- Initialize (Critical fix: Use OnIncomingMessage)
TextChatService.OnIncomingMessage = (TextChatService.OnIncomingMessage or function() end) and function(...)
	-- Preserve existing handlers
	pcall(TextChatService.OnIncomingMessage, ...)
	
	-- Process message
	local message, channel = ...
	if Config.logUnfiltered then
		processIncomingMessage(message, channel)
	end
end

-- Initialize command handler
player.Chatted:Connect(onChatted)

-- Initial status message
PrivateProperties.Text = "{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}"
StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
