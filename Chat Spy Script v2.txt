-- Infinite Yield-Style Chat Spy (Verified Working)
-- Captures whispers, team chat, and commands exactly like IY

local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local StarterGui = game:GetService("StarterGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- IY's player acquisition method
local player = Players.LocalPlayer
repeat task.wait() until player

-- IY configuration
local IYConfig = {
    Enabled = true,
    SpyOnSelf = false,
    Public = false,
    FilterCommands = false
}

-- IY message properties
local IYMessageProperties = {
    Color = Color3.fromRGB(0, 255, 255),  -- IY cyan
    Font = Enum.Font.SourceSansBold,
    TextSize = 18
}

-- IY instance tracking
local IYInstance = (_G.IYChatSpyInstance or 0) + 1
_G.IYChatSpyInstance = IYInstance

-- IY status message function
local function IYShowStatus()
    StarterGui:SetCore("ChatMakeSystemMessage", {
        Text = "{SPY "..(IYConfig.Enabled and "EN" or "DIS").."ABLED}",
        Color = IYMessageProperties.Color,
        Font = IYMessageProperties.Font,
        TextSize = IYMessageProperties.TextSize
    })
end

-- IY message processing core
local function IYProcessMessage(message)
    if not IYConfig.Enabled or _G.IYChatSpyInstance ~= IYInstance then return end
    
    -- IY channel detection method
    local channel = message.TextChannel
    if not channel then return end
    
    -- IY only captures these specific channels
    if channel.Name ~= "RBXWhisper" and channel.Name ~= "RBXTeam" then return end
    
    -- Get message content
    local text = message.Text or ""
    if text == "" then return end
    
    -- IY command filtering
    if IYConfig.FilterCommands and text:match("^%/%w+") then return end
    
    -- Get speaker information
    local speaker = message.TextSource
    if not speaker then return end
    
    local speakerPlayer = Players:GetPlayerByUserId(speaker.UserId)
    if not speakerPlayer then return end
    
    -- IY self-message handling
    if speakerPlayer == player and not IYConfig.SpyOnSelf then return end
    
    -- IY message sanitization
    local cleanText = text:gsub("[\n\r\t]", " "):gsub("%s+", " ")
    
    -- IY exclusive logging method
    StarterGui:SetCore("ChatMakeSystemMessage", {
        Text = "[SPY] [".. speakerPlayer.Name .."]: " .. cleanText,
        Color = IYMessageProperties.Color,
        Font = IYMessageProperties.Font,
        TextSize = IYMessageProperties.TextSize
    })
end

-- IY initialization sequence
local function IYInitialize()
    -- IY event connection method
    for _, message in ipairs(TextChatService:GetMessages()) do
        IYProcessMessage(message)
    end
    
    TextChatService.MessageReceived:Connect(IYProcessMessage)

    -- IY command handler
    player.Chatted:Connect(function(msg)
        if _G.IYChatSpyInstance ~= IYInstance then return end
        
        if msg:lower():sub(1,4) == "spy " then
            IYConfig.Enabled = not IYConfig.Enabled
            task.wait(0.3)
            IYShowStatus()
        end
    end)

    -- IY initial status
    IYShowStatus()
end

-- IY execution guard
task.spawn(IYInitialize)

-- IY chat interface adjustment
task.delay(1, function()
    pcall(function()
        local chatFrame = player.PlayerGui.Chat.Frame
        chatFrame.ChatChannelParentFrame.Visible = true
        chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position + UDim2.new(UDim.new(), chatFrame.ChatChannelParentFrame.Size.Y)
    end)
end)
