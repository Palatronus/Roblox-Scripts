print("-- Chat Spy Executed --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Config
Config = {
    enabled = true,
    spyOnMyself = true,
    public = false,
    publicItalics = true
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Track whisper initiations
local whisperInitiations = {}
local messageQueue = {}
local MESSAGE_RETRIES = 3
local RETRY_DELAY = 0.1

-- System message formatting
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#00FFFF"><b>%s</b></font>',
            text
        )
    )
end

-- Core message processing
local function processMessage(speaker, message, channel)
    if not Config.enabled then return end
    if speaker == player and not Config.spyOnMyself then return end
    
    -- Skip public chat messages (requirement #3)
    if channel == "RBXGeneral" or channel == "All" then return end
    
    -- Skip private messages involving the local player (requirement #1)
    if channel == "RBXWhisper" or channel == "Whisper" then
        -- Check if this is a new whisper conversation (requirement #2)
        if speaker == player then
            -- Parse recipient from whisper command
            local recipientName = message:match("^/w%s+([^%s]+)")
            if recipientName then
                local recipient = Players:FindFirstChild(recipientName) or Players:GetPlayerByUserId(tonumber(recipientName))
                if recipient then
                    local initKey = player.UserId .. recipient.UserId
                    if not whisperInitiations[initKey] then
                        displaySystemMessage("{SPY} Started whisper with " .. recipient.Name)
                        whisperInitiations[initKey] = true
                    end
                end
            end
        else
            -- For incoming whispers
            local initKey = speaker.UserId .. player.UserId
            if not whisperInitiations[initKey] then
                displaySystemMessage("{SPY} " .. speaker.Name .. " started whisper")
                whisperInitiations[initKey] = true
            end
        end
        return
    end
    
    -- Process other messages
    local cleanMsg = message:gsub("[\n\r]", ""):gsub("\t", " "):gsub(" +", " ")
    
    if Config.public then
        local formatted = (Config.publicItalics and "/me " or "") .. "{SPY} [" .. speaker.Name .. "]: " .. cleanMsg
        TextChatService.TextChannels.RBXGeneral:SendAsync(formatted)
    else
        displaySystemMessage("{SPY} [" .. speaker.Name .. "]: " .. cleanMsg)
    end
end

-- Message processing with retry mechanism (requirement #4)
local function safeProcessMessage(speaker, message, channel)
    local messageId = speaker.UserId .. "_" .. tostring(os.clock())
    messageQueue[messageId] = {
        speaker = speaker,
        message = message,
        channel = channel,
        attempts = 0
    }
    
    local function processAttempt()
        if not messageQueue[messageId] then return end
        messageQueue[messageId].attempts = messageQueue[messageId].attempts + 1
        
        if Config.enabled then
            processMessage(
                messageQueue[messageId].speaker,
                messageQueue[messageId].message,
                messageQueue[messageId].channel
            )
        end
        
        if messageQueue[messageId].attempts >= MESSAGE_RETRIES then
            messageQueue[messageId] = nil
        else
            task.wait(RETRY_DELAY)
            processAttempt()
        end
    end
    
    task.spawn(processAttempt)
end

-- Infinite Yield-style message hook
local function setupInfiniteYieldHook()
    local chatEvents = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
    if not chatEvents then return false end
    
    local onMessageDone = chatEvents:FindFirstChild("OnMessageDoneFiltering")
    if not onMessageDone then return false end
    
    onMessageDone.OnClientEvent:Connect(function(messageData)
        if _G.chatSpyInstance ~= instance then return end
        if not messageData.FromSpeaker then return end
        
        local speaker = Players:GetPlayerByUserId(messageData.FromSpeaker)
        if not speaker then return end
        
        safeProcessMessage(
            speaker,
            messageData.Message,
            messageData.OriginalChannel
        )
    end)
    
    return true
end

-- Handle own messages
local function setupOwnMessageHook()
    player.Chatted:Connect(function(rawMessage)
        if _G.chatSpyInstance ~= instance then return end
        if not Config.enabled then return end
        if not Config.spyOnMyself then return end
        
        -- Determine channel
        local channel = "All"
        if rawMessage:sub(1,3):lower() == "/w " then
            channel = "Whisper"
        elseif rawMessage:sub(1,1) == "/" then
            channel = "Command"
        end
        
        safeProcessMessage(player, rawMessage, channel)
    end)
end

-- Command handling
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    if string.sub(message:lower(), 1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        displaySystemMessage("{SPY} " .. (Config.enabled and "ENABLED" or "DISABLED"))
        params.Text = ""
        return
    end
end)

-- Initialize chat hooks
if setupInfiniteYieldHook() then
    displaySystemMessage("{SPY} MESSAGE HOOK ACTIVE")
else
    -- Fallback to TextChatService for other players
    TextChatService.MessageReceived:Connect(function(message)
        if _G.chatSpyInstance ~= instance then return end
        if not message.TextSource then return end
        
        local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
        if speaker and speaker ~= player then
            local channel = message.TextChannel and message.TextChannel.Name or "Unknown"
            safeProcessMessage(speaker, message.Text, channel)
        end
    end)
    displaySystemMessage("{SPY} USING FALLBACK HOOK")
end

-- Setup own message hook
setupOwnMessageHook()

-- Add player connections for Chatted event as additional fallback
for _, otherPlayer in ipairs(Players:GetPlayers()) do
    if otherPlayer ~= player then
        otherPlayer.Chatted:Connect(function(message)
            if _G.chatSpyInstance ~= instance then return end
            safeProcessMessage(otherPlayer, message, "All")
        end)
    end
end

Players.PlayerAdded:Connect(function(newPlayer)
    newPlayer.Chatted:Connect(function(message)
        if _G.chatSpyInstance ~= instance then return end
        safeProcessMessage(newPlayer, message, "All")
    end)
end)

-- Initial status
displaySystemMessage("{SPY} " .. (Config.enabled and "ENABLED" or "DISABLED"))
