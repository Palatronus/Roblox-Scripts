-- ROBLOX CHAT SPY (2025 STANDARD)  
local Players = game:GetService("Players")  
local TextChatService = game:GetService("TextChatService")  
local player = Players.LocalPlayer  

-- Configuration  
local Config = {  
    enabled = true,  
    spyOnMyself = true,  
    public = false,  
    publicItalics = true  
}  

-- Instance tracking to prevent conflicts  
local instance = (_G.chatSpyInstance or 0) + 1  
_G.chatSpyInstance = instance  

-- Get channels safely  
local textChannels = TextChatService:WaitForChild("TextChannels")  
local systemChannel = textChannels:WaitForChild("RBXSystem")  
local generalChannel = textChannels:WaitForChild("RBXGeneral")  

-- Status update using 2025 system messages :cite[3]:cite[4]  
local function updateStatus()  
    systemChannel:DisplaySystemMessage(  
        "<font color='#00FFFF'>[SPY " .. (Config.enabled and "ENABLED" or "DISABLED") .. "]</font>"  
    )  
end  

-- Command handler via Chatted event  
player.Chatted:Connect(function(message)  
    if string.lower(message) == "/spy" then  
        Config.enabled = not Config.enabled  
        updateStatus()  
    end  
end)  

-- Core spy logic :cite[1]:cite[7]  
TextChatService.MessageReceived:Connect(function(message)  
    if not Config.enabled or _G.chatSpyInstance ~= instance then return end  

    local textSource = message.TextSource  
    if not textSource then return end  

    -- Identify private messages by channel :cite[1]:cite[4]  
    local channel = message:GetAttribute("ChatChannel")  
    local channelName = channel and channel.Name or ""  
    local isPrivate = (channelName == "RBXWhisper" or channelName == "RBXTeam")  
    local isLocalPlayer = textSource.UserId == player.UserId  

    if isPrivate and (Config.spyOnMyself or not isLocalPlayer) then  
        local msgContent = message.Text  
        local senderName = textSource.DisplayName or textSource.Name  

        if Config.public then  
            -- Prevent recursion with unique marker :cite[8]  
            if not msgContent:find("{SPY}") then  
                local formatted = Config.publicItalics and "/me " or ""  
                formatted = formatted .. "{SPY} [" .. senderName .. "]: " .. msgContent  
                generalChannel:SendAsync(formatted)  
            end  
        else  
            -- System message with HTML formatting :cite[3]:cite[4]  
            systemChannel:DisplaySystemMessage(  
                "<font color='#00FFFF'>[SPY] [" .. senderName .. "]: " .. msgContent .. "</font>"  
            )  
        end  
    end  
end)  

-- Initialize  
updateStatus()  
print("Chat Spy Active | Type '/spy' to toggle")  
