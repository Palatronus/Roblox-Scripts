print("-- Chat Spy Executed v3.1 --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Config
Config = {
    enabled = true,
    spyOnMyself = false
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- System message formatting
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#00FFFF"><b>%s</b></font>',
            text
        )
    )
end

-- Message tracker for spam prevention
local messageTracker = {}
local TRACKER_TTL = 0.05 -- 50ms ultra-fast spam protection

-- Core message processing
local function processPrivateMessage(speaker, message, msgType)
    if not Config.enabled then return end
    if speaker == player and not Config.spyOnMyself then return end
    
    -- Spam protection
    local signature = speaker.UserId .. ":" .. message
    local now = tick()
    if messageTracker[signature] and (now - messageTracker[signature] < TRACKER_TTL) then
        return
    end
    messageTracker[signature] = now
    
    -- Clean and display
    local cleanMsg = message:gsub("[\n\r]", ""):gsub("\t", " "):gsub(" +", " ")
    displaySystemMessage("{SPY} [" .. speaker.Name .. "]: " .. cleanMsg)
end

-- Command handling
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    if string.sub(message:lower(), 1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        displaySystemMessage("{SPY} " .. (Config.enabled and "ENABLED" or "DISABLED"))
        params.Text = ""
        return
    end
end)

-- Primary whisper detection through player Chatted events
local function handlePlayerChatted(speaker, message)
    if _G.chatSpyInstance ~= instance then return end
    if not Config.enabled then return end
    
    -- Whisper detection
    if message:sub(1,3):lower() == "/w " then
        processPrivateMessage(speaker, message, "WHISPER")
    -- Command detection
    elseif message:sub(1,1) == "/" and message:sub(1,4):lower() ~= "/spy" then
        processPrivateMessage(speaker, message, "COMMAND")
    end
end

-- Monitor all players
for _, otherPlayer in ipairs(Players:GetPlayers()) do
    otherPlayer.Chatted:Connect(function(msg)
        handlePlayerChatted(otherPlayer, msg)
    end)
end

Players.PlayerAdded:Connect(function(newPlayer)
    newPlayer.Chatted:Connect(function(msg)
        handlePlayerChatted(newPlayer, msg)
    end)
end)

-- Handle own messages
player.Chatted:Connect(function(rawMessage)
    if _G.chatSpyInstance ~= instance then return end
    if not Config.enabled then return end
    if not Config.spyOnMyself then return end
    handlePlayerChatted(player, rawMessage)
end)

-- Fallback for team chat via TextChatService
TextChatService.MessageReceived:Connect(function(message)
    if _G.chatSpyInstance ~= instance then return end
    if not Config.enabled then return end
    if not message.TextSource then return end
    
    local channel = message.TextChannel and message.TextChannel.Name
    if channel == "RBXTeam" then
        local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
        if speaker then
            processPrivateMessage(speaker, message.Text, "TEAM")
        end
    end
end)

-- Initial status
displaySystemMessage("{SPY} " .. (Config.enabled and "ENABLED" or "DISABLED"))
