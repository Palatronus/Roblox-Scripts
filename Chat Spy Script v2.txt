print("-- Chat Spy Executed --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Config
Config = {
    enabled = true,
    spyOnMyself = true,
    public = false,
    publicItalics = true
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- System message formatting
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#00FFFF"><b>%s</b></font>',
            text
        )
    )
end

-- Core message processing
local function processPrivateMessage(speaker, rawMessage, channel)
    if not Config.enabled then return end
    if not speaker then return end
    if speaker == player and not Config.spyOnMyself then return end
    
    -- Clean message
    local cleanMsg = rawMessage:gsub("[\n\r]", ""):gsub("\t", " "):gsub(" +", " ")
    
    -- Determine if it's a team message
    local isTeamMessage = type(channel) == "string" and channel:find("Team$") ~= nil
    
    if Config.public then
        local prefix = Config.publicItalics and "/me " or ""
        local spyTag = isTeamMessage and "{TEAM SPY}" or "{SPY}"
        local formatted = prefix .. spyTag .. " [" .. speaker.Name .. "]: " .. cleanMsg
        TextChatService.TextChannels.RBXGeneral:SendAsync(formatted)
    else
        local spyTag = isTeamMessage and "{TEAM SPY}" or "{SPY}"
        displaySystemMessage(spyTag .. " [" .. speaker.Name .. "]: " .. cleanMsg)
    end
end

-- Main message handler using supported events
local function handleIncomingMessage(speaker, rawMessage, channel)
    if _G.chatSpyInstance ~= instance then return end
    if not Config.enabled then return end
    if not speaker then return end
    if speaker == player and not Config.spyOnMyself then return end
    
    -- Skip public messages
    if channel == "RBXGeneral" or channel == "All" then return end
    
    -- Process private messages
    processPrivateMessage(speaker, rawMessage, channel)
end

-- Modern chat handler
TextChatService.MessageReceived:Connect(function(message)
    if not message.TextSource then return end
    local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
    if speaker then
        local channel = message.TextChannel and message.TextChannel.Name or "Unknown"
        handleIncomingMessage(speaker, message.Text, channel)
    end
end)

-- Legacy chat support
local function setupLegacyHook()
    local chatEvents = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
    if not chatEvents then return false end
    
    local onMessageDone = chatEvents:FindFirstChild("OnMessageDoneFiltering")
    if not onMessageDone then return false end
    
    onMessageDone.OnClientEvent:Connect(function(messageData)
        if not messageData.FromSpeaker then return end
        local speaker = Players:GetPlayerByUserId(messageData.FromSpeaker)
        if speaker then
            handleIncomingMessage(speaker, messageData.Message, messageData.OriginalChannel)
        end
    end)
    return true
end

setupLegacyHook()

-- Command handling
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    if string.sub(message:lower(), 1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
        params.Text = ""
        return
    end
end)

-- Handle all player messages
for _, otherPlayer in ipairs(Players:GetPlayers()) do
    if otherPlayer ~= player then
        otherPlayer.Chatted:Connect(function(message)
            -- Determine channel for Chatted events
            local channel = "All"
            if message:sub(1,3):lower() == "/w " then
                channel = "RBXWhisper"
            elseif message:sub(1,1) == "/" then
                channel = "Command"
            end
            handleIncomingMessage(otherPlayer, message, channel)
        end)
    end
end

Players.PlayerAdded:Connect(function(newPlayer)
    newPlayer.Chatted:Connect(function(message)
        -- Determine channel for Chatted events
        local channel = "All"
        if message:sub(1,3):lower() == "/w " then
            channel = "RBXWhisper"
        elseif message:sub(1,1) == "/" then
            channel = "Command"
        end
        handleIncomingMessage(newPlayer, message, channel)
    end)
end)

-- Handle own messages
player.Chatted:Connect(function(rawMessage)
    if not Config.enabled then return end
    if not Config.spyOnMyself then return end
    
    -- Determine channel
    local channel = "All"
    if rawMessage:sub(1,3):lower() == "/w " then
        channel = "RBXWhisper"
    elseif rawMessage:sub(1,1) == "/" then
        channel = "Command"
    end
    processPrivateMessage(player, rawMessage, channel)
end)

-- Initial status
displaySystemMessage("{SPY SYSTEM ACTIVE}")
displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
