print("-- Chat Spy Executed --")
print("Type \"spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Config
Config = {
    enabled = true,
    spyOnMyself = true,
    public = false,
    publicItalics = true
}

-- Chat formatting
PrivateProperties = {
    Color = Color3.fromRGB(0,255,255),
    Font = Enum.Font.SourceSansBold,
    TextSize = 18
}

local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local player = Players.LocalPlayer
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Core chat monitoring function
local function processMessage(speaker, message, channel)
    if _G.chatSpyInstance ~= instance then return end
    if not Config.enabled then return end
    if speaker == player and not Config.spyOnMyself then return end
    
    -- Format message based on configuration
    local cleanMessage = message:gsub("[\n\r]",''):gsub("\t",' '):gsub("[ ]+",' ')
    
    if Config.public then
        local text = (Config.publicItalics and "/me " or '').."{SPY} [".. speaker.Name .."]: "..cleanMessage
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync(text)
    else
        PrivateProperties.Text = "{SPY} [".. speaker.Name .."]: "..cleanMessage
        StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
    end
end

-- Hook into legacy chat system (works for private/team messages)
local function setupLegacyHook()
    local chatEvents = game:GetService("ReplicatedStorage"):FindFirstChild("DefaultChatSystemChatEvents")
    if not chatEvents then return false end
    
    local onMessageDone = chatEvents:FindFirstChild("OnMessageDoneFiltering")
    if onMessageDone then
        onMessageDone.OnClientEvent:Connect(function(messageData)
            if messageData.FromSpeaker and messageData.Message then
                local speaker = Players:GetPlayerByUserId(messageData.FromSpeaker)
                if speaker then
                    processMessage(speaker, messageData.Message, messageData.OriginalChannel)
                end
            end
        end)
        return true
    end
    return false
end

-- Hook into TextChatService (fallback)
local function setupTextChatHook()
    local success, event = pcall(function()
        return game:GetService("TextChatService").MessageReceived
    end)
    
    if success and event then
        event:Connect(function(message)
            if message.TextSource then
                local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
                if speaker then
                    processMessage(speaker, message.Text, message.TextChannel and message.TextChannel.Name or "Unknown")
                end
            end
        end)
        return true
    end
    return false
end

-- Main toggle handler
player.Chatted:Connect(function(message)
    if _G.chatSpyInstance ~= instance then return end
    if message:lower():sub(1,4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        PrivateProperties.Text = "{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}"
        StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
    end
end)

-- Initialize chat hooks
if not setupLegacyHook() then
    setupTextChatHook()
end

-- Initial status message
PrivateProperties.Text = "{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}"
StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
