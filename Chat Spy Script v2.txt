print("-- Chat Spy Executed --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Config
Config = {
    enabled = true,
    spyOnMyself = true,
    public = false,
    publicItalics = true
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- System message formatting
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#00FFFF"><b>%s</b></font>',
            text
        )
    )
end

-- Unified message processing
local function shouldProcessMessage(speaker, channel)
    if not Config.enabled then return false end
    if speaker == player and not Config.spyOnMyself then return false end
    
    -- Always skip public channels
    if channel == "RBXGeneral" or channel == "All" then return false end
    
    -- Process private channels
    return true
end

local function processMessage(speaker, rawMessage, channel)
    if not shouldProcessMessage(speaker, channel) then return end
    
    -- Clean message
    local cleanMsg = rawMessage:gsub("[\n\r]", ""):gsub("\t", " "):gsub(" +", " ")
    
    -- Determine if team chat
    local isTeamChat = type(channel) == "string" and channel:find("Team$") ~= nil
    
    if Config.public then
        local prefix = Config.publicItalics and "/me " or ""
        local spyTag = isTeamChat and "{TEAM SPY}" or "{SPY}"
        local formatted = prefix .. spyTag .. " [" .. speaker.Name .. "]: " .. cleanMsg
        TextChatService.TextChannels.RBXGeneral:SendAsync(formatted)
    else
        local spyTag = isTeamChat and "{TEAM SPY}" or "{SPY}"
        displaySystemMessage(spyTag .. " [" .. speaker.Name .. "]: " .. cleanMsg)
    end
end

-- Modern chat hook (TextChatService)
local function setupTextChatHook()
    TextChatService.MessageReceived:Connect(function(message)
        if _G.chatSpyInstance ~= instance then return end
        if not message.TextSource then return end
        
        local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
        if not speaker then return end
        
        local channel = message.TextChannel and message.TextChannel.Name or "Unknown"
        
        -- Skip public messages
        if channel == "RBXGeneral" then return end
        
        processMessage(speaker, message.Text, channel)
    end)
    return true
end

-- Legacy chat hook (ReplicatedStorage)
local function setupLegacyChatHook()
    local chatEvents = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
    if not chatEvents then return false end
    
    local onMessageDone = chatEvents:FindFirstChild("OnMessageDoneFiltering")
    if not onMessageDone then return false end
    
    onMessageDone.OnClientEvent:Connect(function(messageData)
        if _G.chatSpyInstance ~= instance then return end
        if not messageData.FromSpeaker then return end
        
        local speaker = Players:GetPlayerByUserId(messageData.FromSpeaker)
        if not speaker then return end
        
        -- Skip public messages
        if messageData.OriginalChannel == "RBXGeneral" then return end
        
        processMessage(
            speaker,
            messageData.Message,
            messageData.OriginalChannel
        )
    end)
    return true
end

-- Own message handler
local function setupOwnMessageHook()
    player.Chatted:Connect(function(rawMessage)
        if _G.chatSpyInstance ~= instance then return end
        
        local channel = "All"
        if rawMessage:sub(1,3):lower() == "/w " then
            channel = "RBXWhisper"
        elseif rawMessage:sub(1,1) == "/" then
            channel = "Command"
        end
        
        processMessage(player, rawMessage, channel)
    end)
end

-- Command handling
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    if string.sub(message:lower(), 1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
        params.Text = ""
        return
    end
end)

-- Initialize chat hooks
if setupLegacyChatHook() then
    displaySystemMessage("{SPY LEGACY HOOK ACTIVE}")
elseif setupTextChatHook() then
    displaySystemMessage("{SPY MODERN HOOK ACTIVE}")
else
    -- Fallback to player Chatted events
    for _, otherPlayer in ipairs(Players:GetPlayers()) do
        if otherPlayer ~= player then
            otherPlayer.Chatted:Connect(function(message)
                if _G.chatSpyInstance ~= instance then return end
                -- Skip obvious public messages
                if not message:find("^%/") then return end
                processMessage(otherPlayer, message, "All")
            end)
        end
    end
    
    Players.PlayerAdded:Connect(function(newPlayer)
        newPlayer.Chatted:Connect(function(message)
            if _G.chatSpyInstance ~= instance then return end
            if not message:find("^%/") then return end
            processMessage(newPlayer, message, "All")
        end)
    end)
    displaySystemMessage("{SPY USING FALLBACK HOOK}")
end

-- Setup own message hook
setupOwnMessageHook()

-- Initial status
displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
