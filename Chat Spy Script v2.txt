print("-- Chat Spy Executed --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Config
Config = {
    enabled = true,
    spyOnMyself = true,
    public = false,
    publicItalics = true
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local Chat = game:GetService("Chat")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- System message formatting
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#00FFFF"><b>%s</b></font>',
            text
        )
    )
end

-- Core message processing
local function processMessage(speaker, rawMessage, channel)
    if not Config.enabled then return end
    if speaker == player and not Config.spyOnMyself then return end
    if channel == "RBXGeneral" and not Config.public then return end
    
    -- Clean and format message
    local cleanMsg = rawMessage:gsub("[\n\r]", ""):gsub("\t", " "):gsub(" +", " ")
    
    if Config.public then
        local formatted = (Config.publicItalics and "/me " or "") .. "{SPY} [" .. speaker.Name .. "]: " .. cleanMsg
        TextChatService.TextChannels.RBXGeneral:SendAsync(formatted)
    else
        displaySystemMessage("{SPY} [" .. speaker.Name .. "]: " .. cleanMsg)
    end
end

-- Hook into pre-filter message pipeline
local function createChatHook()
    local chatEvents = game:GetService("ReplicatedStorage"):FindFirstChild("DefaultChatSystemChatEvents")
    if not chatEvents then return end
    
    local onMessageDone = chatEvents:FindFirstChild("OnMessageDoneFiltering")
    if onMessageDone then
        onMessageDone.OnClientEvent:Connect(function(messageData)
            if _G.chatSpyInstance ~= instance then return end
            if not messageData.FromSpeaker then return end
            
            local speaker = Players:GetPlayerByUserId(messageData.FromSpeaker)
            if speaker then
                processMessage(
                    speaker,
                    messageData.Message,
                    messageData.OriginalChannel
                )
            end
        end)
        return true
    end
    return false
end

-- Command handling
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    if string.sub(message:lower(), 1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
        params.Text = ""
        return
    end
    
    -- Process own messages through legacy system
    if Config.enabled and Config.spyOnMyself then
        processMessage(player, message, "All")
    end
end)

-- Initialize chat hooks
if createChatHook() then
    displaySystemMessage("{SPY SYSTEM HOOKED}")
else
    -- Fallback to TextChatService
    TextChatService.MessageReceived:Connect(function(message)
        if _G.chatSpyInstance ~= instance then return end
        if not message.TextSource then return end
        
        local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
        if speaker then
            local channel = message.TextChannel and message.TextChannel.Name or "Unknown"
            processMessage(speaker, message.Text, channel)
        end
    end)
    displaySystemMessage("{SPY USING FALLBACK}")
end

-- Initial status
displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
