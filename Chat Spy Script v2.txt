-- Modern Chat Spy with TextChatService
print("-- Chat Spy Executed --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Config (preserved from original)
Config = {
    enabled = true,
    spyOnMyself = true,
    public = false,
    publicItalics = true
}

-- Customizing Log Output (preserved from original)
PrivateProperties = {
    Color = Color3.fromRGB(0,255,255),
    Font = Enum.Font.SourceSansBold,
    TextSize = 18,
}

local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- System message formatting using TextChatService
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#%02X%02X%02X"><b>%s</b></font>',
            PrivateProperties.Color.R * 255,
            PrivateProperties.Color.G * 255,
            PrivateProperties.Color.B * 255,
            text
        )
    )
end

-- Core message processing (updated for TextChatService)
local function processMessage(speaker, message, channel)
    if not Config.enabled then return end
    if speaker == player and not Config.spyOnMyself then return end
    
    -- Skip public messages
    if channel == "RBXGeneral" then return end
    
    -- Clean message (preserved from original)
    local cleanMsg = message:gsub("[\n\r]", ""):gsub("\t", " "):gsub(" +", " ")
    
    if Config.public then
        local formatted = (Config.publicItalics and "/me " or "") .. "{SPY} [" .. speaker.Name .. "]: " .. cleanMsg
        TextChatService.TextChannels.RBXGeneral:SendAsync(formatted)
    else
        displaySystemMessage("{SPY} [" .. speaker.Name .. "]: " .. cleanMsg)
    end
end

-- Main message handler using TextChatService
TextChatService.MessageReceived:Connect(function(message)
    if _G.chatSpyInstance ~= instance then return end
    if not message.TextSource then return end
    
    local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
    if not speaker then return end
    
    local channel = message.TextChannel and message.TextChannel.Name or "Unknown"
    processMessage(speaker, message.Text, channel)
end)

-- Handle own commands and messages
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    
    -- Toggle command (preserved from original)
    if message:lower():sub(1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        params.Text = ""
        task.delay(0.3, function()
            displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
        end)
        return
    end
    
    -- Process own messages if enabled
    if Config.enabled and Config.spyOnMyself then
        local channel = "All"
        if message:sub(1,3):lower() == "/w " then
            channel = "RBXWhisper"
        elseif message:sub(1,1) == "/" then
            channel = "Command"
        end
        processMessage(player, message, channel)
    end
end)

-- Player connections (preserved from original)
for _, p in ipairs(Players:GetPlayers()) do
    p.Chatted:Connect(function(msg)
        if _G.chatSpyInstance ~= instance then return end
        local channel = "All"
        if msg:sub(1,3):lower() == "/w " then
            channel = "RBXWhisper"
        end
        processMessage(p, msg, channel)
    end)
end

Players.PlayerAdded:Connect(function(p)
    p.Chatted:Connect(function(msg)
        if _G.chatSpyInstance ~= instance then return end
        local channel = "All"
        if msg:sub(1,3):lower() == "/w " then
            channel = "RBXWhisper"
        end
        processMessage(p, msg, channel)
    end)
end)

-- Initial status (preserved from original)
displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")

-- Ensure chat UI is visible (preserved from original)
task.spawn(function()
    repeat task.wait() until player.PlayerGui:FindFirstChild("Chat")
    local chatFrame = player.PlayerGui:WaitForChild("Chat"):WaitForChild("Frame")
    chatFrame.ChatChannelParentFrame.Visible = true
    chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position + UDim2.new(UDim.new(), chatFrame.ChatChannelParentFrame.Size.Y)
end)
