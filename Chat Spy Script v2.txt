--[[
	Ultimate Chat Spy (2025)
	Type "/spy" to toggle
	Works with all Roblox chat systems
--]]

-- Services
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Wait for player
local player = Players.LocalPlayer or Players.PlayerAdded:Wait()

-- Config
local Config = {
    enabled = true,
    spyOnMyself = true,
    public = false,
    publicItalics = true,
    filterCommands = true
}

-- Message appearance
local PrivateProperties = {
    Color = Color3.fromRGB(0, 255, 255),
    Font = Enum.Font.SourceSansBold,
    TextSize = 18
}

-- Anti-duplication
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Safe messaging function
local function safeMessage(text)
    pcall(function()
        PrivateProperties.Text = text
        StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
    end)
end

-- Try modern TextChatService approach
local function setupModernChatSpy()
    TextChatService.OnIncomingMessage = function(message)
        -- Skip if disabled
        if not Config.enabled then return true end
        
        -- Process messages
        local text = message.Text or ""
        local channel = message.TextChannel
        
        -- Detect private channels
        local isPrivate = channel and (channel.Name == "RBXWhisper" or channel.Name == "RBXTeam")
        
        if isPrivate and text ~= "" then
            -- Filter commands
            if Config.filterCommands and text:match("^%/%w+") then 
                return true 
            end

            -- Identify speaker
            local speaker = message.TextSource
            local playerName = speaker and Players:GetPlayerByUserId(speaker.UserId)?.Name or "System"
            
            -- Skip own messages
            if playerName == player.Name and not Config.spyOnMyself then
                return true
            end

            -- Clean text
            local cleanText = text:gsub("[\n\r]", ""):gsub("\t", " "):gsub("%s+", " ")
            
            -- Output handling
            task.defer(function()
                if Config.public then
                    local prefix = Config.publicItalics and "/me " or ""
                    local formatted = prefix .. "{SPY} [".. playerName .."]: " .. cleanText
                    pcall(function()
                        TextChatService.TextChannels.RBXGeneral:SendAsync(formatted)
                    end)
                else
                    safeMessage("{SPY} [".. playerName .."]: " .. cleanText)
                end
            end)
        end
        return true
    end
    return true
end

-- Legacy chat system fallback
local function setupLegacyChatSpy()
    local function onMessageFiltered(message, recipient, channel)
        if not Config.enabled then return end
        
        -- Detect private messages
        local isPrivate = channel == "Whisper" or channel == "Team"
        
        if isPrivate then
            -- Identify speaker
            local speaker = Players:FindFirstChild(message.FromSpeaker)
            if not speaker then return end
            
            -- Skip own messages
            if speaker == player and not Config.spyOnMyself then
                return
            end
            
            -- Filter commands
            local text = message.Message or ""
            if Config.filterCommands and text:match("^%/%w+") then 
                return 
            end
            
            -- Output handling
            task.defer(function()
                safeMessage("{SPY} [".. speaker.Name .."]: " .. text)
            end)
        end
    end

    -- Connect to legacy system 
    local events = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
    if events then
        local filteredEvent = events:FindFirstChild("OnMessageDoneFiltering")
        if filteredEvent then
            filteredEvent.OnClientEvent:Connect(onMessageFiltered)
            return true
        end
    end
    return false
end

-- Main initialization
local function initializeChatSpy()
    -- Try modern approach first
    local modernSuccess = pcall(setupModernChatSpy)
    
    -- Fallback to legacy if modern fails
    if not modernSuccess then
        local legacySuccess = pcall(setupLegacyChatSpy)
        if not legacySuccess then
            safeMessage("{SPY ERROR: No chat system detected}")
            return
        end
    end
    
    -- Command handler
    player.Chatted:Connect(function(msg)
        if msg:lower():sub(1,4) == "/spy" then
            Config.enabled = not Config.enabled
            task.wait(0.3)
            safeMessage("{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}")
        end
    end)

    -- Initial status
    safeMessage("{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}")
end

-- Start everything safely
pcall(initializeChatSpy)
