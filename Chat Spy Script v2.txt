-- ROBLOX CHAT SPY (CLIENT-SIDE) - VERIFIED SOLUTION
local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local StarterGui = game:GetService("StarterGui")
local player = Players.LocalPlayer

-- Configuration
local Config = {
    enabled = true,
    spyOnMyself = true,
    public = false
}

-- Track active instance
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Toggle spy status
local function updateStatus()
    StarterGui:SetCore("ChatMakeSystemMessage", {
        Text = "[SPY "..(Config.enabled and "ENABLED" or "DISABLED").."]",
        Color = Color3.fromRGB(0, 255, 255),
        Font = Enum.Font.SourceSansBold,
        TextSize = 18
    })
end

-- Command handler
player.Chatted:Connect(function(message)
    if string.lower(message) == "/spy" then
        Config.enabled = not Config.enabled
        updateStatus()
    end
end)

-- Main message handler (FIXED CALLBACK)
TextChatService.OnIncomingMessage = function(message)
    -- 1. Always return valid TextChatMessageProperties :cite[1]:cite[3]
    local properties = Instance.new("TextChatMessageProperties")
    
    -- 2. Minimal properties to prevent chat breakage
    properties.Text = message.Text
    properties.TextColor3 = Color3.new(1, 1, 1)
    
    -- 3. Only process if spy active
    if Config.enabled and _G.chatSpyInstance == instance then
        local textSource = message.TextSource
        if textSource then
            -- 4. Safe channel detection
            local channel = message:GetAttribute("ChatChannel")
            local channelName = channel and channel.Name or ""
            
            -- 5. Identify private channels (whispers/team) :cite[3]
            local isPrivate = (channelName == "RBXWhisper" or channelName == "RBXTeam")
            local isLocalPlayer = textSource.UserId == player.UserId
            
            if isPrivate and (Config.spyOnMyself or not isLocalPlayer) then
                local msgContent = message.Text or ""
                local senderName = textSource.Name or "Unknown"
                
                -- 6. Output handling
                if Config.public then
                    task.spawn(function()
                        -- Use legacy method for compatibility
                        game:GetService("ReplicatedStorage")
                            :WaitForChild("DefaultChatSystemChatEvents")
                            :WaitForChild("SayMessageRequest")
                            :FireServer("[SPY] ["..senderName.."]: "..msgContent, "All")
                    end)
                else
                    StarterGui:SetCore("ChatMakeSystemMessage", {
                        Text = "[SPY] ["..senderName.."]: "..msgContent,
                        Color = Color3.fromRGB(0, 255, 255),
                        Font = Enum.Font.SourceSansBold,
                        TextSize = 18
                    })
                end
            end
        end
    end
    
    return properties -- ESSENTIAL to prevent errors :cite[1]
end

-- Initial status
updateStatus()
print("Chat Spy Activated - Type /spy to toggle")
