--[[
	Working Chat Spy (August 2025)
	Type "/spy" to toggle
	Captures whispers, team chat, and commands
--]]

-- Services
local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local StarterGui = game:GetService("StarterGui")

-- Get player safely
local player = Players.LocalPlayer
if not player then
    Players.PlayerAdded:Wait()
    player = Players.LocalPlayer
end

-- Config with default values
local Config = {
    enabled = true,
    spyOnMyself = false,      -- Don't show own messages
    public = false,           -- Don't broadcast publicly
    publicItalics = true,     -- Italics for public messages
    filterCommands = false    -- Show command messages
}

-- Message appearance
local MessageProperties = {
    Color = Color3.fromRGB(0, 255, 255),  -- Cyan
    Font = Enum.Font.SourceSansBold,
    TextSize = 18
}

-- Create status message immediately
StarterGui:SetCore("ChatMakeSystemMessage", {
    Text = "CHAT SPY INITIALIZED",
    Color = Color3.new(0, 1, 1),
    Font = Enum.Font.SourceSansBold,
    TextSize = 18
})

-- Anti-duplication
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Send status to chat
local function showStatus()
    StarterGui:SetCore("ChatMakeSystemMessage", {
        Text = "{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}",
        Color = MessageProperties.Color,
        Font = MessageProperties.Font,
        TextSize = MessageProperties.TextSize
    })
end

-- Process all chat messages
local function handleMessage(message)
    -- Skip if disabled or wrong instance
    if not Config.enabled or _G.chatSpyInstance ~= instance then
        return
    end
    
    -- Get channel and text
    local channel = message.TextChannel
    local text = message.Text or ""
    
    -- Skip non-private messages
    if not channel or not (channel.Name == "RBXWhisper" or channel.Name == "RBXTeam") then
        return
    end
    
    -- Skip empty messages
    if text == "" then
        return
    end
    
    -- Skip commands if filtering enabled
    if Config.filterCommands and text:match("^%/%w+") then
        return
    end
    
    -- Get speaker
    local speaker = message.TextSource
    if not speaker then return end
    
    local speakerPlayer = Players:GetPlayerByUserId(speaker.UserId)
    if not speakerPlayer then return end
    
    -- Skip own messages if disabled
    if speakerPlayer == player and not Config.spyOnMyself then
        return
    end
    
    -- Clean text
    local cleanText = text:gsub("[\n\r]", ""):gsub("\t", " "):gsub("%s+", " ")
    
    -- Create spy message
    local spyMessage = "{SPY} [".. speakerPlayer.Name .."]: " .. cleanText
    
    -- Send to appropriate output
    if Config.public then
        -- Broadcast publicly
        local prefix = Config.publicItalics and "/me " or ""
        task.spawn(function()
            pcall(function()
                TextChatService.TextChannels.RBXGeneral:SendAsync(prefix .. spyMessage)
            end)
        end)
    else
        -- Show private system message
        task.spawn(function()
            StarterGui:SetCore("ChatMakeSystemMessage", {
                Text = spyMessage,
                Color = MessageProperties.Color,
                Font = MessageProperties.Font,
                TextSize = MessageProperties.TextSize
            })
        end)
    end
end

-- Setup message handler
TextChatService.MessageReceived:Connect(handleMessage)

-- Toggle command
player.Chatted:Connect(function(msg)
    if _G.chatSpyInstance ~= instance then return end
    
    if msg:lower():sub(1,4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.5)
        showStatus()
    end
end)

-- Initial status
task.delay(0.5, showStatus)
