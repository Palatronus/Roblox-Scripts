print("-- Chat Spy Executed --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Config
Config = {
    enabled = true,
    spyOnMyself = true,
    public = false,
    publicItalics = true
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- System message formatting
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#00FFFF"><b>%s</b></font>',
            text
        )
    )
end

-- Core message processing with Roblox's metadata
local function processMessage(messageObject)
    if not Config.enabled then return end
    if not messageObject.TextSource then return end
    
    local speaker = Players:GetPlayerByUserId(messageObject.TextSource.UserId)
    if not speaker then return end
    if speaker == player and not Config.spyOnMyself then return end
    
    -- Skip messages that are visible in public chat
    if messageObject.Status == Enum.TextChatMessageStatus.Success then
        return
    end
    
    -- Get clean message content
    local rawMessage = messageObject.Text
    local cleanMsg = rawMessage:gsub("[\n\r]", ""):gsub("\t", " "):gsub(" +", " ")
    
    -- Determine if it's a team message
    local isTeamMessage = messageObject.TextChannel and 
                          messageObject.TextChannel.Name:find("^Team:") ~= nil
    
    if Config.public then
        local prefix = Config.publicItalics and "/me " or ""
        local spyTag = isTeamMessage and "{TEAM SPY}" or "{SPY}"
        local formatted = prefix .. spyTag .. " [" .. speaker.Name .. "]: " .. cleanMsg
        TextChatService.TextChannels.RBXGeneral:SendAsync(formatted)
    else
        local spyTag = isTeamMessage and "{TEAM SPY}" or "{SPY}"
        displaySystemMessage(spyTag .. " [" .. speaker.Name .. "]: " .. cleanMsg)
    end
end

-- Main message interception using Roblox's API
local function setupMessageHook()
    TextChatService.OnIncomingMessage = function(messageObject)
        -- Allow default message processing first
        local shouldDeliver = true
        
        -- Process message through our system
        pcall(function()
            processMessage(messageObject)
        end)
        
        return shouldDeliver
    end
end

-- Command handling
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    if string.sub(message:lower(), 1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
        params.Text = ""
        return
    end
end)

-- Handle own messages separately
player.Chatted:Connect(function(rawMessage)
    if _G.chatSpyInstance ~= instance then return end
    if not Config.enabled then return end
    if not Config.spyOnMyself then return end
    
    -- Only process commands/whispers 
    if rawMessage:sub(1,3):lower() == "/w " or rawMessage:sub(1,1) == "/" then
        -- Create mock message object
        local mockMessage = {
            Text = rawMessage,
            TextSource = {
                UserId = player.UserId
            },
            Status = Enum.TextChatMessageStatus.Private,
            TextChannel = {
                Name = rawMessage:sub(1,3):lower() == "/w " and "RBXWhisper" or "Command"
            }
        }
        processMessage(mockMessage)
    end
end)

-- Initialize the system
setupMessageHook()
displaySystemMessage("{SPY SYSTEM ACTIVE}")
displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
