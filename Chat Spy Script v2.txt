-- ROBLOX CHAT SPY (JULY 2025 FIXED)  
local Players = game:GetService("Players")  
local TextChatService = game:GetService("TextChatService")  
local player = Players.LocalPlayer  

-- 1. INITIALIZE CHANNELS FIRST  
local textChannels = TextChatService:WaitForChild("TextChannels")  
local systemChannel = textChannels:WaitForChild("RBXSystem")  

-- Configuration  
local Config = {  
    enabled = true,  
    spyOnMyself = true,  
    public = false  
}  

-- Track active instance  
local instance = (_G.chatSpyInstance or 0) + 1  
_G.chatSpyInstance = instance  

-- 2. STATUS MESSAGES (FIXED OUTPUT)  
local function updateStatus()  
    systemChannel:DisplaySystemMessage(  
        "<font color='#00FFFF'>[SPY " .. (Config.enabled and "ENABLED" or "DISABLED") .. "]</font>"  
    )  
end  

-- 3. COMMAND HANDLER  
player.Chatted:Connect(function(message)  
    if string.lower(message) == "/spy" then  
        Config.enabled = not Config.enabled  
        updateStatus()  
    end  
end)  

-- 4. PRIVATE MESSAGE DETECTION CORE  
TextChatService.MessageReceived:Connect(function(message)  
    if not Config.enabled or _G.chatSpyInstance ~= instance then return end  

    local textSource = message.TextSource  
    if not textSource then return end  

    -- 5. FIXED CHANNEL CHECK (2025 STANDARD)  
    local channel = message.TextChannel  
    if not channel then return end  
    local channelName = channel.Name  
    local isPrivate = (channelName == "Whisper" or channelName == "Team")  -- ✅ Correct 2025 names :cite[5]:cite[7]  

    -- 6. MANDATORY PRIVACY CHECK (REQUIRED FOR WHISPERS)  
    local canSpy = true  
    if channelName == "Whisper" then  
        canSpy = pcall(function()  
            return #TextChatService:CanUsersDirectChatAsync(player.UserId, {textSource.UserId}) > 0  
        end)  
    end  

    local isLocalPlayer = textSource.UserId == player.UserId  

    -- 7. LOGGING LOGIC (WITH ANTI-FILTER DELAY)  
    if isPrivate and canSpy and (Config.spyOnMyself or not isLocalPlayer) then  
        task.wait(0.2)  -- ⏳ Bypass cascade filtering :cite[3]  
        local msgContent = message.Text  
        local senderName = textSource.DisplayName or textSource.Name  

        -- 8. GUARANTEED OUTPUT (HTML FORMATTING)  
        local spyMessage = "<font color='#00FFFF'>[SPY] ["..senderName.."]: "..msgContent.."</font>"  
        systemChannel:DisplaySystemMessage(spyMessage)  -- ✅ Valid method :cite[1]:cite[5]  
    end  
end)  

-- Initialize  
updateStatus()  
print("✅ Spy Active - Private messages will now log")
