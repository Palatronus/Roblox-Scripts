--[[
	Roblox Chat Spy (2025)
	Type "/spy" to toggle
	Supports both TextChatService and Legacy Chat
--]]

local success, err = pcall(function()
	-- Services
	local TextChatService = game:GetService("TextChatService")
	local Players = game:GetService("Players")
	local StarterGui = game:GetService("StarterGui")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local ChatService = game:GetService("Chat")
	
	-- Detect chat system
	local isModernChat = (TextChatService.ChatVersion == Enum.ChatVersion.TextChat)
	local isLegacyChat = not isModernChat and ChatService:FindFirstChild("ChatService") ~= nil

	-- Exit if no chat system detected
	if not isModernChat and not isLegacyChat then
		error("No compatible chat system found")
	end

	-- Wait for player
	local player = Players.LocalPlayer
	while not player do
		task.wait()
		player = Players.LocalPlayer
	end

	-- Config
	local Config = {
		enabled = true,
		spyOnMyself = false,
		public = false,
		publicItalics = true,
		filterCommands = false
	}

	-- Message appearance
	local PrivateProperties = {
		Color = Color3.fromRGB(0, 255, 255),
		Font = Enum.Font.SourceSansBold,
		TextSize = 18
	}

	-- Anti-duplication
	local instance = (_G.chatSpyInstance or 0) + 1
	_G.chatSpyInstance = instance

	-- Safe messaging function
	local function safeMessage(text)
		pcall(function()
			PrivateProperties.Text = text
			StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
		end)
	end

	-- ===== Modern Chat Handler ===== --
	if isModernChat then
		TextChatService.OnIncomingMessage = function(message)
			-- Skip if disabled
			if not Config.enabled then return true end
			
			-- Process messages
			local text = message.Text or ""
			local channel = message.TextChannel
			
			-- Detect private channels :cite[2]
			local isPrivate = channel and (channel.Name == "RBXWhisper" or channel.Name == "RBXTeam")
			
			if isPrivate and text ~= "" then
				-- Filter commands
				if Config.filterCommands and text:match("^%/%w+") then 
					return true 
				end

				-- Identify speaker
				local speaker = message.TextSource
				local playerName = speaker and Players:GetPlayerByUserId(speaker.UserId)?.Name or "System"
				
				-- Skip own messages
				if playerName == player.Name and not Config.spyOnMyself then
					return true
				end

				-- Clean text
				local cleanText = text:gsub("[\n\r]", ""):gsub("\t", " "):gsub("%s+", " ")
				
				-- Output handling
				task.defer(function()
					if Config.public then
						local prefix = Config.publicItalics and "/me " or ""
						local formatted = prefix .. "{SPY} [".. playerName .."]: " .. cleanText
						pcall(function()
							TextChatService.TextChannels.RBXGeneral:DisplaySystemMessage(formatted)
						end)
					else
						safeMessage("{SPY} [".. playerName .."]: " .. cleanText)
					end
				end)
			end
			return true
		end
	end

	-- ===== Legacy Chat Handler ===== --
	if isLegacyChat then
		local function onMessageFiltered(message, recipient, channel)
			if _G.chatSpyInstance ~= instance or not Config.enabled then return end
			
			-- Detect private messages
			local isPrivate = channel == "Whisper" or channel == "Team"
			
			if isPrivate then
				-- Identify speaker
				local speaker = Players:FindFirstChild(message.FromSpeaker)
				if not speaker then return end
				
				-- Skip own messages
				if speaker == player and not Config.spyOnMyself then
					return
				end
				
				-- Output handling
				task.defer(function()
					safeMessage("{SPY} [".. speaker.Name .."]: " .. message.Message)
				end)
			end
		end

		-- Connect to legacy system :cite[1]
		ReplicatedStorage:WaitForChild("DefaultChatSystemChatEvents")
			:WaitForChild("OnMessageDoneFiltering")
			.OnClientEvent:Connect(onMessageFiltered)
	end

	-- ===== Toggle Command ===== --
	player.Chatted:Connect(function(msg)
		if _G.chatSpyInstance ~= instance then return end
		if msg:lower():sub(1,4) == "/spy" then
			Config.enabled = not Config.enabled
			task.wait(0.3)
			safeMessage("{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}")
		end
	end)

	-- Initial status
	safeMessage("{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}")
end)

-- Error handling
if not success then
	warn("Chat Spy Error: "..tostring(err))
end
