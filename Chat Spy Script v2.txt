print("-- Chat Spy Executed --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Config (removed public-related settings)
Config = {
    enabled = true,
    spyOnMyself = false
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Ultra-fast message tracking
local messageTracker = {}
local TRACKER_TTL = 0.05  -- 50ms for high-volume spam

-- System message formatting
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#00FFFF"><b>%s</b></font>',
            text
        )
    )
end

-- Core message processing
local function processMessage(speaker, message, channel)
    if not Config.enabled then return end
    if speaker == player and not Config.spyOnMyself then return end
    
    -- Create unique signature for spam prevention
    local signature = speaker.UserId .. ":" .. message
    local now = tick()
    
    -- Ultra-fast duplicate prevention
    if messageTracker[signature] and (now - messageTracker[signature] < TRACKER_TTL) then
        return
    end
    messageTracker[signature] = now
    
    -- Clean message
    local cleanMsg = message:gsub("[\n\r]", ""):gsub("\t", " "):gsub(" +", " ")
    displaySystemMessage("{SPY} [" .. speaker.Name .. "]: " .. cleanMsg)
end

-- Handle own messages
local function setupOwnMessageHook()
    player.Chatted:Connect(function(rawMessage)
        if _G.chatSpyInstance ~= instance then return end
        if not Config.enabled then return end
        if not Config.spyOnMyself then return end
        
        -- Only process private messages (whispers and commands)
        if rawMessage:sub(1,3):lower() == "/w " then
            processMessage(player, rawMessage, "RBXWhisper")
        elseif rawMessage:sub(1,1) == "/" then
            processMessage(player, rawMessage, "Command")
        end
    end)
end

-- Primary message handler
TextChatService.MessageReceived:Connect(function(message)
    if _G.chatSpyInstance ~= instance then return end
    if not message.TextSource then return end
    
    local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
    if speaker then
        local channel = message.TextChannel and message.TextChannel.Name or "Unknown"
        -- Only process private channels
        if channel == "RBXWhisper" or channel == "RBXTeam" then
            processMessage(speaker, message.Text, channel)
        end
    end
end)

-- Command handling
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    if string.sub(message:lower(), 1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
        params.Text = ""
        return
    end
end)

-- Setup own message hook
setupOwnMessageHook()

-- Player connections for whispers
for _, otherPlayer in ipairs(Players:GetPlayers()) do
    if otherPlayer ~= player then
        otherPlayer.Chatted:Connect(function(message)
            if _G.chatSpyInstance ~= instance then return end
            if message:sub(1,3):lower() == "/w " then
                processMessage(otherPlayer, message, "RBXWhisper")
            end
        end)
    end
end

Players.PlayerAdded:Connect(function(newPlayer)
    newPlayer.Chatted:Connect(function(message)
        if _G.chatSpyInstance ~= instance then return end
        if message:sub(1,3):lower() == "/w " then
            processMessage(newPlayer, message, "RBXWhisper")
        end
    end)
end)

-- Initial status
displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
displaySystemMessage("{SPY HOOK ACTIVE}")
