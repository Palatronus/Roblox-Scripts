-- ROBLOX CHAT SPY (CLIENT-SIDE) - VERIFIED WORKING
local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local StarterGui = game:GetService("StarterGui")
local player = Players.LocalPlayer

-- Configuration
local Config = {
    enabled = true,
    spyOnMyself = true,
    public = false
}

-- Track active instance
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Message styling
local SpyMessageProperties = {
    Color = Color3.fromRGB(0, 255, 255),
    Font = Enum.Font.SourceSansBold,
    TextSize = 18
}

-- Toggle spy status
local function updateStatus()
    SpyMessageProperties.Text = "[SPY "..(Config.enabled and "ENABLED" or "DISABLED").."]"
    StarterGui:SetCore("ChatMakeSystemMessage", SpyMessageProperties)
end

-- Command handler
player.Chatted:Connect(function(message)
    if string.lower(message) == "/spy" then
        Config.enabled = not Config.enabled
        updateStatus()
    end
end)

-- Main message handler
TextChatService.OnIncomingMessage = function(message)
    -- Always return minimal properties for chat to function
    local baseProperties = {
        TextColor3 = Color3.new(1, 1, 1),
        Font = Enum.Font.SourceSans,
        TextSize = 18
    }
    
    if not Config.enabled or _G.chatSpyInstance ~= instance then
        return baseProperties
    end
    
    local textSource = message.TextSource
    if not textSource then return baseProperties end
    
    -- Get channel name safely
    local channel = message:GetAttribute("ChatChannel")
    local channelName = channel and channel.Name or "Global"
    
    -- Detect private messages
    local isPrivate = (channelName == "RBXWhisper" or channelName == "RBXTeam")
    local isLocalPlayer = textSource.UserId == player.UserId
    
    if isPrivate and (Config.spyOnMyself or not isLocalPlayer) then
        local msgContent = message.Text or ""
        local senderName = textSource.Name or "Unknown"
        
        if Config.public then
            -- Send to public chat using legacy method (works client-side)
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                "[SPY] ["..senderName.."]: "..msgContent,
                "All"
            )
        else
            -- Send private system message using StarterGui
            SpyMessageProperties.Text = "[SPY] ["..senderName.."]: "..msgContent
            StarterGui:SetCore("ChatMakeSystemMessage", SpyMessageProperties)
        end
    end
    
    return baseProperties
end

-- Initial status
updateStatus()
print("Chat Spy Activated - Type /spy to toggle")
