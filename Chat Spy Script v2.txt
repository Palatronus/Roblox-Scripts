print("-- Chat Spy Executed --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Config
Config = {
    enabled = true,
    spyOnMyself = true,
    public = false,
    publicItalics = true
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- System message formatting
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#00FFFF"><b>%s</b></font>',
            text
        )
    )
end

-- Core message processing
local function processMessage(message)
    if not Config.enabled then return end
    if not message.TextSource then return end
    
    local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
    if not speaker then return end
    if speaker == player and not Config.spyOnMyself then return end
    
    local channel = message.TextChannel and message.TextChannel.Name or "Unknown"
    if channel == "RBXGeneral" and not Config.public then return end
    
    local cleanMsg = message.Text:gsub("[\n\r]", ""):gsub("\t", " "):gsub(" +", " ")
    
    if Config.public then
        local formatted = (Config.publicItalics and "/me " or "") .. "{SPY} [" .. speaker.Name .. "]: " .. cleanMsg
        TextChatService.TextChannels.RBXGeneral:SendAsync(formatted)
    else
        displaySystemMessage("{SPY} [" .. speaker.Name .. "]: " .. cleanMsg)
    end
end

-- Message interception
TextChatService.MessageReceived:Connect(function(message)
    if _G.chatSpyInstance ~= instance then return end
    if message.Status ~= Enum.TextChatMessageStatus.Success then return end
    
    task.spawn(function()
        processMessage(message)
    end)
end)

-- Command handling
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    if string.sub(message:lower(), 1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
        params.Text = ""
    end
end)

-- Initial status
displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
