print("-- Chat Spy Executed --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Simplified Config
Config = {
    enabled = true,
    spyOnMyself = false
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Create private channel tracker
local privateChannels = {}
local messageTracker = {}
local TRACKER_TTL = 0.01  -- 10ms for extreme spam

-- System message formatting
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#00FFFF"><b>%s</b></font>',
            text
        )
    )
end

-- Create custom private message channel
local function setupPrivateChannel()
    local channelName = "SpyChannel_" .. tostring(math.random(10000,99999))
    local newChannel = Instance.new("TextChannel")
    newChannel.Name = channelName
    newChannel.Parent = TextChatService
    
    newChannel.IncomingMessage:Connect(function(message)
        if not Config.enabled then return end
        local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
        if not speaker then return end
        
        -- Ultra-fast duplicate prevention
        local signature = speaker.UserId .. ":" .. message.Text
        local now = tick()
        if messageTracker[signature] and (now - messageTracker[signature] < TRACKER_TTL) then
            return
        end
        messageTracker[signature] = now
        
        -- Display private message
        displaySystemMessage("{SPY} [" .. speaker.Name .. "]: " .. message.Text)
    end)
    
    return newChannel
end

-- Capture all private communications
local function capturePrivateCommunications(spyChannel)
    -- Monitor whisper channel
    local whisperChannel = TextChatService:FindFirstChild("RBXWhisper")
    if whisperChannel then
        whisperChannel:AddUserAsync(player.UserId)
        whisperChannel.IncomingMessage:Connect(function(message)
            if not Config.enabled then return end
            local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
            if speaker and (speaker ~= player or Config.spyOnMyself) then
                spyChannel:SendAsync({
                    Text = message.Text,
                    TextSource = message.TextSource
                })
            end
        end)
    end

    -- Monitor team chat
    local teamChannel = TextChatService:FindFirstChild("RBXTeam")
    if teamChannel then
        teamChannel:AddUserAsync(player.UserId)
        teamChannel.IncomingMessage:Connect(function(message)
            if not Config.enabled then return end
            spyChannel:SendAsync({
                Text = message.Text,
                TextSource = message.TextSource
            })
        end)
    end

    -- Monitor player commands
    local function monitorCommands(speaker)
        speaker.Chatted:Connect(function(message)
            if not Config.enabled then return end
            if speaker == player and not Config.spyOnMyself then return end
            
            if message:sub(1,1) == "/" and message:sub(1,4):lower() ~= "/spy" then
                spyChannel:SendAsync({
                    Text = message,
                    TextSource = speaker
                })
            end
        end)
    end

    -- Monitor existing players
    for _, p in ipairs(Players:GetPlayers()) do
        monitorCommands(p)
    end

    -- Monitor new players
    Players.PlayerAdded:Connect(monitorCommands)
end

-- Command handling
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    if string.sub(message:lower(), 1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
        params.Text = ""
        return
    end
end)

-- Main execution
local spyChannel = setupPrivateChannel()
capturePrivateCommunications(spyChannel)

-- Initial status
displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
displaySystemMessage("{PRIVATE CHANNEL ACTIVE}")
