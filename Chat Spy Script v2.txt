print("-- Chat Spy Executed --")
print("Type \"spy\" to enable or disable the chat spy.")
print("https://github.com/dehoisted/Chat-Spy")

-- Config
Config = {
    enabled = true,
    spyOnMyself = true,
    public = false,
    publicItalics = true
}

-- Customizing Log Output
PrivateProperties = {
    Color = Color3.fromRGB(0,255,255); 
    Font = Enum.Font.SourceSansBold;
    TextSize = 18;
}

local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local player = Players.LocalPlayer
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Get chat events
local chatEvents = game:GetService("ReplicatedStorage"):FindFirstChild("DefaultChatSystemChatEvents")
if not chatEvents then
    warn("Chat system not found - script may not work")
    return
end

local sayMessageRequest = chatEvents:WaitForChild("SayMessageRequest")
local onMessageDone = chatEvents:WaitForChild("OnMessageDoneFiltering")

-- Main processing function
local function processMessage(speaker, message, channel)
    if _G.chatSpyInstance ~= instance then return end
    if not Config.enabled then return end
    if not Config.spyOnMyself and speaker == player then return end
    
    -- Skip public messages if they're already visible
    if channel == "All" and not Config.public then return end
    
    -- Clean message
    message = message:gsub("[\n\r]",''):gsub("\t",' '):gsub("[ ]+",' ')
    
    if Config.public then
        local text = (Config.publicItalics and "/me " or '').."{SPY} [".. speaker.Name .."]: "..message
        sayMessageRequest:FireServer(text, "All")
    else
        PrivateProperties.Text = "{SPY} [".. speaker.Name .."]: "..message
        StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
    end
end

-- Message handler
onMessageDone.OnClientEvent:Connect(function(messageData)
    if _G.chatSpyInstance ~= instance then return end
    if messageData.FromSpeaker and messageData.Message then
        local speaker = Players:GetPlayerByUserId(messageData.FromSpeaker)
        if speaker then
            processMessage(speaker, messageData.Message, messageData.OriginalChannel)
        end
    end
end)

-- Spy toggle command
player.Chatted:Connect(function(message)
    if _G.chatSpyInstance ~= instance then return end
    if message:lower():sub(1,4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        PrivateProperties.Text = "{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}"
        StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
    end
end)

-- Initial status
PrivateProperties.Text = "{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}"
StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
