--[[
	Infinite Yield-Style Chat Spy
	Type "/spy" to toggle
	Captures whispers, team chat & commands
	Pure TextChatService implementation
--]]

print("-- Chat Spy (IY Method) Executed --")
print("Type \"/spy\" to toggle")

-- Services
local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local player = Players.LocalPlayer

-- Config (IY-style defaults)
Config = {
	enabled = true,          -- Default spy state
	spyOnMyself = false,      -- Capture own private messages
	public = false,          -- Broadcast spy logs publicly
	publicItalics = true,    -- Use italics for public messages
	filterCommands = false,   -- Hide commands like "/e dance"
}

-- System message appearance (IY-style cyan)
PrivateProperties = {
	Color = Color3.fromRGB(0, 255, 255),
	Font = Enum.Font.SourceSansBold,
	TextSize = 18
}

-- Anti-duplication tracking
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- ===== Infinite Yield Message Handling ===== :cite[3]:cite[9] --
TextChatService.OnIncomingMessage = function(message)
	-- Skip if disabled or wrong instance
	if _G.chatSpyInstance ~= instance or not Config.enabled then
		return true -- Critical: Maintain chat delivery
	end
	
	-- Process only successful messages (IY duplicate prevention)
	if message.Status ~= Enum.TextChatMessageStatus.Success then
		return true
	end:cite[9]
	
	local text = message.Text or ""
	local status = message.Status
	local speaker = message.TextSource
	
	-- Identify private messages (whispers/team/commands)
	local isPrivate = status == Enum.TextChatMessageStatus.Whisper 
		or status == Enum.TextChatMessageStatus.Team 
		or status == Enum.TextChatMessageStatus.Private
	
	if not isPrivate or text == "" then 
		return true 
	end
	
	-- Filter commands if enabled (IY-style command detection)
	if Config.filterCommands and text:match("^%/%w+") then 
		return true 
	end

	-- Identify speaker
	local playerName = "System"
	local playerObj = nil
	if speaker then
		playerObj = Players:GetPlayerByUserId(speaker.UserId)
		if playerObj then
			playerName = playerObj.Name
			-- Skip own messages if disabled
			if playerObj == player and not Config.spyOnMyself then
				return true
			end
		end
	end

	-- Clean message text (IY-style sanitization)
	local cleanText = text:gsub("[\n\r]", ""):gsub("\t", " "):gsub("%s+", " ")
	
	-- ===== Output Handling ===== --
	task.defer(function() -- Defer to prevent message blocking
		if Config.public then
			local prefix = Config.publicItalics and "/me " or ""
			local formatted = prefix .. "{SPY} [".. playerName .."]: " .. cleanText
			
			-- IY-style channel handling
			pcall(function()
				TextChatService.TextChannels.RBXGeneral:DisplaySystemMessage(formatted)
			end)
		else
			-- IY-style private logging
			PrivateProperties.Text = "{SPY} [".. playerName .."]: " .. cleanText
			StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
		end
	end)
	
	return true -- Critical: Always deliver original message
end

-- ===== Command Handling ===== --
local function onChatted(msg)
	if _G.chatSpyInstance ~= instance then return end
	
	if msg:lower():sub(1, 4) == "/spy" then
		Config.enabled = not Config.enabled
		task.wait(0.3)
		PrivateProperties.Text = "{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}"
		StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
	end
end

-- Initialize command handler
player.Chatted:Connect(onChatted)

-- Initial status message (IY-style activation alert)
PrivateProperties.Text = "{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}"
StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)

-- Legacy chat warning :cite[3]
if not game:GetService("TextChatService").ChatVersion == Enum.ChatVersion.TextChat then
	PrivateProperties.Text = "{SPY WARNING: Legacy chat enabled}"
	StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
end
