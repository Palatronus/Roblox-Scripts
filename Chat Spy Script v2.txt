print("-- Ultimate Chat Spy Executed --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Simplified config
Config = {
    enabled = true,
    spyOnMyself = false
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Message tracking system
local messageTracker = {}
local TRACKER_TTL = 0.01  -- 10ms for extreme spam protection

-- System message formatting
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#00FFFF"><b>%s</b></font>',
            text
        )
    )
end

-- Core processing with spam protection
local function processPrivateMessage(speaker, message)
    -- Create unique signature
    local signature = speaker.UserId .. ":" .. message
    local now = tick()
    
    -- Ultra-fast duplicate prevention
    if messageTracker[signature] and (now - messageTracker[signature] < TRACKER_TTL) then
        return
    end
    messageTracker[signature] = now
    
    -- Display message
    displaySystemMessage("{SPY} [" .. speaker.Name .. "]: " .. message)
end

-- Command handling
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    if string.sub(message:lower(), 1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        displaySystemMessage("{SPY} " .. (Config.enabled and "ENABLED" or "DISABLED"))
        params.Text = ""
        return
    end
end)

-- Universal message handler
local function universalMessageHandler(speaker, message)
    if not Config.enabled then return end
    if _G.chatSpyInstance ~= instance then return end
    if speaker == player and not Config.spyOnMyself then return end
    
    -- Process private messages only
    if message:sub(1,3):lower() == "/w " then
        processPrivateMessage(speaker, message)
    elseif message:sub(1,1) == "/" and message:sub(1,4):lower() ~= "/spy" then
        processPrivateMessage(speaker, message)
    end
end

-- Monitor all players
for _, p in ipairs(Players:GetPlayers()) do
    p.Chatted:Connect(function(msg)
        universalMessageHandler(p, msg)
    end)
end

Players.PlayerAdded:Connect(function(newPlayer)
    newPlayer.Chatted:Connect(function(msg)
        universalMessageHandler(newPlayer, msg)
    end)
end)

-- Monitor own messages
player.Chatted:Connect(function(msg)
    if Config.spyOnMyself then
        universalMessageHandler(player, msg)
    end
end)

-- Initial status
displaySystemMessage("{SPY} " .. (Config.enabled and "ENABLED" or "DISABLED"))
