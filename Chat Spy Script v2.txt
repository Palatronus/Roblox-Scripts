--[[
	Roblox Chat Spy (Fixed 2025)
	Type "/spy" to toggle
	Captures whispers, team chat & commands
--]]

print("-- Chat Spy Executed --")

-- Services
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Get player safely
local player = Players.LocalPlayer
if not player then
    Players.PlayerAdded:Wait()
    player = Players.LocalPlayer
end
print("Player found:", player.Name)

-- Config
local Config = {
    enabled = true,
    spyOnMyself = false,
    public = false,
    publicItalics = true,
    filterCommands = false
}

-- Message appearance
local PrivateProperties = {
    Color = Color3.fromRGB(0, 255, 255),
    Font = Enum.Font.SourceSansBold,
    TextSize = 18
}

-- Anti-duplication
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance
print("Spy instance:", instance)

-- Safe messaging function
local function safeMessage(text)
    pcall(function()
        PrivateProperties.Text = text
        StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
    end)
end

-- ===== Modern TextChatService Handler ===== --
local function setupModernChatSpy()
    print("Setting up modern chat spy")
    
    TextChatService.OnIncomingMessage = function(message)
        if _G.chatSpyInstance ~= instance or not Config.enabled then
            return true
        end

        -- Check if message is private
        local channel = message.TextChannel
        if channel and (channel.Name == "RBXWhisper" or channel.Name == "RBXTeam") then
            local text = message.Text or ""
            
            -- Filter commands
            if Config.filterCommands and text:match("^%/%w+") then 
                return true 
            end

            -- Identify speaker
            local speaker = message.TextSource
            if speaker then
                local playerObj = Players:GetPlayerByUserId(speaker.UserId)
                if playerObj then
                    -- Skip own messages
                    if playerObj == player and not Config.spyOnMyself then
                        return true
                    end

                    -- Clean text
                    local cleanText = text:gsub("[\n\r]", ""):gsub("\t", " "):gsub("%s+", " ")
                    
                    -- Output handling
                    task.defer(function()
                        if Config.public then
                            local prefix = Config.publicItalics and "/me " or ""
                            local formatted = prefix .. "{SPY} [".. playerObj.Name .."]: " .. cleanText
                            pcall(function()
                                -- Find general channel safely
                                local generalChannel = TextChatService:FindFirstChild("RBXGeneral")
                                if generalChannel then
                                    generalChannel:SendAsync(formatted)
                                end
                            end)
                        else
                            safeMessage("{SPY} [".. playerObj.Name .."]: " .. cleanText)
                        end
                    end)
                end
            end
        end
        return true
    end
    return true
end

-- ===== Legacy Chat Fallback ===== --
local function setupLegacyChatSpy()
    print("Setting up legacy chat spy")
    
    local function onMessageFiltered(message, recipient, channel)
        if _G.chatSpyInstance ~= instance or not Config.enabled then return end
        
        -- Detect private messages
        if channel == "Whisper" or channel == "Team" then
            local speaker = Players:FindFirstChild(message.FromSpeaker)
            if speaker and (Config.spyOnMyself or speaker ~= player) then
                -- Filter commands
                if Config.filterCommands and message.Message:match("^%/%w+") then 
                    return 
                end
                
                task.defer(function()
                    safeMessage("{SPY} [".. speaker.Name .."]: " .. message.Message)
                end)
            end
        end
    end

    -- Connect to legacy system safely
    pcall(function()
        local chatEvents = ReplicatedStorage:WaitForChild("DefaultChatSystemChatEvents", 5)
        if chatEvents then
            local filteredEvent = chatEvents:WaitForChild("OnMessageDoneFiltering", 2)
            if filteredEvent then
                filteredEvent.OnClientEvent:Connect(onMessageFiltered)
            end
        end
    end)
end

-- ===== Chat System Detection ===== --
print("Detecting chat system...")
local chatSystem = "legacy"  -- Default to legacy

-- Modern chat detection without enum
if pcall(function()
    return TextChatService.OnIncomingMessage ~= nil
end) then
    chatSystem = "modern"
    print("Modern chat detected")
else
    print("Legacy chat detected")
end

-- Initialize appropriate system
if chatSystem == "modern" then
    pcall(setupModernChatSpy)
else
    pcall(setupLegacyChatSpy)
end

-- ===== Command Handler ===== --
player.Chatted:Connect(function(msg)
    if _G.chatSpyInstance ~= instance then return end
    
    if msg:lower():sub(1,4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        safeMessage("{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}")
    end
end)

-- Initial status with delay to ensure chat is ready
task.delay(1.5, function()
    safeMessage("{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}")
    print("Initial status message sent")
end)

print("-- Chat Spy Initialization Complete --")
