print("-- Chat Spy Executed --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Config
Config = {
    enabled = true,
    spyOnMyself = false,
    public = false,
    publicItalics = true
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- System message formatting
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#00FFFF"><b>%s</b></font>',
            text
        )
    )
end

-- Core message processing - only private messages
local function processPrivateMessage(speaker, message)
    if not Config.enabled then return end
    if speaker == player and not Config.spyOnMyself then return end
    
    -- Clean message
    local cleanMsg = message:gsub("[\n\r]", ""):gsub("\t", " "):gsub(" +", " ")
    
    if Config.public then
        local formatted = (Config.publicItalics and "/me " or "") .. "{SPY} [" .. speaker.Name .. "]: " .. cleanMsg
        TextChatService.TextChannels.RBXGeneral:SendAsync(formatted)
    else
        displaySystemMessage("{SPY} [" .. speaker.Name .. "]: " .. cleanMsg)
    end
end

-- Message handlers
local function handlePrivateMessage(speaker, message)
    if _G.chatSpyInstance ~= instance then return end
    processPrivateMessage(speaker, message)
end

local function handleCommand(speaker, message)
    if _G.chatSpyInstance ~= instance then return end
    processPrivateMessage(speaker, message)
end

-- Whisper detection and processing
local function handleWhisper(speaker, message, isRecipient)
    if _G.chatSpyInstance ~= instance then return end
    if isRecipient and not Config.spyOnMyself then return end
    processPrivateMessage(speaker, message)
end

-- Infinite Yield-style message hook for private messages
local function setupInfiniteYieldHook()
    local chatEvents = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
    if not chatEvents then return false end
    
    local onMessageDone = chatEvents:FindFirstChild("OnMessageDoneFiltering")
    if not onMessageDone then return false end
    
    onMessageDone.OnClientEvent:Connect(function(messageData)
        if _G.chatSpyInstance ~= instance then return end
        if not messageData.FromSpeaker then return end
        
        local speaker = Players:GetPlayerByUserId(messageData.FromSpeaker)
        if not speaker then return end
        
        -- Only process private messages and commands
        if messageData.MessageType == "Whisper" then
            handleWhisper(speaker, messageData.Message, messageData.ToSpeaker == player.UserId)
        elseif messageData.OriginalChannel ~= "RBXGeneral" and messageData.Message:sub(1,1) == "/" then
            handleCommand(speaker, messageData.Message)
        end
    end)
    
    return true
end

-- Handle own messages
local function setupOwnMessageHook()
    player.Chatted:Connect(function(rawMessage)
        if _G.chatSpyInstance ~= instance then return end
        if not Config.enabled then return end
        if not Config.spyOnMyself then return end
        
        if rawMessage:sub(1,3):lower() == "/w " then
            handleWhisper(player, rawMessage, false)
        elseif rawMessage:sub(1,1) == "/" then
            handleCommand(player, rawMessage)
        end
    end)
end

-- Command handling
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    if string.sub(message:lower(), 1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
        params.Text = ""
        return
    end
end)

-- Initialize chat hooks
if setupInfiniteYieldHook() then
    displaySystemMessage("{SPY MESSAGE HOOK ACTIVE}")
else
    -- Fallback for other players
    TextChatService.MessageReceived:Connect(function(message)
        if _G.chatSpyInstance ~= instance then return end
        if not message.TextSource then return end
        
        local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
        if speaker and speaker ~= player then
            local channel = message.TextChannel and message.TextChannel.Name
            
            -- Only process private messages
            if channel == "RBXWhisper" then
                handleWhisper(speaker, message.Text, true)
            elseif channel and channel ~= "RBXGeneral" and message.Text:sub(1,1) == "/" then
                handleCommand(speaker, message.Text)
            end
        end
    end)
    displaySystemMessage("{SPY USING FALLBACK HOOK}")
end

-- Setup own message hook
setupOwnMessageHook()

-- Initial status
displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")

-- Player whisper detection
for _, otherPlayer in ipairs(Players:GetPlayers()) do
    if otherPlayer ~= player then
        otherPlayer.Chatted:Connect(function(message)
            if message:sub(1,3):lower() == "/w " then
                handleWhisper(otherPlayer, message, false)
            end
        end)
    end
end

Players.PlayerAdded:Connect(function(newPlayer)
    newPlayer.Chatted:Connect(function(message)
        if message:sub(1,3):lower() == "/w " then
            handleWhisper(newPlayer, message, false)
        end
    end)
end)
