print("-- Chat Spy Executed --")
print("Type \"/spy\" to toggle chat spy")
print("https://github.com/dehoisted/Chat-Spy")

-- Simplified Config
Config = {
    enabled = true,
    spyOnMyself = false
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Message tracker for spam prevention
local messageTracker = {}
local TRACKER_TTL = 0.01  -- 10ms for extreme spam

-- System message formatting
local function displaySystemMessage(text)
    TextChatService.TextChannels.RBXSystem:DisplaySystemMessage(
        string.format(
            '<font color="#00FFFF"><b>%s</b></font>',
            text
        )
    )
end

-- Core message processing
local function processMessage(speaker, message, channel)
    if not Config.enabled then return end
    if speaker == player and not Config.spyOnMyself then return end
    
    -- Create unique signature for spam prevention
    local signature = speaker.UserId .. ":" .. message
    local now = tick()
    
    -- Prevent duplicate processing
    if messageTracker[signature] and (now - messageTracker[signature] < TRACKER_TTL) then
        return
    end
    messageTracker[signature] = now
    
    -- Display in public chat with spy prefix
    TextChatService.TextChannels.RBXGeneral:SendAsync("{SPY} [" .. speaker.Name .. "]: " .. message)
end

-- Monitor private channels
local function monitorPrivateChannel(channelName)
    local channel = TextChatService:FindFirstChild(channelName)
    if channel then
        channel:AddUserAsync(player.UserId)
        channel.MessageReceived:Connect(function(message)
            if not Config.enabled then return end
            local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
            if speaker then
                processMessage(speaker, message.Text, channelName)
            end
        end)
    end
end

-- Handle commands
local function handleCommand(speaker, message)
    if not Config.enabled then return end
    if speaker == player and not Config.spyOnMyself then return end
    if string.sub(message:lower(), 1, 4) == "/spy" then return end
    
    processMessage(speaker, message, "Command")
end

-- Set up player monitoring
local function monitorPlayer(p)
    p.Chatted:Connect(function(message)
        if _G.chatSpyInstance ~= instance then return end
        if string.sub(message, 1, 1) == "/" then
            handleCommand(p, message)
        end
    end)
end

-- Monitor existing players
for _, p in ipairs(Players:GetPlayers()) do
    monitorPlayer(p)
end

-- Monitor new players
Players.PlayerAdded:Connect(monitorPlayer)

-- Monitor own messages
player.Chatted:Connect(function(message)
    if _G.chatSpyInstance ~= instance then return end
    if not Config.spyOnMyself then return end
    if string.sub(message, 1, 1) == "/" then
        handleCommand(player, message)
    end
end)

-- Monitor private channels
monitorPrivateChannel("RBXWhisper")
monitorPrivateChannel("RBXTeam")

-- Command handling
TextChatService.SendingMessage:Connect(function(params)
    if _G.chatSpyInstance ~= instance then return end
    
    local message = params.Text
    if string.sub(message:lower(), 1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
        params.Text = ""
        return
    end
end)

-- Initial status
displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
