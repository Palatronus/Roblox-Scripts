-- Infinite Yield Chat Spy (Authentic Implementation)
-- Captures all private messages exactly like IY

local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local StarterGui = game:GetService("StarterGui")

-- IY's player acquisition method
local player = Players.LocalPlayer
while not player do task.wait() player = Players.LocalPlayer end

-- IY configuration settings
local IYConfig = {
    Enabled = true,
    SpyOnSelf = false,
    Public = false,
    FilterCommands = false
}

-- IY message properties
local IYMessageProperties = {
    Color = Color3.fromRGB(0, 255, 255),  -- IY cyan
    Font = Enum.Font.SourceSansBold,
    TextSize = 18
}

-- IY instance tracking
local IYInstance = (_G.IYChatSpyInstance or 0) + 1
_G.IYChatSpyInstance = IYInstance

-- IY status message function
local function IYShowStatus()
    StarterGui:SetCore("ChatMakeSystemMessage", {
        Text = "{SPY "..(IYConfig.Enabled and "EN" or "DIS").."ABLED}",
        Color = IYMessageProperties.Color,
        Font = IYMessageProperties.Font,
        TextSize = IYMessageProperties.TextSize
    })
end

-- IY message processing core (EXACT IY METHOD)
local function IYProcessMessage(message)
    if not IYConfig.Enabled or _G.IYChatSpyInstance ~= IYInstance then return end
    
    -- IY channel detection method
    if not message.TextChannel then return end
    if message.TextChannel.Name ~= "RBXWhisper" and message.TextChannel.Name ~= "RBXTeam" then return end
    
    -- Get message content
    local text = message.Text or ""
    if text == "" then return end
    
    -- IY command filtering
    if IYConfig.FilterCommands and text:match("^%/%w+") then return end
    
    -- Get speaker information
    if not message.TextSource then return end
    local speakerPlayer = Players:GetPlayerByUserId(message.TextSource.UserId)
    if not speakerPlayer then return end
    
    -- IY self-message handling
    if speakerPlayer == player and not IYConfig.SpyOnSelf then return end
    
    -- IY message sanitization
    local cleanText = text:gsub("[\n\r\t]", " "):gsub("%s+", " ")
    
    -- IY EXCLUSIVE LOGGING METHOD
    StarterGui:SetCore("ChatMakeSystemMessage", {
        Text = "[SPY] [".. speakerPlayer.Name .."]: " .. cleanText,
        Color = IYMessageProperties.Color,
        Font = IYMessageProperties.Font,
        TextSize = IYMessageProperties.TextSize
    })
end

-- IY initialization sequence (DIRECT FROM IY SOURCE)
TextChatService.MessageReceived:Connect(IYProcessMessage)

-- IY command handler
player.Chatted:Connect(function(msg)
    if _G.IYChatSpyInstance ~= IYInstance then return end
    
    if msg:lower():sub(1,4) == "spy " then
        IYConfig.Enabled = not IYConfig.Enabled
        task.wait(0.3)
        IYShowStatus()
    end
end)

-- IY initial status
IYShowStatus()

-- IY chat interface adjustment (FOR EXCLUSIVE SPY CHAT)
task.delay(1, function()
    pcall(function()
        local chatFrame = player.PlayerGui.Chat.Frame
        chatFrame.ChatChannelParentFrame.Visible = true
        chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position + UDim2.new(UDim.new(), chatFrame.ChatChannelParentFrame.Size.Y)
    end)
end)

-- IY execution confirmation
StarterGui:SetCore("ChatMakeSystemMessage", {
    Text = "IY CHAT SPY ACTIVE",
    Color = Color3.new(0, 1, 0),
    Font = Enum.Font.SourceSansBold,
    TextSize = 20
})
