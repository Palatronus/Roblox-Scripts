-- Client-side FE compatible chat spy
local function safeInitialize()
    -- Wait for game to load
    while not game:IsLoaded() do task.wait() end
    
    -- Get services
    local Players = game:GetService("Players")
    local TextChatService = game:GetService("TextChatService")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    
    -- Get local player
    local player = Players.LocalPlayer
    while not player do
        Players.PlayerAdded:Wait()
        player = Players.LocalPlayer
        task.wait(0.1)
    end
    
    -- Create instance tracking
    local instance = (_G.chatSpyInstance or 0) + 1
    _G.chatSpyInstance = instance

    -- Configuration
    local Config = {
        enabled = true,
        spyOnMyself = false,
        public = false,
        publicItalics = true
    }

    -- Display system messages safely
    local function displaySystemMessage(text)
        task.spawn(function()
            local systemChannel = TextChatService:FindFirstChild("TextChannels")
            if systemChannel then
                systemChannel = systemChannel:FindFirstChild("RBXSystem")
                if systemChannel then
                    systemChannel:DisplaySystemMessage(
                        string.format(
                            '<font color="#00FFFF"><b>%s</b></font>',
                            text
                        )
                    )
                end
            end
        end)
    end

    -- Display initial messages after a short delay
    task.delay(1, function()
        displaySystemMessage("-- Chat Spy Executed --")
        displaySystemMessage("Type \"/spy\" to toggle chat spy")
        displaySystemMessage("https://github.com/dehoisted/Chat-Spy")
    end)

    -- Core message processing
    local function processMessage(speaker, message, channel)
        if not Config.enabled then return end
        if speaker == player and not Config.spyOnMyself then return end
        
        -- Skip public messages
        if channel == "RBXGeneral" then return end
        
        -- Clean message
        local cleanMsg = message:gsub("[\n\r]", ""):gsub("\t", " "):gsub(" +", " ")
        
        if Config.public then
            task.spawn(function()
                local generalChannel = TextChatService:FindFirstChild("TextChannels")
                if generalChannel then
                    generalChannel = generalChannel:FindFirstChild("RBXGeneral")
                    if generalChannel then
                        local formatted = (Config.publicItalics and "/me " or "") .. "{SPY} [" .. speaker.Name .. "]: " .. cleanMsg
                        generalChannel:SendAsync(formatted)
                    end
                end
            end)
        else
            displaySystemMessage("{SPY} [" .. speaker.Name .. "]: " .. cleanMsg)
        end
    end

    -- Message hook using legacy method for maximum compatibility
    local function setupChatHook()
        local chatEvents = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
        if chatEvents then
            local onMessageDone = chatEvents:FindFirstChild("OnMessageDoneFiltering")
            if onMessageDone then
                onMessageDone.OnClientEvent:Connect(function(messageData)
                    if _G.chatSpyInstance ~= instance then return end
                    if not messageData.FromSpeaker then return end
                    
                    local speaker = Players:GetPlayerByUserId(messageData.FromSpeaker)
                    if speaker then
                        processMessage(speaker, messageData.Message, messageData.OriginalChannel)
                    end
                end)
                return true
            end
        end
        return false
    end

    -- Handle own messages
    player.Chatted:Connect(function(rawMessage)
        if _G.chatSpyInstance ~= instance then return end
        if not Config.enabled then return end
        if not Config.spyOnMyself then return end
        
        -- Determine channel
        local channel = "All"
        if rawMessage:sub(1,3):lower() == "/w " then
            channel = "RBXWhisper"
        elseif rawMessage:sub(1,1) == "/" then
            channel = "Command"
        end
        
        processMessage(player, rawMessage, channel)
    end)

    -- Command handling
    TextChatService.SendingMessage:Connect(function(params)
        if _G.chatSpyInstance ~= instance then return end
        
        local message = params.Text
        if message:lower():sub(1, 4) == "/spy" then
            Config.enabled = not Config.enabled
            task.delay(0.3, function()
                displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
            end)
            params.Text = ""
            return
        end
    end)

    -- Initialize chat hooks
    if setupChatHook() then
        displaySystemMessage("{SPY MESSAGE HOOK ACTIVE}")
    else
        -- Fallback method
        TextChatService.MessageReceived:Connect(function(message)
            if _G.chatSpyInstance ~= instance then return end
            if not message.TextSource then return end
            
            local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
            if speaker and speaker ~= player then
                local channel = message.TextChannel and message.TextChannel.Name or "Unknown"
                if channel ~= "RBXGeneral" then
                    processMessage(speaker, message.Text, channel)
                end
            end
        end)
        displaySystemMessage("{SPY USING FALLBACK HOOK}")
    end

    -- Player connections
    for _, otherPlayer in ipairs(Players:GetPlayers()) do
        if otherPlayer ~= player then
            otherPlayer.Chatted:Connect(function(message)
                if _G.chatSpyInstance ~= instance then return end
                if message:sub(1,3):lower() == "/w " then
                    processMessage(otherPlayer, message, "RBXWhisper")
                else
                    processMessage(otherPlayer, message, "All")
                end
            end)
        end
    end

    Players.PlayerAdded:Connect(function(newPlayer)
        newPlayer.Chatted:Connect(function(message)
            if _G.chatSpyInstance ~= instance then return end
            if message:sub(1,3):lower() == "/w " then
                processMessage(newPlayer, message, "RBXWhisper")
            else
                processMessage(newPlayer, message, "All")
            end
        end)
    end)

    -- Initial status
    displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
end

-- Start the script safely
local success, err = pcall(safeInitialize)
if not success then
    warn("Chat Spy Initialization Failed: " .. tostring(err))
end
