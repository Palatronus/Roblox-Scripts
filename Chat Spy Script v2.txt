-- Simplified chat spy using only TextChatService channels
local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local player = Players.LocalPlayer

-- Wait for chat system initialization
while not TextChatService:FindFirstChild("TextChannels") do task.wait(0.1) end

-- Configuration
local Config = {
    enabled = true,
    spyOnMyself = false,
    public = false,
    publicItalics = true
}

-- System message display
local function displaySystemMessage(text)
    local systemChannel = TextChatService.TextChannels:FindFirstChild("RBXSystem")
    if systemChannel then
        systemChannel:DisplaySystemMessage(
            string.format(
                '<font color="#00FFFF"><b>%s</b></font>',
                text
            )
        )
    end
end

-- Initial messages
displaySystemMessage("-- Chat Spy Executed --")
displaySystemMessage("Type \"/spy\" to toggle chat spy")
displaySystemMessage("https://github.com/dehoisted/Chat-Spy")
displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")

-- Core message processing
local function processMessage(speaker, message, channel)
    if not Config.enabled then return end
    if speaker == player and not Config.spyOnMyself then return end
    
    -- Skip public messages
    if channel == "RBXGeneral" then return end
    
    -- Clean message
    local cleanMsg = message:gsub("[\n\r]", ""):gsub("\t", " "):gsub(" +", " ")
    
    if Config.public then
        local generalChannel = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
        if generalChannel then
            local formatted = (Config.publicItalics and "/me " or "") .. "{SPY} [" .. speaker.Name .. "]: " .. cleanMsg
            generalChannel:SendAsync(formatted)
        end
    else
        displaySystemMessage("{SPY} [" .. speaker.Name .. "]: " .. cleanMsg)
    end
end

-- Main message handler using TextChatService
TextChatService.MessageReceived:Connect(function(message)
    if not message.TextSource then return end
    
    local speaker = Players:GetPlayerByUserId(message.TextSource.UserId)
    if not speaker then return end
    
    local channel = message.TextChannel and message.TextChannel.Name or "Unknown"
    processMessage(speaker, message.Text, channel)
end)

-- Handle own commands and messages
TextChatService.SendingMessage:Connect(function(params)
    local message = params.Text
    
    -- Toggle command
    if message:lower():sub(1, 4) == "/spy" then
        Config.enabled = not Config.enabled
        params.Text = ""
        task.delay(0.3, function()
            displaySystemMessage("{SPY " .. (Config.enabled and "EN" or "DIS") .. "ABLED}")
        end)
        return
    end
    
    -- Process own messages if enabled
    if Config.enabled and Config.spyOnMyself then
        local channel = "All"
        if message:sub(1,3):lower() == "/w " then
            channel = "RBXWhisper"
        elseif message:sub(1,1) == "/" then
            channel = "Command"
        end
        processMessage(player, message, channel)
    end
end)
