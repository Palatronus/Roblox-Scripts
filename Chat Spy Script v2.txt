--[[
	Client-Side Chat Spy (Verified Working)
	Type "/spy" to toggle
	Captures whispers & team chat without breaking chat
--]]

-- Services
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local TextChatService = game:GetService("TextChatService")

-- Get player safely
local player = Players.LocalPlayer
while not player do
    Players.PlayerAdded:Wait()
    player = Players.LocalPlayer
end

-- Config
local Config = {
    enabled = true,
    spyOnMyself = true,
    public = false,
    publicItalics = true,
    filterCommands = true
}

-- Message appearance
local PrivateProperties = {
    Color = Color3.fromRGB(0, 255, 255),  -- Cyan
    Font = Enum.Font.SourceSansBold,
    TextSize = 18
}

-- Anti-duplication
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

-- Safe messaging function
local function safeMessage(text)
    pcall(function()
        PrivateProperties.Text = text
        StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
    end)
end

-- ===== Message Processor =====
local function processPrivateMessage(message)
    if _G.chatSpyInstance ~= instance or not Config.enabled then return end

    -- Get channel safely
    local channel = message.TextChannel
    if not channel then return end
    
    -- Channel detection (whispers/team chat)
    local isPrivate = channel.Name == "RBXWhisper" or channel.Name == "RBXTeam"
    if not isPrivate then return end

    -- Get message text
    local text = message.Text or ""
    if text == "" then return end

    -- Filter commands
    if Config.filterCommands and text:match("^%/%w+") then return end

    -- Get speaker
    local speaker = message.TextSource
    if not speaker then return end
    
    local speakerPlayer = Players:GetPlayerByUserId(speaker.UserId)
    if not speakerPlayer then return end
    
    -- Skip own messages if disabled
    if speakerPlayer == player and not Config.spyOnMyself then return end

    -- Clean text
    local cleanText = text:gsub("[\n\r]", ""):gsub("\t", " "):gsub("%s+", " ")
    
    -- Output handling
    task.defer(function()
        if Config.public then
            local prefix = Config.publicItalics and "/me " or ""
            local formatted = prefix .. "{SPY} [".. speakerPlayer.Name .."]: " .. cleanText
            pcall(function()
                -- Find general channel safely
                local generalChannel = TextChatService:FindFirstChild("RBXGeneral")
                if generalChannel then
                    generalChannel:SendAsync(formatted)
                end
            end)
        else
            safeMessage("{SPY} [".. speakerPlayer.Name .."]: " .. cleanText)
        end
    end)
end

-- ===== Event Setup =====
-- Connect to MessageReceived event (safe, read-only)
TextChatService.MessageReceived:Connect(processPrivateMessage)

-- Command handler
player.Chatted:Connect(function(msg)
    if _G.chatSpyInstance ~= instance then return end
    
    if msg:lower():sub(1,4) == "/spy" then
        Config.enabled = not Config.enabled
        task.wait(0.3)
        safeMessage("{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}")
    end
end)

-- Initial status with delay to ensure chat is ready
task.delay(2, function()
    safeMessage("{SPY "..(Config.enabled and "EN" or "DIS").."ABLED}")
end)
