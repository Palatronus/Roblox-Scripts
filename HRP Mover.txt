-- HRP Separation with Server-Side Visible Fake Character
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local TARGET_POSITION = Vector3.new(100, 500, 200)
local REANIMATION_ACTIVE = false
local RealCharacter, FakeCharacter
local RealHRP, FakeHRP

local function CreateServerVisibleFake()
    if not LocalPlayer.Character then return false end
    
    RealCharacter = LocalPlayer.Character
    RealHRP = RealCharacter:WaitForChild("HumanoidRootPart")
    
    -- Use network ownership manipulation to make fake character server-visible
    RealCharacter.Archivable = true
    FakeCharacter = RealCharacter:Clone()
    
    -- Make fake character fully visible and server-replicated
    for _, part in ipairs(FakeCharacter:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Transparency = 0
            part.CanCollide = true
            part.Anchored = false
            part.Material = Enum.Material.Neon
        end
    end
    
    FakeHRP = FakeCharacter:FindFirstChild("HumanoidRootPart")
    
    -- Parent to workspace for server visibility
    FakeCharacter.Parent = workspace
    FakeCharacter:SetPrimaryPartCFrame(RealHRP.CFrame)
    
    return true
end

local function SetupRealHRPAnchor()
    if not RealHRP then return end
    
    -- Anchor real HRP at target position (server-side)
    RealHRP.Anchored = true
    RealHRP.CFrame = CFrame.new(TARGET_POSITION)
    
    -- Make real character semi-transparent but server-visible
    for _, part in ipairs(RealCharacter:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Transparency = 0.7
            part.CanCollide = false
        end
    end
end

local function RedirectCameraToFake()
    if not FakeCharacter then return end
    
    -- Create humanoid for camera tracking
    local fakeHumanoid = Instance.new("Humanoid")
    fakeHumanoid.Parent = FakeCharacter
    
    -- Set camera to follow fake character
    Camera.CameraSubject = fakeHumanoid
end

local function SyncFakeWithRealMovement()
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not REANIMATION_ACTIVE or not RealCharacter or not FakeCharacter then
            if connection then connection:Disconnect() end
            return
        end
        
        -- Keep real HRP anchored at target
        RealHRP.CFrame = CFrame.new(TARGET_POSITION)
        RealHRP.Velocity = Vector3.new(0, 0, 0)
        
        -- Sync fake character position with real character's movement input
        -- This allows you to control the fake character normally
        local moveDirection = Vector3.new(0, 0, 0)
        
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            moveDirection = moveDirection - Vector3.new(0, 0, 1)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            moveDirection = moveDirection + Vector3.new(0, 0, 1)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            moveDirection = moveDirection - Vector3.new(1, 0, 0)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            moveDirection = moveDirection + Vector3.new(1, 0, 0)
        end
        
        if moveDirection.Magnitude > 0 then
            moveDirection = moveDirection.Unit * 2
            FakeHRP.Position = FakeHRP.Position + moveDirection
        end
    end)
    
    return connection
end

local function StartSeparation()
    if REANIMATION_ACTIVE then return end
    
    if not CreateServerVisibleFake() then
        warn("Failed to create server-visible fake character")
        return
    end
    
    REANIMATION_ACTIVE = true
    SetupRealHRPAnchor()
    RedirectCameraToFake()
    SyncFakeWithRealMovement()
    
    print("HRP Separation Active")
    print("Real HRP anchored at: " .. tostring(TARGET_POSITION))
    print("Fake character visible to server - You control the fake character")
end

local function StopSeparation()
    if not REANIMATION_ACTIVE then return end
    
    REANIMATION_ACTIVE = false
    
    -- Restore real character
    if RealCharacter then
        RealHRP.Anchored = false
        for _, part in ipairs(RealCharacter:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Transparency = 0
                part.CanCollide = true
            end
        end
        
        -- Restore camera to real character
        local realHumanoid = RealCharacter:FindFirstChildOfClass("Humanoid")
        if realHumanoid then
            Camera.CameraSubject = realHumanoid
        end
    end
    
    -- Remove fake character
    if FakeCharacter then
        FakeCharacter:Destroy()
        FakeCharacter = nil
    end
    
    print("HRP Separation Stopped")
end

-- Control with F key
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.F then
        if REANIMATION_ACTIVE then
            StopSeparation()
        else
            StartSeparation()
        end
    end
end)

-- Handle respawns
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    if REANIMATION_ACTIVE then
        StopSeparation()
        wait(2)
        StartSeparation()
    end
end)

print("HRP Separation System Loaded - Press F to toggle")
print("You will control a server-visible fake character")
print("Your real HRP will be anchored at target coordinates")
