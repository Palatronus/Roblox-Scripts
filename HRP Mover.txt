-- True HRP-Only Separation Script
if not game:IsLoaded() then game.Loaded:Wait() end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- Configuration
local TARGET_POSITION = Vector3.new(100, 500, 200)
local SEPARATION_ACTIVE = false
local OriginalWelds = {}

local function debugLog(message)
    print("[HRP Fix] " .. message)
end

-- Core function: Break welds to separate HRP from character
local function separateHRPFromCharacter()
    local character = LocalPlayer.Character
    if not character then return false end
    
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return false end
    
    debugLog("Breaking welds to separate HRP...")
    
    -- Store original welds for restoration
    OriginalWelds = {}
    
    -- Find and break all welds connecting HRP to other parts
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("WeldConstraint") or part:IsA("Weld") then
            if part.Part0 == hrp or part.Part1 == hrp then
                OriginalWelds[part] = {
                    Part0 = part.Part0,
                    Part1 = part.Part1,
                    C0 = part.C0,
                    C1 = part.C1,
                    Enabled = part.Enabled
                }
                part.Enabled = false -- Disable the weld
                debugLog("Disabled weld: " .. part.Name)
            end
        end
    end
    
    -- Also break Motor6D joints (used in R15 characters)
    for _, motor in ipairs(character:GetDescendants()) do
        if motor:IsA("Motor6D") and motor.Part0 == hrp then
            OriginalWelds[motor] = {
                Part0 = motor.Part0,
                Part1 = motor.Part1,
                C0 = motor.C0,
                C1 = motor.C1,
                Enabled = motor.Enabled
            }
            motor.Enabled = false
            debugLog("Disabled Motor6D: " .. motor.Name)
        end
    end
    
    return true
end

-- Restore welds to reattach HRP
local function restoreHRPWelds()
    local character = LocalPlayer.Character
    if not character then return end
    
    for weld, originalData in pairs(OriginalWelds) do
        if weld and weld.Parent then
            weld.Enabled = originalData.Enabled
            debugLog("Restored weld: " .. weld.Name)
        end
    end
    OriginalWelds = {}
end

-- Main HRP movement function
local function moveHRPOnly()
    if not separateHRPFromCharacter() then
        warn("Failed to separate HRP from character")
        return
    end
    
    local character = LocalPlayer.Character
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    
    -- Configure HRP for independent movement
    hrp.Anchored = false
    hrp.CanCollide = false
    
    -- Use BodyPosition for smooth movement to target
    local bodyPosition = Instance.new("BodyPosition")
    bodyPosition.Position = TARGET_POSITION
    bodyPosition.MaxForce = Vector3.new(100000, 100000, 100000)
    bodyPosition.P = 5000
    bodyPosition.Parent = hrp
    
    -- Keep character parts anchored in place
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") and part ~= hrp then
            part.Anchored = true
            part.CanCollide = false
        end
    end
    
    -- Continuous position enforcement
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not SEPARATION_ACTIVE or not hrp or not hrp.Parent then
            if connection then connection:Disconnect() end
            return
        end
        
        -- Force HRP to target position
        bodyPosition.Position = TARGET_POSITION
        hrp.Velocity = Vector3.new(0, 0, 0)
        
        -- Keep character parts in their original positions
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part ~= hrp then
                part.Anchored = true
            end
        end
    end)
    
    return {bodyPosition = bodyPosition, connection = connection}
end

-- Proper camera focus on character (not HRP)
local function setupCorrectCamera()
    local character = LocalPlayer.Character
    if not character then return end
    
    -- Find a stable part to focus on (Head or UpperTorso)
    local cameraFocus = character:FindFirstChild("Head") or 
                       character:FindFirstChild("UpperTorso") or 
                       character:FindFirstChild("Torso")
    
    if cameraFocus then
        -- Create a camera script that follows the character, not HRP
        local camera = workspace.CurrentCamera
        
        -- Use the humanoid for natural camera behavior
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            camera.CameraSubject = humanoid
        else
            -- Fallback: Custom camera follow
            local cameraConnection
            cameraConnection = RunService.RenderStepped:Connect(function()
                if not SEPARATION_ACTIVE or not character.Parent then
                    if cameraConnection then cameraConnection:Disconnect() end
                    return
                end
                
                -- Smooth camera following the character body
                local characterPosition = cameraFocus.Position
                local cameraOffset = Vector3.new(0, 3, 10)
                local goalPosition = characterPosition + cameraOffset
                
                camera.CFrame = CFrame.lookAt(goalPosition, characterPosition)
            end)
        end
    end
end

local function startSeparation()
    if SEPARATION_ACTIVE then return end
    
    debugLog("Starting true HRP-only separation...")
    SEPARATION_ACTIVE = true
    
    local success = pcall(function()
        moveHRPOnly()
        setupCorrectCamera()
    end)
    
    if success then
        debugLog("HRP separated successfully")
        debugLog("Character should remain in place while HRP moves")
    else
        warn("HRP separation failed")
        SEPARATION_ACTIVE = false
    end
end

local function stopSeparation()
    if not SEPARATION_ACTIVE then return end
    
    debugLog("Stopping separation and restoring character...")
    SEPARATION_ACTIVE = false
    
    local character = LocalPlayer.Character
    if character then
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then
            -- Remove BodyPosition
            for _, obj in pairs(hrp:GetChildren()) do
                if obj:IsA("BodyPosition") then
                    obj:Destroy()
                end
            end
            
            -- Restore welds
            restoreHRPWelds()
            
            -- Unanchor character parts
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Anchored = false
                    part.CanCollide = true
                end
            end
            
            -- Restore normal camera
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                workspace.CurrentCamera.CameraSubject = humanoid
            end
        end
    end
    
    debugLog("Separation stopped - character restored")
end

-- Simple key binding
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.F then
        if SEPARATION_ACTIVE then
            stopSeparation()
        else
            startSeparation()
        end
    end
end)

-- Handle respawns
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    debugLog("New character detected")
    
    if SEPARATION_ACTIVE then
        wait(3) -- Wait for character to fully load
        startSeparation()
    end
end)

-- Initialize
local function initialize()
    if not LocalPlayer.Character then
        LocalPlayer.CharacterAdded:Wait()
    end
    
    debugLog("HRP Separation System Ready")
    debugLog("Press F to toggle HRP separation")
    debugLog("This will move ONLY the HRP, keeping character in place")
end

initialize()

-- Export functions
getgenv().HRPSeparation = {
    start = startSeparation,
    stop = stopSeparation,
    setPosition = function(pos) TARGET_POSITION = pos end
}
