-- Complete HRP Separation & Reanimation Script
-- Place in a LocalScript

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local RealCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local RealHRP = RealCharacter:WaitForChild("HumanoidRootPart")
local RealHumanoid = RealCharacter:FindFirstChildOfClass("Humanoid")

-- CONFIGURATION
local TARGET_POSITION = Vector3.new(100, 500, 200) -- Set your desired coordinates here
local REANIMATION_ACTIVE = false
local FakeCharacter, FakeHRP

local function createFakeCharacter()
    -- Enable archiving and clone the real character for the fake model:cite[10]
    RealCharacter.Archivable = true
    FakeCharacter = RealCharacter:Clone()

    -- Configure the fake character for client-side use
    for _, part in ipairs(FakeCharacter:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Transparency = 0 -- Make fully visible
            part.CanCollide = false
            part.Anchored = false
        end
    end

    -- Remove the humanoid from the fake to prevent interference
    local fakeHum = FakeCharacter:FindFirstChildOfClass("Humanoid")
    if fakeHum then
        fakeHum:Destroy()
    end

    FakeHRP = FakeCharacter:FindFirstChild("HumanoidRootPart")
    FakeCharacter.Parent = workspace
    FakeCharacter:SetPrimaryPartCFrame(RealHRP.CFrame) -- Spawn fake at real character's location
end

local function controlRealHRP()
    -- Anchor the real HRP at the target coordinates:cite[1]
    RealHRP.Anchored = true
    RealHRP.CFrame = CFrame.new(TARGET_POSITION)

    -- Make the real character transparent on your client only
    for _, part in ipairs(RealCharacter:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Transparency = 0.8
        end
    end
end

local function redirectCamera()
    -- Create a fake Humanoid for the camera to follow the fake character
    local fakeHumanoid = Instance.new("Humanoid")
    fakeHumanoid.Parent = FakeCharacter

    -- Force the camera to focus on the fake character, not the real HRP:cite[10]
    workspace.CurrentCamera.CameraSubject = fakeHumanoid
end

local function syncFakeWithInput()
    -- Heartbeat loop to synchronize the fake character with your input
    RunService.Heartbeat:Connect(function()
        if not REANIMATION_ACTIVE or not FakeCharacter or not RealCharacter then
            return
        end

        -- Keep the real HRP anchored at the target
        RealHRP.CFrame = CFrame.new(TARGET_POSITION)

        -- Synchronize the fake character's CFrame with the real one, but maintain its own position
        -- This allows the fake to move while the real HRP stays anchored
        FakeHRP.CFrame = FakeHRP.CFrame:Lerp(RealHRP.CFrame, 0.5)
    end)
end

local function startReanimation()
    if REANIMATION_ACTIVE then return end
    REANIMATION_ACTIVE = true

    createFakeCharacter()
    controlRealHRP()
    redirectCamera()
    syncFakeWithInput()

    print("Reanimation Active | Real HRP anchored at: " .. tostring(TARGET_POSITION))
end

local function stopReanimation()
    if not REANIMATION_ACTIVE then return end
    REANIMATION_ACTIVE = false

    -- Restore real character
    RealHRP.Anchored = false
    for _, part in ipairs(RealCharacter:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Transparency = 0
        end
    end

    -- Restore camera to real character
    workspace.CurrentCamera.CameraSubject = RealHumanoid

    -- Destroy fake character
    if FakeCharacter then
        FakeCharacter:Destroy()
        FakeCharacter = nil
    end

    print("Reanimation Stopped")
end

-- Control via the 'F' key
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    if input.KeyCode == Enum.KeyCode.F then
        if REANIMATION_ACTIVE then
            stopReanimation()
        else
            startReanimation()
        end
    end
end)

-- Auto-reconnect on respawn
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    RealCharacter = newCharacter
    RealHRP = newCharacter:WaitForChild("HumanoidRootPart")
    RealHumanoid = newCharacter:FindFirstChildOfClass("Humanoid")

    if REANIMATION_ACTIVE then
        wait(1) -- Allow character to stabilize
        startReanimation()
    end
end)

print("Reanimation System Loaded | Press 'F' to toggle")
