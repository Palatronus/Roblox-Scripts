-- Client-side movement request handler
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Wait for RemoteEvent to be created by server
local MovementEvent = ReplicatedStorage:WaitForChild("MovementEvent")

local function requestMovement(distance, direction)
    -- Input validation
    if not distance or type(distance) ~= "number" then
        warn("Invalid distance parameter")
        return false
    end
    
    if distance > 100 then -- Safety limit
        warn("Distance exceeds maximum allowed")
        return false
    end
    
    -- Prepare movement data
    local movementData = {
        distance = distance,
        direction = direction or "Forward",
        playerId = player.UserId,
        timestamp = os.time()
    }
    
    -- Send request to server
    local success, result = pcall(function()
        return MovementEvent:InvokeServer(movementData)
    end)
    
    if success and result then
        -- Server approved movement, apply client-side prediction
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            -- Visual feedback while waiting for server confirmation
            applyMovementEffects(humanoidRootPart)
        end
        return true
    else
        warn("Movement request failed:", result)
        return false
    end
end

local function applyMovementEffects(hrp)
    -- Client-side visual effects only
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad)
    local goal = {Size = Vector3.new(4, 4, 4)}
    local tween = TweenService:Create(hrp, tweenInfo, goal)
    tween:Play()
    
    -- Reset after effect
    delay(0.3, function()
        local resetTween = TweenService:Create(hrp, tweenInfo, {Size = Vector3.new(2, 2, 1)})
        resetTween:Play()
    end)
end

-- Example usage with error handling
local function safeMovementExecution()
    local success, error = pcall(function()
        requestMovement(10, "Forward")
    end)
    
    if not success then
        warn("Movement execution error:", error)
    end
end

-- Bind to user input or other triggers
game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.E then
        safeMovementExecution()
    end
end)

return {
    RequestMovement = requestMovement,
    SafeMovementExecution = safeMovementExecution
}
