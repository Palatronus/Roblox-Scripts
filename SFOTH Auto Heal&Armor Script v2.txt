local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LP = Players.LocalPlayer

-- Verified Configuration
local ACTIVE_HEAL_COLOR = Color3.new(75/255, 151/255, 75/255)
local ARMOR_NAME = "BattleArmor"
local HEAL_PAD_NAME = "HealPad"
local ARMOR_STAND_NAME = "BattleArmorStand"

-- System State
local Active = true
local Connections = {}

-- Core Protection System
local function SafeCall(func)
    local success, err = pcall(func)
    if not success then
        warn("System Auto-Repair: "..tostring(err))
        task.wait(1)
        return true
    end
    return false
end

-- Memory Management
local function Cleanup()
    for _, conn in pairs(Connections) do
        if conn.Connected then
            conn:Disconnect()
        end
    end
    Connections = {}
end

-- Armor System (Optimized)
local function ArmorSystem()
    while Active do
        if SafeCall(function()
            -- Only run if player doesn't have armor
            if LP.Character and not LP.Character:FindFirstChild(ARMOR_NAME) then
                local root = LP.Character:FindFirstChild("HumanoidRootPart")
                if root then
                    -- Find and activate nearest armor stands
                    local armors = {}
                    for _, obj in ipairs(workspace:GetDescendants()) do
                        if obj.Name == ARMOR_STAND_NAME and obj:IsA("Model") then
                            local part = obj:FindFirstChildWhichIsA("BasePart")
                            if part then
                                table.insert(armors, {
                                    part = part,
                                    distance = (root.Position - part.Position).Magnitude
                                })
                            end
                        end
                    end
                    
                    table.sort(armors, function(a,b) return a.distance < b.distance end)
                    
                    for i = 1, math.min(1, #armors) do
                        -- Instant single activation
                        firetouchinterest(root, armors[i].part, 0)
                        firetouchinterest(root, armors[i].part, 1)
                        
                        if LP.Character:FindFirstChild(ARMOR_NAME) then break end
                    end
                end
            end
        end) then
            task.wait(2)
        else
            task.wait(1)
        end
    end
end

-- Healing System (Optimized)
local function HealSystem()
    while Active do
        if SafeCall(function()
            -- Only run if player is damaged
            if LP.Character and LP.Character:FindFirstChild("Humanoid") then
                local humanoid = LP.Character.Humanoid
                local root = LP.Character:FindFirstChild("HumanoidRootPart")
                
                if humanoid.Health < humanoid.MaxHealth and root then
                    -- Find all active heal pads
                    local activePads = {}
                    for _, pad in ipairs(workspace:GetDescendants()) do
                        if pad.Name == HEAL_PAD_NAME and pad:IsA("Model") then
                            local padPart = pad:FindFirstChild("Pad") or pad:FindFirstChildWhichIsA("BasePart")
                            if padPart and padPart.Color == ACTIVE_HEAL_COLOR then
                                table.insert(activePads, {
                                    part = padPart,
                                    distance = (root.Position - padPart.Position).Magnitude
                                })
                            end
                        end
                    end
                    
                    -- Activate nearest available pad
                    if #activePads > 0 then
                        table.sort(activePads, function(a,b) return a.distance < b.distance end)
                        local targetPad = activePads[1].part
                        
                        -- Instant single activation
                        firetouchinterest(root, targetPad, 0)
                        firetouchinterest(root, targetPad, 1)
                    end
                end
            end
        end) then
            task.wait(1)
        else
            task.wait(0.25)
        end
    end
end

-- Toggle System
Connections.toggle = UIS.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.H then
        Active = not Active
        if Active then
            Cleanup()
            Connections.armor = task.spawn(ArmorSystem)
            Connections.heal = task.spawn(HealSystem)
        else
            Cleanup()
        end
    end
end)

-- Initialization
task.spawn(ArmorSystem)
task.spawn(HealSystem)

-- Auto-Repair System
task.spawn(function()
    while true do
        task.wait(10)
        if Active then
            if not Connections.armor or coroutine.status(Connections.armor) == "dead" then
                warn("Armor System Restarting...")
                Connections.armor = task.spawn(ArmorSystem)
            end
            if not Connections.heal or coroutine.status(Connections.heal) == "dead" then
                warn("Heal System Restarting...")
                Connections.heal = task.spawn(HealSystem)
            end
        end
    end
end)

game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "OPTIMIZED SFOTH SYSTEM ACTIVE",
    Text = "Performance Improvements:\n- Conditional Touch Events\n- Instant Acquisition\n- No Unnecessary Spam",
    Duration = 5
})