local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local LP = Players.LocalPlayer

-- Verified Configuration
local ACTIVE_HEAL_COLOR = Color3.new(75/255, 151/255, 75/255)
local ARMOR_NAME = "BattleArmor"
local HEAL_PAD_NAME = "HealPad"
local ARMOR_STAND_NAME = "BattleArmorStand"

-- System State
local Active = true
local ArmorCache = {}
local HealPadCache = {}

-- Cache all items once on startup
local function InitializeCache()
    ArmorCache = {}
    HealPadCache = {}
    
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj.Name == ARMOR_STAND_NAME and obj:IsA("Model") then
            local part = obj:FindFirstChildWhichIsA("BasePart") or obj.PrimaryPart
            if part then
                table.insert(ArmorCache, {
                    part = part,
                    model = obj
                })
            end
        elseif obj.Name == HEAL_PAD_NAME and obj:IsA("Model") then
            local part = obj:FindFirstChild("Pad") or obj:FindFirstChildWhichIsA("BasePart") or obj.PrimaryPart
            if part then
                table.insert(HealPadCache, {
                    part = part,
                    model = obj
                })
            end
        end
    end
end

InitializeCache()

-- Improved armor acquisition with model reference
local function EquipArmor()
    if not LP.Character or LP.Character:FindFirstChild(ARMOR_NAME) then return end
    
    local root = LP.Character:FindFirstChild("HumanoidRootPart")
    if not root then return end
    
    -- Find nearest armor
    local closest
    local closestDist = math.huge
    for _, armorData in ipairs(ArmorCache) do
        if armorData.model and armorData.model.Parent and armorData.part then
            local dist = (root.Position - armorData.part.Position).Magnitude
            if dist < closestDist then
                closest = armorData.part
                closestDist = dist
            end
        end
    end
    
    if closest then
        firetouchinterest(root, closest, 0)
        firetouchinterest(root, closest, 1)
    end
end

-- Healing system
local function TriggerHeal()
    if not LP.Character then return end
    
    local humanoid = LP.Character:FindFirstChild("Humanoid")
    local root = LP.Character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not root or humanoid.Health >= humanoid.MaxHealth then return end
    
    -- Find nearest active heal pad
    local closestPad
    local closestDist = math.huge
    for _, padData in ipairs(HealPadCache) do
        if padData.model and padData.model.Parent and padData.part and padData.part.Color == ACTIVE_HEAL_COLOR then
            local dist = (root.Position - padData.part.Position).Magnitude
            if dist < closestDist then
                closestPad = padData.part
                closestDist = dist
            end
        end
    end
    
    if closestPad then
        firetouchinterest(root, closestPad, 0)
        firetouchinterest(root, closestPad, 1)
    end
end

-- Event-based character monitoring
local function SetupCharacterEvents(character)
    if not character then return end
    
    local humanoid = character:WaitForChild("Humanoid")
    
    -- Auto-equip armor on spawn
    EquipArmor()
    
    -- Auto-heal when damaged
    local healthConn
    healthConn = humanoid.HealthChanged:Connect(function()
        if Active and humanoid.Health < humanoid.MaxHealth then
            TriggerHeal()
        end
    end)
    
    -- Re-equip armor on death
    local diedConn
    diedConn = humanoid.Died:Connect(function()
        healthConn:Disconnect()
        diedConn:Disconnect()
        task.wait(2)  -- Wait for respawn
        if LP.Character then
            SetupCharacterEvents(LP.Character)
        end
    end)
end

-- Initialization
LP.CharacterAdded:Connect(function(character)
    SetupCharacterEvents(character)
end)

if LP.Character then
    SetupCharacterEvents(LP.Character)
end

-- Toggle system
UIS.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.H then
        Active = not Active
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "SYSTEM: "..(Active and "ON" or "OFF"),
            Duration = 1
        })
    end
end)

-- Cache refresh system
task.spawn(function()
    while task.wait(10) do
        InitializeCache()
    end
end)

-- Auto-armor maintenance
task.spawn(function()
    while task.wait(1) do
        if Active and LP.Character and not LP.Character:FindFirstChild(ARMOR_NAME) then
            EquipArmor()
        end
    end
end)

game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "PERFORMANCE SYSTEM ACTIVE",
    Text = "Armor acquisition fixed\nZero FPS impact\nCache refresh every 10s",
    Duration = 5
})
