local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local LP = Players.LocalPlayer

-- Verified Configuration
local ACTIVE_HEAL_COLOR = Color3.new(75/255, 151/255, 75/255)
local ARMOR_NAME = "BattleArmor"
local HEAL_PAD_NAME = "HealPad"
local ARMOR_STAND_NAME = "BattleArmorStand"

-- System State
local Active = true
local ArmorCache = {}
local HealPadCache = {}
local CharacterConnections = {}

-- Cache all items once on startup
local function InitializeCache()
    ArmorCache = {}
    HealPadCache = {}
    
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj.Name == ARMOR_STAND_NAME and obj:IsA("Model") then
            local part = obj:FindFirstChildWhichIsA("BasePart") or obj.PrimaryPart
            if part then
                table.insert(ArmorCache, part)
            end
        elseif obj.Name == HEAL_PAD_NAME and obj:IsA("Model") then
            local part = obj:FindFirstChild("Pad") or obj:FindFirstChildWhichIsA("BasePart") or obj.PrimaryPart
            if part then
                table.insert(HealPadCache, part)
            end
        end
    end
end

InitializeCache()

-- ARMOR SYSTEM: Works exactly as you wanted
local function EquipArmor()
    if not LP.Character or LP.Character:FindFirstChild(ARMOR_NAME) then return end
    
    local root = LP.Character:FindFirstChild("HumanoidRootPart")
    if not root then return end
    
    for _, armorPart in ipairs(ArmorCache) do
        if armorPart and armorPart.Parent then
            firetouchinterest(root, armorPart, 0)
            firetouchinterest(root, armorPart, 1)
        end
    end
end

-- HEALING SYSTEM: Works exactly as you wanted
local function TriggerHeal()
    if not LP.Character then return end
    
    local humanoid = LP.Character:FindFirstChild("Humanoid")
    local root = LP.Character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not root or humanoid.Health >= humanoid.MaxHealth then return end
    
    for _, padPart in ipairs(HealPadCache) do
        if padPart and padPart.Parent and padPart.Color == ACTIVE_HEAL_COLOR then
            firetouchinterest(root, padPart, 0)
            firetouchinterest(root, padPart, 1)
        end
    end
end

-- ARMOR ACQUISITION SYSTEM: Simple and reliable
local function ArmorMonitor()
    while Active do
        EquipArmor()
        task.wait(1)  -- Check once per second
    end
end

-- HEALING SYSTEM: Event-based for instant response
local function SetupHealingEvents()
    if not LP.Character then return end
    
    local humanoid = LP.Character:FindFirstChild("Humanoid")
    if not humanoid then return end
    
    -- Cleanup previous connections
    if CharacterConnections.health then
        CharacterConnections.health:Disconnect()
    end
    
    -- HealthChanged event triggers instant healing
    CharacterConnections.health = humanoid.HealthChanged:Connect(function()
        if Active and humanoid.Health < humanoid.MaxHealth then
            TriggerHeal()
        end
    end)
end

-- Respawn handling
local function HandleRespawn()
    if LP.Character then
        -- Set up healing events for new character
        SetupHealingEvents()
        
        -- Equip armor immediately
        task.spawn(EquipArmor)
        
        -- Setup death handler
        local humanoid = LP.Character:FindFirstChild("Humanoid")
        if humanoid then
            if CharacterConnections.died then
                CharacterConnections.died:Disconnect()
            end
            CharacterConnections.died = humanoid.Died:Connect(function()
                task.wait(2)  -- Wait for respawn
                HandleRespawn()
            end)
        end
    end
end

-- Toggle system
UIS.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.H then
        Active = not Active
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "SYSTEM: "..(Active and "ON" or "OFF"),
            Duration = 1
        })
    end
end)

-- Initialization
task.spawn(ArmorMonitor)  -- Start armor monitoring
HandleRespawn()  -- Initial setup

-- Handle character changes
LP.CharacterAdded:Connect(HandleRespawn)

-- Periodic cache refresh
task.spawn(function()
    while task.wait(30) do
        InitializeCache()
    end
end)

game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "RELIABLE SYSTEM ACTIVE",
    Text = "Armor: Constant monitoring\nHealing: Event-based\nPress H to toggle",
    Duration = 5
})
