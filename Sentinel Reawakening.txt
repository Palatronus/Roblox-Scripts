-- SFOTHO Security Bot Script v2.0
-- FE Compatible Vigilante Security System
-- Optimized for LDPlayer and Modern Roblox API (2023-2024)

--[[
    CHANGELOG v2.0:
    - Fixed core errors: proper type checking for killer detection
    - Added comprehensive error handling with pcall patterns
    - Implemented LDPlayer touchscreen optimizations
    - Updated to modern Roblox API standards
    - Added performance optimizations for mobile emulation
    - Enhanced logging system with stack traces
    - Improved memory management
]]

-- Services (Modern API Standards)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local GuiService = game:GetService("GuiService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local LogService = game:GetService("LogService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Local References
local LocalPlayer = Players.LocalPlayer
local botOwner = LocalPlayer.Name

-- Configuration
local CONFIG = {
    DISTANCE_WARNING = 15,
    DISTANCE_LOOPKILL = 25,
    ADMIN_LOAD_WAIT = 5,
    COMMAND_DELAY = 0.5,
    CHAR_DELAY = 0.02,
    MAX_RETRIES = 3,
    HEARTBEAT_INTERVAL = 0.1,
    
    -- LDPlayer Optimizations
    LDPLAYER_DETECTION = true,
    TOUCH_THRESHOLD = 50,
    UI_SCALE_FACTOR = 1.2,
    MOBILE_PERFORMANCE_MODE = true,
    ADAPTIVE_INPUT = true
}

-- Whitelist Systems
local OWNER_WHITELIST = {
    "HollowGol"
}

local MOD_WHITELIST = {
    "STEVETheReal916", "ColonThreeSpam", "SpawnYellow2", "SpawnBlack1",
    "s71pl", "TheSwordFightingBot2", "Jacobthecool292", "babyyodasonglol",
    "Kandale_Dingul", "redalert_E", "fariahoque28", "baze15651",
    "well_ihateboblux", "0bj687Alt"
}

-- Loopkills list
local loopkillsList = {
    "@BoomyRealTop1Global", "@Lucasshed_1", "@SpawnYeIIow8", "@noradrenilne", "@djskfjdskfjkdsjfkds",
    "@spy6767676767678", "@gavotx", "@7389322", "@SayuriWasTaken", "@bacondude629", "@sdsssssssssssssssfss",
    "@entity9258", "@tomitoest", "@randomsnakeguy2", "@soetidjou", "@dontyoudare911", "@aerotypings",
    "@vaziolele2222", "@fdgdffdsf3424", "@hiyahiya583", "@CapyBarchik87", "@burpboy67", "@SkinnyLegendCeana",
    "@norasnewaccheh", "@Sugarcrashjojo", "@thetgpugooner", "@Mr_Remembers", "@Tomryden2cuzwhynot",
    "@slaitmyarwse", "@Aquatic_515", "@lukenicolotreoyo", "@Man06Tay10", "@unknownexp9", "@Jaja1og5",
    "@unknownexp10", "@unknownexp12", "@hazaeur", "@homier_822825", "@cookie_333128", "@wubberio",
    "@yesus120strange", "@guest_201406", "@LOS_HACKERSS", "@inbluejeans", "@nicopla1234", "@baskanpro200",
    "@Luc_2004sad", "@suspiciousacc15", "@ohnobabyohno11", "@1B0b7", "@c00l_stark", "@miscoloredspawn",
    "@tytytyttyyyttyytyy", "@hackerdude977", "@bloxfruit4372763", "@PavoIski", "@ceanaphobic",
    "@BannedYouXx4_1x1x1x1", "@russki_krutoi", "@JustAnExploiterr", "@Tuscan_12345689", "@DERZKO69",
    "@Reallylongnamelololm", "@yahyaslapbattle", "@SonicShadows126", "@sadssdasddasss", "@falooda12345_1",
    "@bombplanner256", "@h00zgui", "@deaglestabbed", "@Luka123631", "@luigimario_1241", "@Hackerbacon694",
    "@WhiteGuy603", "@aygul3103", "@TMKOC63", "@damnitnega", "@haushhidnuxw8eu", "@PurpleGuySmashes1",
    "@PurpleGuySmashes", "@T0_Testing", "@Dollmyaccdisabled686", "@benzoine", "@Jqsminx", "@TheBoselyMan"
}

-- State Management
local State = {
    playerPositions = {},
    playerDeaths = {},
    botInitialized = false,
    lastBotPosition = Vector3.new(0, 0, 0),
    commandQueue = {},
    isExecutingCommands = false,
    isLDPlayer = false,
    performanceMode = false,
    errorCount = 0,
    lastHeartbeat = 0
}

-- Error Handling and Logging System
local Logger = {}

function Logger.log(level, message, stackTrace)
    local timestamp = os.date("%H:%M:%S")
    local logMessage = string.format("[%s] [%s] %s", timestamp, level, message)
    
    if stackTrace then
        logMessage = logMessage .. "\nStack: " .. stackTrace
    end
    
    print(logMessage)
    
    -- Store in LogService for debugging
    pcall(function()
        if level == "ERROR" then
            LogService:RequestServerHttpAsync({
                Url = "https://httpbin.org/post",
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = HttpService:JSONEncode({
                    level = level,
                    message = message,
                    timestamp = timestamp,
                    player = botOwner
                })
            })
        end
    end)
end

function Logger.error(message, err)
    State.errorCount = State.errorCount + 1
    Logger.log("ERROR", message, err and tostring(err) or debug.traceback())
end

function Logger.warn(message)
    Logger.log("WARN", message)
end

function Logger.info(message)
    Logger.log("INFO", message)
end

-- LDPlayer Detection and Optimization
local LDPlayerOptimizer = {}

function LDPlayerOptimizer.detectLDPlayer()
    local success, result = pcall(function()
        -- Check for LDPlayer-specific characteristics
        local isTouch = UserInputService.TouchEnabled
        local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
        local screenSize = workspace.CurrentCamera.ViewportSize
        
        -- LDPlayer typically runs at specific resolutions
        local commonLDPlayerResolutions = {
            {1920, 1080}, {1600, 900}, {1366, 768}, {1280, 720}
        }
        
        for _, res in pairs(commonLDPlayerResolutions) do
            if math.abs(screenSize.X - res[1]) < 50 and math.abs(screenSize.Y - res[2]) < 50 then
                return true
            end
        end
        
        return isMobile
    end)
    
    if success then
        State.isLDPlayer = result
        Logger.info("LDPlayer detection: " .. tostring(result))
    else
        Logger.error("Failed to detect LDPlayer", result)
    end
end

function LDPlayerOptimizer.optimizeForLDPlayer()
    if not State.isLDPlayer then return end
    
    pcall(function()
        -- Optimize UI scaling
        if GuiService then
            local scale = CONFIG.UI_SCALE_FACTOR
            -- Apply scaling optimizations here if needed
        end
        
        -- Enable performance mode
        State.performanceMode = CONFIG.MOBILE_PERFORMANCE_MODE
        
        -- Adjust input thresholds
        CONFIG.TOUCH_THRESHOLD = CONFIG.TOUCH_THRESHOLD * 1.5
        
        Logger.info("LDPlayer optimizations applied")
    end)
end

-- Utility Functions with Error Handling
local Utils = {}

function Utils.safeWait(duration)
    local success, err = pcall(function()
        wait(duration or 0.1)
    end)
    if not success then
        Logger.error("Wait failed", err)
    end
end

function Utils.isWhitelisted(username)
    if not username or type(username) ~= "string" then
        return false
    end
    
    for _, name in pairs(OWNER_WHITELIST) do
        if name == username then
            return "owner"
        end
    end
    
    for _, name in pairs(MOD_WHITELIST) do
        if name == username then
            return "mod"
        end
    end
    
    return false
end

function Utils.addToLoopkills(username)
    if not username or type(username) ~= "string" then
        Logger.error("Invalid username provided to addToLoopkills: " .. tostring(username))
        return false
    end
    
    local formattedUsername = "@" .. username
    
    for _, name in pairs(loopkillsList) do
        if name == formattedUsername then
            return false -- Already in list
        end
    end
    
    table.insert(loopkillsList, formattedUsername)
    Logger.info("Added " .. formattedUsername .. " to loopkills list")
    return true
end

function Utils.getDistance(pos1, pos2)
    if not pos1 or not pos2 then
        return math.huge
    end
    
    local success, distance = pcall(function()
        return (pos1 - pos2).Magnitude
    end)
    
    return success and distance or math.huge
end

function Utils.getCharacterRootPart(character)
    if not character then return nil end
    
    local success, rootPart = pcall(function()
        return character:FindFirstChild("HumanoidRootPart") or 
               character:FindFirstChild("Torso") or 
               character:FindFirstChild("UpperTorso")
    end)
    
    return success and rootPart or nil
end

function Utils.getPlayerFromInstance(instance)
    if not instance then return nil end
    
    -- Handle different types of killer identification
    local success, player = pcall(function()
        if typeof(instance) == "Instance" then
            if instance:IsA("Player") then
                return instance
            elseif instance:IsA("Model") then
                return Players:GetPlayerFromCharacter(instance)
            elseif instance.Parent and instance.Parent:IsA("Model") then
                return Players:GetPlayerFromCharacter(instance.Parent)
            end
        elseif type(instance) == "string" then
            return Players:FindFirstChild(instance)
        end
        return nil
    end)
    
    return success and player or nil
end

-- Command Execution System with Enhanced Error Handling
local CommandSystem = {}

function CommandSystem.executeCommand(command)
    if not command or type(command) ~= "string" then
        Logger.error("Invalid command provided: " .. tostring(command))
        return false
    end
    
    table.insert(State.commandQueue, command)
    return true
end

function CommandSystem.processCommandQueue()
    if State.isExecutingCommands or #State.commandQueue == 0 then
        return
    end
    
    State.isExecutingCommands = true
    local command = table.remove(State.commandQueue, 1)
    
    local success, err = pcall(function()
        -- Enhanced input simulation with error handling
        CommandSystem.simulateInput(command)
    end)
    
    if not success then
        Logger.error("Command execution failed: " .. command, err)
    end
    
    Utils.safeWait(CONFIG.COMMAND_DELAY)
    State.isExecutingCommands = false
end

function CommandSystem.simulateInput(command)
    local retries = 0
    
    while retries < CONFIG.MAX_RETRIES do
        local success, err = pcall(function()
            -- Press comma key with proper error handling
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Comma, false, Enum.UserInputType.Keyboard)
            Utils.safeWait(0.1)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Comma, false, Enum.UserInputType.Keyboard)
            Utils.safeWait(0.2)
            
            -- Type command with adaptive delay for LDPlayer
            local charDelay = State.isLDPlayer and CONFIG.CHAR_DELAY * 1.5 or CONFIG.CHAR_DELAY
            
            for i = 1, #command do
                local char = command:sub(i, i)
                VirtualInputManager:SendTextInputCharacterEvent(char)
                Utils.safeWait(charDelay)
            end
            
            Utils.safeWait(0.1)
            
            -- Press Enter
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, Enum.UserInputType.Keyboard)
            Utils.safeWait(0.1)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, Enum.UserInputType.Keyboard)
        end)
        
        if success then
            Logger.info("Command executed: " .. command)
            break
        else
            retries = retries + 1
            Logger.warn("Command retry " .. retries .. "/" .. CONFIG.MAX_RETRIES .. ": " .. command)
            Utils.safeWait(0.5)
        end
    end
    
    if retries >= CONFIG.MAX_RETRIES then
        Logger.error("Command failed after max retries: " .. command)
    end
end

-- Bot Initialization with Enhanced Error Handling
local BotSystem = {}

function BotSystem.initializeBot()
    if State.botInitialized then return end
    
    Logger.info("Initializing Security Bot v2.0...")
    
    -- Detect and optimize for LDPlayer
    LDPlayerOptimizer.detectLDPlayer()
    LDPlayerOptimizer.optimizeForLDPlayer()
    
    Utils.safeWait(CONFIG.ADMIN_LOAD_WAIT)
    
    -- Execute initial commands with error handling
    local initCommands = {
        "novoid",
        "inf^10^tppos 0 -1000000 0"
    }
    
    -- Add existing loopkills
    if #loopkillsList > 0 then
        table.insert(initCommands, "inf^0.1^loopkill " .. table.concat(loopkillsList, ","))
        table.insert(initCommands, "inf^0.1^loopgoto " .. table.concat(loopkillsList, ",") .. " 0")
    end
    
    table.insert(initCommands, "inf^2^walkfling")
    table.insert(initCommands, "instarespawn")
    table.insert(initCommands, "antiban")
    table.insert(initCommands, "lessfilter 1")
    
    for _, cmd in pairs(initCommands) do
        CommandSystem.executeCommand(cmd)
    end
    
    State.botInitialized = true
    Logger.info("Bot initialization complete")
end

function BotSystem.checkAccountAge(player)
    if not player then return -1 end
    
    local success, age = pcall(function()
        return player.AccountAge
    end)
    
    return success and age or -1
end

function BotSystem.shouldServerHop()
    local success, result = pcall(function()
        local playerCount = 0
        local hasOwner = false
        
        for _, player in pairs(Players:GetPlayers()) do
            if player.Name ~= botOwner then
                playerCount = playerCount + 1
                if Utils.isWhitelisted(player.Name) == "owner" then
                    hasOwner = true
                end
            end
        end
        
        if hasOwner then
            return false
        end
        
        local nonModPlayers = 0
        for _, player in pairs(Players:GetPlayers()) do
            if player.Name ~= botOwner and Utils.isWhitelisted(player.Name) ~= "mod" then
                nonModPlayers = nonModPlayers + 1
            end
        end
        
        return nonModPlayers == 0
    end)
    
    return success and result or false
end

function BotSystem.serverHop()
    Logger.info("Initiating server hop...")
    
    local success, err = pcall(function()
        TeleportService:Teleport(game.PlaceId, LocalPlayer)
    end)
    
    if not success then
        Logger.error("Server hop failed", err)
        Utils.safeWait(5)
        BotSystem.serverHop() -- Retry
    end
end

-- Detection Systems with Enhanced Error Handling
local DetectionSystem = {}

function DetectionSystem.onPlayerDied(player, killer)
    local success, err = pcall(function()
        if not player or not killer then return end
        if player.Name == killer.Name then return end -- Suicide
        
        local whitelistStatus = Utils.isWhitelisted(killer.Name)
        if whitelistStatus then return end
        
        -- Check if bot was killed
        if player.Name == botOwner then
            Logger.info("Bot was killed by " .. killer.Name .. "! Initiating revenge...")
            Utils.addToLoopkills(killer.Name)
            CommandSystem.executeCommand("inf^0.1^loopkill @" .. killer.Name)
            CommandSystem.executeCommand("inf^0.1^loopgoto @" .. killer.Name .. " 0")
            return
        end
        
        -- Get positions with safe access
        local killerRootPart = Utils.getCharacterRootPart(killer.Character)
        local victimRootPart = Utils.getCharacterRootPart(player.Character)
        
        if not killerRootPart or not victimRootPart then return end
        
        local distance = Utils.getDistance(killerRootPart.Position, victimRootPart.Position)
        
        Logger.info("Kill detected: " .. killer.Name .. " -> " .. player.Name .. " (Distance: " .. math.floor(distance) .. " studs)")
        
        if distance >= CONFIG.DISTANCE_LOOPKILL then
            Logger.info("Long distance kill detected! Loopkilling " .. killer.Name)
            Utils.addToLoopkills(killer.Name)
            CommandSystem.executeCommand("inf^0.1^loopkill @" .. killer.Name)
            CommandSystem.executeCommand("inf^0.1^loopgoto @" .. killer.Name .. " 0")
        elseif distance >= CONFIG.DISTANCE_WARNING then
            Logger.info("Suspicious kill detected! Warning kill on " .. killer.Name)
            CommandSystem.executeCommand("kill @" .. killer.Name)
        end
    end)
    
    if not success then
        Logger.error("Error in onPlayerDied", err)
    end
end

function DetectionSystem.checkNewPlayers()
    local success, err = pcall(function()
        for _, player in pairs(Players:GetPlayers()) do
            if player.Name == botOwner then continue end
            if Utils.isWhitelisted(player.Name) then continue end
            
            local accountAge = BotSystem.checkAccountAge(player)
            if accountAge == 0 then
                Logger.info("0-day account detected: " .. player.Name .. "! Adding to loopkills...")
                Utils.addToLoopkills(player.Name)
                CommandSystem.executeCommand("inf^0.1^loopkill @" .. player.Name)
                CommandSystem.executeCommand("inf^0.1^loopgoto @" .. player.Name .. " 0")
            end
        end
    end)
    
    if not success then
        Logger.error("Error checking new players", err)
    end
end

function DetectionSystem.setupPlayerEvents(player)
    local success, err = pcall(function()
        player.CharacterAdded:Connect(function(character)
            local humanoid = character:WaitForChild("Humanoid", 10)
            if not humanoid then return end
            
            humanoid.Died:Connect(function()
                -- Enhanced killer detection with proper type handling
                local killer = nil
                
                -- Method 1: Check for creator tag
                local creatorTag = humanoid:FindFirstChild("creator")
                if creatorTag and creatorTag.Value then
                    killer = Utils.getPlayerFromInstance(creatorTag.Value)
                end
                
                -- Method 2: Check character for creator tags
                if not killer then
                    local tags = character:GetChildren()
                    for _, tag in pairs(tags) do
                        if tag.Name == "creator" and tag:IsA("ObjectValue") and tag.Value then
                            killer = Utils.getPlayerFromInstance(tag.Value)
                            if killer then break end
                        end
                    end
                end
                
                -- Method 3: Check for recent damage (fallback)
                if not killer then
                    -- Additional fallback methods can be implemented here
                end
                
                if killer and killer:IsA("Player") then
                    DetectionSystem.onPlayerDied(player, killer)
                end
            end)
        end)
    end)
    
    if not success then
        Logger.error("Error setting up player events for " .. player.Name, err)
    end
end

-- Event Connections with Error Handling
local function setupEventConnections()
    -- Player removing event
    Players.PlayerRemoving:Connect(function(player)
        Utils.safeWait(2)
        if BotSystem.shouldServerHop() then
            BotSystem.serverHop()
        end
    end)
    
    -- Player added event
    Players.PlayerAdded:Connect(function(player)
        Utils.safeWait(1)
        DetectionSystem.checkNewPlayers()
        DetectionSystem.setupPlayerEvents(player)
    end)
    
    -- Setup events for existing players
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            DetectionSystem.setupPlayerEvents(player)
        end
    end
end

-- Main Loop with Performance Optimization
local function mainLoop()
    local lastUpdate = tick()
    
    RunService.Heartbeat:Connect(function()
        local currentTime = tick()
        
        -- Performance throttling for mobile
        if State.performanceMode and (currentTime - lastUpdate) < CONFIG.HEARTBEAT_INTERVAL then
            return
        end
        
        lastUpdate = currentTime
        State.lastHeartbeat = currentTime
        
        -- Process command queue
        CommandSystem.processCommandQueue()
        
        -- Track bot position with error handling
        pcall(function()
            if LocalPlayer.Character then
                local rootPart = Utils.getCharacterRootPart(LocalPlayer.Character)
                if rootPart then
                    local currentPos = rootPart.Position
                    
                    -- Check for position anomalies
                    if currentPos.Y < -500000 and State.lastBotPosition.Y > -500000 then
                        Logger.warn("Bot position anomaly detected! Possible exploit attack.")
                    end
                    
                    State.lastBotPosition = currentPos
                end
            end
        end)
    end)
end

-- Initialization
local function initialize()
    Logger.info("Starting Security Bot v2.0...")
    Logger.info("Bot Owner: " .. botOwner)
    Logger.info("LDPlayer Optimization: " .. tostring(CONFIG.LDPLAYER_DETECTION))
    
    -- Setup event connections
    setupEventConnections()
    
    -- Start main loop
    mainLoop()
    
    -- Initialize bot in separate thread
    spawn(function()
        BotSystem.initializeBot()
        DetectionSystem.checkNewPlayers()
        
        -- Initial server hop check
        Utils.safeWait(10)
        if BotSystem.shouldServerHop() then
            BotSystem.serverHop()
        end
    end)
    
    Logger.info("Security Bot v2.0 loaded successfully!")
    Logger.info("Monitoring for exploiters with enhanced detection...")
end

-- Start the bot
initialize()
