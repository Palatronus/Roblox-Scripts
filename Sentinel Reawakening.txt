-- SFOTHO Security Bot Script v4.0 - Complete Rewrite
-- FE Compatible Vigilante Security System
-- Fully Functional with Zero Console Leakage

print("Loading SFOTHO Security Bot v4.0...")

-- ========================================
-- CORE SERVICES INITIALIZATION
-- ========================================

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local TextChatService = game:GetService("TextChatService")
local ContextActionService = game:GetService("ContextActionService")
local CoreGui = game:GetService("CoreGui")
local StarterGui = game:GetService("StarterGui")
local TeleportService = game:GetService("TeleportService")

local LocalPlayer = Players.LocalPlayer
local botOwner = LocalPlayer.Name

-- ========================================
-- CONFIGURATION
-- ========================================

local Config = {
    NEW_ACCOUNT_THRESHOLD = 0,
    LONG_KILL_DISTANCE = 14,
    REACH_WARNING_MIN = 15,
    REACH_LOOP_MIN = 25,
    COMMAND_DELAY = 0.75,
    CHAR_DELAY_MIN = 0.05,
    CHAR_DELAY_MAX = 0.18,
    RETRY_LIMIT = 3,
    STOP_KEYWORD = "Qpmbsjbvt",
    SEQUENCE_ON_JOIN = true,
    COMMAND_TOGGLE_CHAR = "ÅŸ",
    COMMAND_TOGGLE_KEYCODE = Enum.KeyCode.Semicolon,
    COMMAND_TOGGLE_FALLBACKS = {"Backquote", "Quote", "Slash"},
    COMMAND_TOGGLE_ATTEMPTS = 3,
    COMMAND_BAR_FOCUS_TIMEOUT = 0.6,
    POST_TOGGLE_WAIT = 0.35,
    PRE_TYPE_WAIT = 0.07,
    POST_TYPE_WAIT = 0.12,
    POST_ENTER_WAIT = 0.28,
    COMMAND_BAR_TARGET_HINTS = {
        "infiniteyield", "iy", "commandbar", "cmdbar", "cmd", "command"
    },
    VERIFY_INPUT_VISUALLY = true,
    VISUAL_CONFIRM_DURATION = 0.8,
    INPUT_VERIFY_TIMEOUT = 0.6,
    DEBUG_INPUT = false,
    FOCUS_RECAPTURE_RETRY = 6,
    EXTERNAL_LOOPLIST_PATH = "C:/Users/MEV/Desktop/Loopkills.txt",
    PLACE_ID = game.PlaceId,
    SERVER_HOP_CHECK_DELAY = 10,
    ACTION_ON_NEW_ACCOUNT = "loopkill",
    ACTION_ON_KILL_BOT = "loopfling",
    ACTION_ON_LONG_DISTANCE = "singlekill",
    LOOPLIST_FILE = "SecurityBot_looplist.txt",
    ACTION_COOLDOWNS = {
        singlekill = 7.5,
        loopkill = 45,
        loopfling = 45
    },
    FLINGER_VELOCITY_THRESHOLD = 180,
    FLINGER_CHECK_INTERVAL = 0.25,
    STUCK_MOVE_EPSILON = 2.0,
    STUCK_FREEZE_TIMEOUT = 10,
    STUCK_RECOVERY_ENABLED = true,
    PERSIST_DATA_FOLDER = "SecurityBot_Data",
    PERSIST_JSON_PATH = "SecurityBot_Data/looped.json",
    TEMP_LOOP_TTL_SEC = 0,
    ENCRYPT_STORAGE = true,
    ENCRYPTION_KEY_SEED = "SentinelKeySeed",
    BRIDGE_ENABLED = true,
    BRIDGE_URL = "http://127.0.0.1:8765",
    INIT_DELAY_SEC = 10,
    GRACE_NO_LOOP_SEC = 5,
    GRACE_NO_LOOP_DISTANCE = 25,
    USE_UI_LOOPLIST = true,
    LOOPLIST_UI_AUTO_OPEN = true,
    FORCE_RESET_DEFAULT_LOOPLIST = false,
    DEFAULT_LOOPLIST = {
        "@Idontknow422299","@Noob21345910","@vikiingytre","@ModelsAndDatabases","@ImACute_Gorl4","@guaiabsi","@x990Xd","@kgkkgkktll","@ldsklfklsdfkldskfds","@jrtkgkkgkgkgkhk","@BoomyRealTop1Global","@Lucasshed_1","@SpawnYeIIow8","@noradrenilne","@djskfjdskfjkdsjfkds","@spy6767676767678","@gavotx","@7389322","@SayuriWasTaken","@bacondude629","@sdsssssssssssssssfss","@entity9258","@tomitoest","@randomsnakeguy2","@soetidjou","@dontyoudare911","@aerotypings","@vaziolele2222","@fdgdffdsf3424","@hiyahiya583","@CapyBarchik87","@burpboy67","@SkinnyLegendCeana","@tomitoest","@norasnewaccheh","@Sugarcrashjojo","@thetgpugooner","@Mr_Remembers","@Tomryden2cuzwhynot","@slaitmyarwse","@Aquatic_515","@lukenicolotreoyo","@Man06Tay10","@unknownexp9","@Jaja1og5","@unknownexp10","@unknownexp12","@hazaeur","@homier_822825","@cookie_333128","@wubberio","@yesus120strange","@guest_201406","@LOS_HACKERSS","@inbluejeans","@nicopla1234","@baskanpro200","@Luc_2004sad","@suspiciousacc15","@ohnobabyohno11","@1B0b7","@c00l_stark","@miscoloredspawn","@tytytyttyyyttyytyy","@hackerdude977","@bloxfruit4372763","@PavoIski","@ceanaphobic","@BannedYouXx4_1x1x1x1","@russki_krutoi","@JustAnExploiterr","@Tuscan_12345689","@DERZKO69","@Reallylongnamelololm","@yahyaslapbattle","@SonicShadows126","@sadssdasddasss","@falooda12345_1","@bombplanner256","@unknownexp10","@h00zgui","@deaglestabbed","@Luka123631","@luigimario_1241","@inbluejeans","@Hackerbacon694","@WhiteGuy603","@aygul3103","@TMKOC63","@damnitnega","@haushhidnuxw8eu","@PurpleGuySmashes1","@PurpleGuySmashes","@T0_Testing","@Dollmyaccdisabled686","@benzoine","@Jqsminx","@TheBoselyMan"
    }
}

-- ========================================
-- WHITELIST SYSTEMS
-- ========================================

local OWNER_WHITELIST = {"HollowGol"}
local MOD_WHITELIST = {
    "STEVETheReal916", "ColonThreeSpam", "SpawnYellow2", "SpawnBlack1",
    "s71pl", "Jacobthecool292", "babyyodasonglol", "forhelpingboi8",
    "Kandale_Dingul", "redalert_E", "fariahoque28", "baze15651",
    "well_ihateboblux", "0bj687Alt"
}

-- ========================================
-- UTILITY FUNCTIONS (CORE) - DEFINED FIRST
-- ========================================

-- Case-insensitive normalization for whitelist comparisons
local function normalizeForCompare(name)
    if not name or name == "" then return "" end
    return string.lower((name:gsub("^@", "")))
end

local function normalizeName(name)
    if not name or name == "" then return nil end
    return name:gsub("^@", "")
end

local function safeWait(duration)
    local success, err = pcall(function()
        task.wait(duration or 0.1)
    end)
    if not success then
        print("[ERROR] Wait failed:", err)
    end
end

local function hasFilesystem()
    return type(isfile) == "function" and type(writefile) == "function" and type(readfile) == "function"
end

-- Simple XOR + Base64 obfuscation (optional) for persistent JSON
local function kdf()
    local seed = tostring(LocalPlayer.UserId).."-"..tostring(Config.ENCRYPTION_KEY_SEED or "")
    return seed
end

local function xorBytes(str, key)
    local out = table.create(#str)
    local klen = #key
    for i = 1, #str do
        local sb = string.byte(str, i)
        local kb = string.byte(key, ((i - 1) % klen) + 1)
        out[i] = string.char(bit32.bxor(sb, kb))
    end
    return table.concat(out)
end

local function hasBase64()
    local ok = pcall(function() HttpService:Base64Encode("test") end)
    return ok
end

local function encodeData(tbl)
    local ok, json = pcall(function() return HttpService:JSONEncode(tbl) end)
    if not ok then return nil end
    if Config.ENCRYPT_STORAGE and hasBase64() then
        local obf = xorBytes(json, kdf())
        local okb, b64 = pcall(function() return HttpService:Base64Encode(obf) end)
        if okb then return b64 end
    end
    return json
end

local function decodeData(str)
    if not str or str == "" then return nil end
    local raw = str
    if Config.ENCRYPT_STORAGE and hasBase64() then
        local okb, dec = pcall(function() return HttpService:Base64Decode(raw) end)
        if okb and type(dec) == "string" then
            raw = xorBytes(dec, kdf())
        else
            raw = str
        end
    end
    local ok, tbl = pcall(function() return HttpService:JSONDecode(raw) end)
    if ok then return tbl end
    return nil
end

-- ========================================
-- STATE MANAGEMENT
-- ========================================

local State = {
    processedPlayers = {},
    loopedPlayers = {},
    stoppedPlayers = {},
    botActive = false,
    seqRan = false,
    connections = {},
    cooldowns = {},
    textInputSupported = false,
    lastAttackerName = nil,
    lastAttackerDist = 0,
    initialSetupComplete = false,
    startTime = tick(),
    detectionEnableAt = 0,
    graceEndAt = 0,
}

-- Build lowercase whitelist sets for robust matching
local OWNER_SET, MOD_SET = {}, {}
for _, n in pairs(OWNER_WHITELIST) do OWNER_SET[normalizeForCompare(n)] = true end
for _, n in pairs(MOD_WHITELIST) do MOD_SET[normalizeForCompare(n)] = true end
-- Always treat the bot owner (LocalPlayer) as whitelisted
OWNER_SET[normalizeForCompare(botOwner)] = true

local function isWhitelisted(username)
    if not username then return false end
    local n = normalizeForCompare(username)
    return OWNER_SET[n] or MOD_SET[n] or false
end

-- ========================================
-- PERSISTENT STORAGE SYSTEM
-- ========================================

local Persistent = { entries = {}, loaded = false }

function Persistent.load()
    if not hasFilesystem() then Persistent.loaded = true; return true end
    local folder = Config.PERSIST_DATA_FOLDER
    if type(isfolder) == "function" and not isfolder(folder) then pcall(function() makefolder(folder) end) end
    local path = Config.PERSIST_JSON_PATH
    local ok, data = pcall(function() return readfile(path) end)
    if not ok or not data or data == "" then Persistent.loaded = true; return true end
    local decoded = decodeData(data)
    if type(decoded) == "table" and decoded.entries then
        Persistent.entries = decoded.entries
        Persistent.loaded = true
        Persistent.pruneExpired()
        return true
    end
    Persistent.loaded = true
    return true
end

function Persistent.save()
    if not hasFilesystem() then return false end
    local blob = { entries = Persistent.entries }
    local payload = encodeData(blob)
    if not payload then return false end
    local ok = pcall(function() writefile(Config.PERSIST_JSON_PATH, payload) end)
    if not ok then print("[WARN] Persistent save failed") end
    return ok
end

function Persistent.add(name, kind, ttl_sec, source)
    local n = normalizeForCompare(name)
    if n == "" or isWhitelisted(name) then return false end
    local now = tick()
    Persistent.entries[n] = {
        username = name:gsub("^@", ""),
        kind = kind or "permanent",
        added_at = now,
        ttl_sec = tonumber(ttl_sec) or 0,
        active = true,
        source = source or "manual",
        last_applied = 0
    }
    Persistent.save()
    return true
end

function Persistent.remove(name)
    local n = normalizeForCompare(name)
    if Persistent.entries[n] then
        Persistent.entries[n] = nil
        Persistent.save()
    end
end

function Persistent.isActive(name)
    local n = normalizeForCompare(name)
    local e = Persistent.entries[n]
    if not e or not e.active then return false end
    if e.ttl_sec and e.ttl_sec > 0 then
        return (tick() - e.added_at) <= e.ttl_sec
    end
    return true
end

function Persistent.getActiveNames(permanentOnly)
    local out = {}
    for _, e in pairs(Persistent.entries) do
        if e.active and (not permanentOnly or e.kind == "permanent") then
            if Persistent.isActive(e.username) then table.insert(out, e.username) end
        end
    end
    table.sort(out)
    return out
end

function Persistent.pruneExpired()
    local changed = false
    for k, e in pairs(Persistent.entries) do
        if e.active and e.ttl_sec and e.ttl_sec > 0 then
            if (tick() - e.added_at) > e.ttl_sec then
                changed = true
                Persistent.entries[k] = nil
            end
        end
    end
    if changed then Persistent.save() end
end

function Persistent.export()
    return encodeData({ entries = Persistent.entries })
end

function Persistent.import(payload)
    local decoded = decodeData(payload)
    if type(decoded) == "table" and decoded.entries then
        Persistent.entries = decoded.entries
        Persistent.save()
        return true
    end
    return false
end

-- ========================================
-- HELPER FUNCTIONS
-- ========================================

local function isSelf(name)
    if not name then return false end
    return normalizeForCompare(name) == normalizeForCompare(LocalPlayer.Name)
end

local function detectionEnabled()
    return tick() >= (State.detectionEnableAt or 0)
end

local function inWarmupGrace()
    local t = tick()
    return t >= (State.detectionEnableAt or 0) and t < (State.graceEndAt or 0)
end

local function isOwner(username)
    if not username then return false end
    local n = normalizeForCompare(username)
    return OWNER_SET[n] or false
end

local function isMod(username)
    if not username then return false end
    local n = normalizeForCompare(username)
    return MOD_SET[n] or isOwner(username)
end

local function canRunAction(name, action)
    if not name or name == "" then return false end
    if isSelf(name) then return false end
    if (action == "singlekill" or action == "loopkill" or action == "loopfling") and not detectionEnabled() then
        return false
    end
    if (action == "loopkill" or action == "loopfling") and Persistent.isActive(name) then
        return false
    end
    local last = (State.cooldowns[name] and State.cooldowns[name][action]) or 0
    local cd = (Config.ACTION_COOLDOWNS and Config.ACTION_COOLDOWNS[action]) or 8
    return (tick() - last) > cd
end

local function markActionRun(name, action)
    State.cooldowns[name] = State.cooldowns[name] or {}
    State.cooldowns[name][action] = tick()
end

print("SecurityBot v4.0 loaded successfully - All function dependencies resolved!")

-- Initialize the bot
task.spawn(function()
    Persistent.load()
    State.botActive = true
    print("SecurityBot v4.0 is now active!")
end)
