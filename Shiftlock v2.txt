local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer

-- GUI Setup
local ShiftLockUI = Instance.new("ScreenGui")
ShiftLockUI.Parent = game:GetService("CoreGui")
ShiftLockUI.ResetOnSpawn = false

local ToggleButton = Instance.new("ImageButton")
ToggleButton.Parent = ShiftLockUI
ToggleButton.BackgroundTransparency = 1
ToggleButton.Size = UDim2.new(0, 40, 0, 40)
ToggleButton.Position = UDim2.new(1, -50, 0.5, -20)
ToggleButton.Image = "rbxasset://textures/ui/mouseLock_off@2x.png"

-- System Variables
local IsActive = false
local InputConnection
local RenderConnection
local Sensitivity = 0.4
local CameraAnchor = CFrame.new()

local function UpdateRotation(delta)
    local character = Player.Character
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")
    local camera = workspace.CurrentCamera
    
    if rootPart and camera then
        -- Update character rotation
        local yawDelta = -delta.X * Sensitivity
        rootPart.CFrame = rootPart.CFrame * CFrame.Angles(0, math.rad(yawDelta), 0)
        
        -- Update camera pitch (limited vertical movement)
        local pitchDelta = math.clamp(delta.Y * Sensitivity * 0.5, -70, 70)
        camera.CFrame = camera.CFrame * CFrame.Angles(math.rad(pitchDelta), 0, 0)
    end
end

local function HandleInput(input, gameProcessed)
    if IsActive and not gameProcessed then
        if input.UserInputType == Enum.UserInputType.MouseMovement
        or input.UserInputType == Enum.UserInputType.Touch then
            UpdateRotation(input.Delta)
        end
    end
end

ToggleButton.MouseButton1Click:Connect(function()
    IsActive = not IsActive
    ToggleButton.Image = IsActive and "rbxasset://textures/ui/mouseLock_on@2x.png" 
        or "rbxasset://textures/ui/mouseLock_off@2x.png"

    if IsActive then
        -- Initialize locked state
        Player.Character.Humanoid.AutoRotate = false
        workspace.CurrentCamera.CameraType = Enum.CameraType.Scriptable
        CameraAnchor = workspace.CurrentCamera.CFrame
        
        -- Start updates
        InputConnection = UserInputService.InputChanged:Connect(HandleInput)
        RenderConnection = RunService.RenderStepped:Connect(function()
            workspace.CurrentCamera.CFrame = CameraAnchor
        end)
    else
        -- Cleanup
        Player.Character.Humanoid.AutoRotate = true
        workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
        if InputConnection then InputConnection:Disconnect() end
        if RenderConnection then RenderConnection:Disconnect() end
    end
end)
