local uis = game:GetService("UserInputService")
local plrs = game:GetService("Players")
local rus = game:GetService("RunService")
local ws = game:GetService("Workspace")
local lp = plrs.LocalPlayer
local mouse = lp:GetMouse()
local cam = ws.CurrentCamera
local e = Enum

-- Your original UI setup
local i10 = Instance.new("ScreenGui")
i10.Name = "patchma_hub"
i10.ZIndexBehavior = e.ZIndexBehavior.Sibling
i10.ResetOnSpawn = false
i10.Parent = lp:WaitForChild("PlayerGui")

local i1 = Instance.new("Frame")
i1.Name = "MainFrame"
i1.AnchorPoint = Vector2.new(0.5, 0.5)
i1.Position = UDim2.new(0.5, 0, 0.5, 0)
i1.Size = UDim2.new(0, 0, 0, 0)
i1.Visible = false
i1.Parent = i10

-- Your original enum setup
local enumMLCP = e.MouseBehavior.LockCurrentPosition
local enumMLC = (uis.TouchEnabled and enumMLCP) or e.MouseBehavior.LockCenter
local enumMD = e.MouseBehavior.Default

-- New state management
local shiftlock = false
local character, rootPart
local cameraOffset = Vector3.new(0, 3, 10)
local cameraAngle = Vector2.new(0, math.rad(-15))

-- Your original mouse behavior enforcement
uis:GetPropertyChangedSignal("MouseBehavior"):Connect(function()
    if shiftlock and uis.MouseBehavior ~= enumMLC then
        uis.MouseBehavior = enumMLC
    end
end)

-- Proper camera rotation logic
local function updateCamera()
    if not shiftlock or not rootPart then return end
    
    local mouseDelta = uis:GetMouseDelta()
    cameraAngle += Vector2.new(
        -mouseDelta.Y * 0.004,
        -mouseDelta.X * 0.004
    )
    
    cameraAngle = Vector2.new(
        math.clamp(cameraAngle.X, math.rad(-60), math.rad(60)),
        cameraAngle.Y
    )
    
    local rotCFrame = CFrame.Angles(cameraAngle.X, cameraAngle.Y, 0)
    local finalOffset = rotCFrame * cameraOffset
    cam.CFrame = CFrame.new(rootPart.Position + finalOffset, rootPart.Position)
end

-- Character facing logic
local function updateCharacterFacing()
    if not shiftlock or not rootPart then return end
    
    if uis:GetLastInputType() == Enum.UserInputType.MouseMovement then
        local lookVector = cam.CFrame.LookVector * Vector3.new(1, 0, 1)
        rootPart.CFrame = CFrame.new(rootPart.Position, rootPart.Position + lookVector)
    end
end

-- Your original toggle logic (enhanced)
uis.InputBegan:Connect(function(input)
    if input.KeyCode == e.KeyCode.LeftShift then
        shiftlock = not shiftlock
        i1.Visible = shiftlock
        uis.MouseBehavior = shiftlock and enumMLC or enumMD
        cam.CameraType = shiftlock and e.CameraType.Scriptable or e.CameraType.Custom
        
        if shiftlock then
            mouse.TargetFilter = i1
            character = lp.Character or lp.CharacterAdded:Wait()
            rootPart = character:WaitForChild("HumanoidRootPart")
        else
            mouse.TargetFilter = nil
        end
    end
end)

-- Runtime connections
rus.RenderStepped:Connect(updateCamera)
rus.Heartbeat:Connect(updateCharacterFacing)

print("ShiftLock System Ready - Native Behavior Activated")
