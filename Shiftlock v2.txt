local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer

-- GUI Setup
local ShiftLockUI = Instance.new("ScreenGui")
ShiftLockUI.Parent = game:GetService("CoreGui")
ShiftLockUI.ResetOnSpawn = false

local ToggleButton = Instance.new("ImageButton")
ToggleButton.Parent = ShiftLockUI
ToggleButton.BackgroundTransparency = 1
ToggleButton.Size = UDim2.new(0, 40, 0, 40)
ToggleButton.Position = UDim2.new(1, -50, 0.5, -20)
ToggleButton.Image = "rbxasset://textures/ui/mouseLock_off@2x.png"

-- System Variables
local IsActive = false
local BaseYaw = 0
local MouseConnection
local RenderConnection

local function UpdateRotation()
    if not IsActive then return end
    
    local character = Player.Character
    local humanoid = character and character:FindFirstChild("Humanoid")
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")
    local camera = workspace.CurrentCamera
    
    if humanoid and rootPart and camera then
        -- Get mouse delta
        local mouseDelta = UserInputService:GetMouseDelta()
        
        -- Calculate new rotation based on camera orientation
        local cameraCFrame = camera.CFrame
        local lookVector = cameraCFrame.LookVector
        local currentYaw = math.atan2(-lookVector.Z, lookVector.X) + math.pi/2
        
        -- Apply mouse movement to rotation
        currentYaw = currentYaw - math.rad(mouseDelta.X * 0.5)
        
        -- Update character rotation
        rootPart.CFrame = CFrame.new(rootPart.Position) * CFrame.Angles(0, currentYaw, 0)
    end
end

ToggleButton.MouseButton1Click:Connect(function()
    IsActive = not IsActive
    ToggleButton.Image = IsActive and "rbxasset://textures/ui/mouseLock_on@2x.png" or "rbxasset://textures/ui/mouseLock_off@2x.png"
    
    if IsActive then
        -- Initialize rotation lock
        local character = Player.Character
        local humanoid = character and character:FindFirstChild("Humanoid")
        local rootPart = character and character:FindFirstChild("HumanoidRootPart")
        
        if humanoid and rootPart then
            humanoid.AutoRotate = false
            BaseYaw = rootPart.Orientation.Y
        end
        
        -- Use RenderStepped for smooth updates
        RenderConnection = RunService.RenderStepped:Connect(UpdateRotation)
    else
        -- Cleanup
        local character = Player.Character
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid.AutoRotate = true
        end
        if RenderConnection then
            RenderConnection:Disconnect()
            RenderConnection = nil
        end
    end
end)
