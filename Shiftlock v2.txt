local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer

-- ===== UI SETUP =====
local ShiftLockUI = Instance.new("ScreenGui")
ShiftLockUI.Name = "ShiftLockSystem"
ShiftLockUI.ResetOnSpawn = false
ShiftLockUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ShiftLockUI.Parent = game:GetService("CoreGui")

local ToggleButton = Instance.new("ImageButton")
ToggleButton.Name = "ShiftLockToggle"
ToggleButton.Image = "rbxassetid://13270449333" -- OFF state
ToggleButton.Size = UDim2.new(0, 45, 0, 45)
ToggleButton.Position = UDim2.new(1, -60, 0.5, -22.5)
ToggleButton.AnchorPoint = Vector2.new(1, 0.5)
ToggleButton.BackgroundTransparency = 1
ToggleButton.Visible = true
ToggleButton.Parent = ShiftLockUI

-- ===== CORE FUNCTIONALITY =====
local isActive = false
local yaw = 0
local pitch = 0
local inputConnection = nil

local function UpdateCharacterRotation(deltaX)
    local character = Player.Character
    if not character then return end
    
    local humanoid = character:FindFirstChild("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    
    if humanoid and rootPart then
        yaw = yaw - (deltaX * 0.4) -- Rotation speed multiplier
        rootPart.CFrame = CFrame.new(rootPart.Position) * CFrame.Angles(0, math.rad(yaw), 0)
    end
end

local function HandleInput(input)
    if isActive and (input.UserInputType == Enum.UserInputType.MouseMovement 
       or input.UserInputType == Enum.UserInputType.Touch) then
        UpdateCharacterRotation(input.Delta.X)
    end
end

ToggleButton.MouseButton1Click:Connect(function()
    isActive = not isActive
    ToggleButton.Image = isActive and "rbxassetid://13270450007" or "rbxassetid://13270449333"
    
    if Player.Character then
        local humanoid = Player.Character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.AutoRotate = not isActive
        end
        
        if isActive then
            yaw = Player.Character:WaitForChild("HumanoidRootPart").Orientation.Y
            inputConnection = UserInputService.InputChanged:Connect(HandleInput)
        else
            if inputConnection then
                inputConnection:Disconnect()
                inputConnection = nil
            end
        end
    end
end)

-- ===== INITIALIZATION =====
game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.All, true)
ShiftLockUI.Enabled = true
