local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera

-- Configuration
local SHIFT_LOCK_ACTIVE = false
local MOUSE_SENSITIVITY = Vector2.new(0.5, 0.5)
local BASE_CAMERA_OFFSET = Vector3.new(0, 2.5, 10)

-- State management
local character
local humanoidRootPart
local cameraAngle = Vector2.new()
local lastCameraCFrame = CFrame.new()

-- Initialize connections
local connections = {}

-- Function to update character reference
local function UpdateCharacter()
    character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
end

-- Proper shiftlock activation
local function SetShiftlockState(enabled)
    SHIFT_LOCK_ACTIVE = enabled
    
    -- Set mouse behavior
    UserInputService.MouseBehavior = enabled and 
        (UserInputService.TouchEnabled 
            and Enum.MouseBehavior.LockCurrentPosition 
            or Enum.MouseBehavior.LockCenter) 
        or Enum.MouseBehavior.Default
    
    -- Set camera state
    if enabled then
        Camera.CameraType = Enum.CameraType.Scriptable
        lastCameraCFrame = humanoidRootPart.CFrame * CFrame.new(BASE_CAMERA_OFFSET)
        cameraAngle = Vector2.new(0, math.rad(-15))
    else
        Camera.CameraType = Enum.CameraType.Custom
    end
    
    Mouse.TargetFilter = enabled and humanoidRootPart or nil
end

-- Camera update logic
local function UpdateCamera()
    if not SHIFT_LOCK_ACTIVE or not humanoidRootPart then return end
    
    -- Get mouse delta
    local mouseDelta = UserInputService:GetMouseDelta()
    cameraAngle += Vector2.new(
        -mouseDelta.Y * MOUSE_SENSITIVITY.Y,
        -mouseDelta.X * MOUSE_SENSITIVITY.X
    )
    
    -- Clamp vertical angle
    cameraAngle = Vector2.new(
        math.clamp(cameraAngle.X, math.rad(-60), math.rad(60)),
        cameraAngle.Y
    )
    
    -- Calculate camera position
    local rootCFrame = humanoidRootPart.CFrame
    local cameraRot = CFrame.Angles(cameraAngle.X, cameraAngle.Y, 0)
    local cameraOffset = cameraRot * BASE_CAMERA_OFFSET
    
    -- Smooth camera transition
    lastCameraCFrame = lastCameraCFrame:Lerp(
        rootCFrame * CFrame.new(cameraOffset),
        0.3
    )
    
    -- Apply camera transform
    Camera.CFrame = lastCameraCFrame
    Camera.Focus = rootCFrame
end

-- Input handling
table.insert(connections, UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.LeftShift then
        SetShiftlockState(not SHIFT_LOCK_ACTIVE)
    end
end))

table.insert(connections, UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.LeftShift then
        SetShiftlockState(false)
    end
end))

-- Character tracking
table.insert(connections, LocalPlayer.CharacterAdded:Connect(UpdateCharacter))
UpdateCharacter()

-- Camera update loop
table.insert(connections, RunService.RenderStepped:Connect(UpdateCamera))

-- Cleanup
LocalPlayer.CharacterRemoving:Connect(function()
    for _, connection in pairs(connections) do
        connection:Disconnect()
    end
end))

print("ShiftLock System Ready - Press Shift to Toggle")
