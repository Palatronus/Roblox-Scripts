-- Strict nil-protected service initialization
local function safeGetService(serviceName)
    local success, service = pcall(function()
        return game:GetService(serviceName)
    end)
    return success and service or error("Failed to get service: "..serviceName)
end

-- Initialize critical services with fallbacks
local UserInputService = safeGetService("UserInputService")
local Players = safeGetService("Players")
local RunService = safeGetService("RunService")

-- Player initialization with timeout
local LocalPlayer
local startTime = os.clock()
repeat
    LocalPlayer = Players.LocalPlayer
    task.wait(0.1)
until LocalPlayer or os.clock() - startTime > 5

if not LocalPlayer then
    error("Failed to initialize LocalPlayer")
end

-- Mouse initialization with validation
local Mouse
repeat
    Mouse = LocalPlayer:GetMouse()
    task.wait()
    if not Mouse then
        warn("Waiting for mouse instance...")
    end
until Mouse

-- Core state management
local shiftlockActive = false
local currentMouseBehavior = Enum.MouseBehavior.Default

-- UI initialization sequence
local ShiftlockUI = Instance.new("ScreenGui")
ShiftlockUI.Name = "ShiftlockSystem_UI"
ShiftlockUI.ResetOnSpawn = false

local function safeParentGUI()
    local PlayerGui = LocalPlayer:FindFirstChild("PlayerGui") or LocalPlayer:WaitForChild("PlayerGui", 5)
    if PlayerGui then
        ShiftlockUI.Parent = PlayerGui
    else
        warn("Failed to parent Shiftlock UI")
    end
end
safeParentGUI()

local ControlFrame = Instance.new("Frame")
ControlFrame.Name = "ControlFrame"
ControlFrame.Size = UDim2.new(0, 0, 0, 0)
ControlFrame.BackgroundTransparency = 1
ControlFrame.Visible = false
ControlFrame.Parent = ShiftlockUI

-- State management functions
local function updateMouseState()
    if not UserInputService or not Mouse then return end
    
    local success = pcall(function()
        UserInputService.MouseBehavior = currentMouseBehavior
        Mouse.TargetFilter = shiftlockActive and ControlFrame or nil
        ControlFrame.Visible = shiftlockActive
    end)
    
    if not success then
        warn("Failed to update mouse state")
    end
end

-- Input handling with debounce
local debounce = false
UserInputService.InputBegan:Connect(function(input)
    if debounce then return end
    debounce = true
    
    if input.KeyCode == Enum.KeyCode.LeftShift then
        shiftlockActive = not shiftlockActive
        
        currentMouseBehavior = shiftlockActive and (
            UserInputService.TouchEnabled 
            and Enum.MouseBehavior.LockCurrentPosition 
            or Enum.MouseBehavior.LockCenter
        ) or Enum.MouseBehavior.Default
        
        updateMouseState()
    end
    
    debounce = false
end)

-- Continuous state enforcement
RunService.Heartbeat:Connect(function()
    if shiftlockActive then
        pcall(updateMouseState)
    end
end)

-- Touch device adaptation
if UserInputService.TouchEnabled then
    UserInputService.TouchTap:Connect(function()
        if shiftlockActive then
            currentMouseBehavior = Enum.MouseBehavior.LockCurrentPosition
            updateMouseState()
        end
    end)
end

print("Shiftlock system successfully initialized")
warn("Press Left Shift to toggle camera lock")
